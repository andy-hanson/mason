if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const pAdd = function (object, key, value) {
		return Object.defineProperty(object, key, {
			value: value,
			enumerable: true,
			// TODO:ES6 `writable` shouldn't need to be explicit
			writable: false
		});
	};

	exports.pAdd = pAdd;
	// region Builtin Functions for use by the compiler
	const
	// This object contains functions called upon by compiled code.
	ms = {},
	      msDef = function (name, fun) {
		return pAdd(ms, name, fun);
	},
	      msCall = function (name) {
		for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			args[_key - 1] = arguments[_key];
		}

		return ms[name].apply(ms, args);
	};

	exports.ms = ms;
	exports.msDef = msDef;
	exports.msCall = msCall;
	pAdd(global, '_ms', ms);

	const msDefs = {
		lazyGetModule: function (module) {
			if (module === undefined) throw new Error('Module undefined.');
			return module._get instanceof ms.Lazy ? module._get : ms.lazy(function () {
				return module;
			});
		},

		getModule: function (module) {
			if (module === undefined) throw new Error('Module undefined.');
			return module._get instanceof ms.Lazy ? module._get.get() : module;
		},

		getDefaultExport: function (module) {
			if (module === undefined) throw new Error('Module undefined.');
			const mod = ms.getModule(module);
			return mod.default === undefined ? mod : mod.default;
		},

		lazyProp: function (lazyObject, key) {
			if (!(lazyObject instanceof ms.Lazy)) throw new Error('Expected a Lazy, got: ' + lazyObject);
			return ms.lazy(function () {
				return lazyObject.get()[key];
			});
		},

		get: function (object, key) {
			const _ = object[key];
			if (_ === undefined) throw new Error('Module ' + object.name + ' does not have ' + key);
			return _;
		},

		bool: function (b) {
			if (typeof b !== 'boolean') throw new Error('Expected Boolean, got ' + b);
			return b;
		},

		// Used for splat calls.
		// TODO:ES6 Shouldn't need. `fun(...arg)` should work for any iterable.
		arr: function (a) {
			if (a instanceof Array) return a;
			const out = [];
			for (let em of ms.iterator(a)) out.push(em);
			return out;
		},

		// For use by Obj-Type.ms generated code.
		checkNoExtras: function (_this, _, rtName) {
			// If there was some key in `_` that we didn't copy:
			if (Object.keys(_).length > Object.keys(_this).length) Object.getOwnPropertyNames(_).forEach(function (name) {
				// TODO:DISPLAYNAME
				if (name !== 'name') if (!Object.prototype.hasOwnProperty.call(_this, name)) throw new Error('Extra prop ' + name + ' for ' + rtName);
			});
		},

		Lazy: function Lazy(get) {
			var _this2 = this;

			this.get = function () {
				_this2.get = function () {
					throw new Error('Lazy value depends on itself. Thunk: ' + get);
				};
				const _ = get();
				_this2.get = function () {
					return _;
				};
				return _;
			};
		},
		lazy: function (_) {
			return new ms.Lazy(_);
		},
		unlazy: function (_) {
			return _ instanceof ms.Lazy ? _.get() : _;
		},

		set: function (_, k0, v0, k1, v1, k2, v2, k3) {
			const doSet = function (k, v) {
				// TODO:DISPLAYNAME
				if (!(k === 'name' && _ instanceof Function)) _[k] = v;
			};

			doSet(k0, v0);
			if (k1 === undefined) return _;
			doSet(k1, v1);
			if (k2 === undefined) return _;
			doSet(k2, v2);
			if (k3 === undefined) return _;
			for (let i = 7; i < arguments.length; i = i + 2) doSet(arguments[i], arguments[i + 1]);
			return _;
		},

		lset: function (_, k0, v0, k1, v1, k2, v2, k3) {
			setOrLazy(_, k0, v0);
			if (k1 === undefined) return _;
			setOrLazy(_, k1, v1);
			if (k2 === undefined) return _;
			setOrLazy(_, k2, v2);
			if (k3 === undefined) return _;
			for (let i = 7; i < arguments.length; i = i + 2) setOrLazy(_, arguments[i], arguments[i + 1]);
			return _;
		}
	};
	Object.keys(msDefs).forEach(function (_) {
		return msDef(_, msDefs[_]);
	});

	const setOrLazy = function (obj, key, val) {
		if (val instanceof ms.Lazy) Object.setProperty(obj, key, { get: function () {
				return ms.unlazy(val);
			} });else pAdd(obj, key, val);
	};

	const msDefTemp = function (name, fun) {
		return ms[name] = fun;
	};

	msDefTemp('show', function (_) {
		if (typeof _ !== 'string' && typeof _ !== 'number') throw new Error('Only use Strings or Numbers here until this is overridden by show.ms. Got:\n' + _);
		return _.toString();
	});

	// region Contains
	// Some Types want to implement contains? before it is officially defined.
	const containsImplSymbol = 'impl-contains?';
	exports.containsImplSymbol = containsImplSymbol;
	const implContains = function (type, impl) {
		return Object.defineProperty(type.prototype, containsImplSymbol, {
			value: impl,
			enumerable: false
		});
	};

	exports.implContains = implContains;
	// Overwritten by Type/index.ms to actually do type checking.
	msDefTemp('checkContains', function (type, val) {
		return val;
	});

	Object[containsImplSymbol] = function (ignore, _) {
		if (_ == null) return false;
		switch (typeof _) {
			case 'boolean':
			case 'number':
			case 'string':
			case 'symbol':
				return false;
			default:
				return true;
		}
	};

	// An object is a Function if its typeof is `function`.
	// This helps us catch any callabe Obj-Type.
	// TODO: Separate Function from Callable
	// Since these are primitives, we can't use `instanceof`.
	[Function, Boolean, String, Symbol, Number].forEach(function (type) {
		// Generated code is faster than using a closure.
		const src = 'return typeof _ === "' + type.name.toLowerCase() + '"';
		pAdd(type, containsImplSymbol, Function('ignore', '_', src));
	});
});
//# sourceMappingURL=data:application/json;base64,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QUM7QUFDZixRQUFLLFFBQVEsQ0FBQztBQUNkLFFBQUssUUFBUSxDQUFDO0FBQ2QsUUFBSyxRQUFRO0FBQ1osV0FBTyxLQUFLLENBQUE7QUFBQSxBQUNiO0FBQ0MsV0FBTyxJQUFJLENBQUE7QUFBQSxHQUNaO0VBQ0QsQ0FBQzs7Ozs7O0FBTUYsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSSxFQUFJOztBQUU3RCxRQUFNLEdBQUcsR0FBRyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQTtBQUNuRSxNQUFJLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7RUFDNUQsQ0FBQyxDQUFBIiwiZmlsZSI6InByaXZhdGUvYm9vdHN0cmFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHBBZGQgPSAob2JqZWN0LCBrZXksIHZhbHVlKSA9PlxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcblx0XHR2YWx1ZSxcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdC8vIFRPRE86RVM2IGB3cml0YWJsZWAgc2hvdWxkbid0IG5lZWQgdG8gYmUgZXhwbGljaXRcblx0XHR3cml0YWJsZTogZmFsc2Vcblx0fSlcblxuLy8gcmVnaW9uIEJ1aWx0aW4gRnVuY3Rpb25zIGZvciB1c2UgYnkgdGhlIGNvbXBpbGVyXG5leHBvcnQgY29uc3Rcblx0Ly8gVGhpcyBvYmplY3QgY29udGFpbnMgZnVuY3Rpb25zIGNhbGxlZCB1cG9uIGJ5IGNvbXBpbGVkIGNvZGUuXG5cdG1zID0geyB9LFxuXHRtc0RlZiA9IChuYW1lLCBmdW4pID0+XG5cdFx0cEFkZChtcywgbmFtZSwgZnVuKSxcblx0bXNDYWxsID0gKG5hbWUsIC4uLmFyZ3MpID0+XG5cdFx0bXNbbmFtZV0oLi4uYXJncylcblxucEFkZChnbG9iYWwsICdfbXMnLCBtcylcblxuY29uc3QgbXNEZWZzID0ge1xuXHRsYXp5R2V0TW9kdWxlKG1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUgPT09IHVuZGVmaW5lZClcblx0XHRcdHRocm93IG5ldyBFcnJvcignTW9kdWxlIHVuZGVmaW5lZC4nKVxuXHRcdHJldHVybiBtb2R1bGUuX2dldCBpbnN0YW5jZW9mIG1zLkxhenkgPyBtb2R1bGUuX2dldCA6IG1zLmxhenkoKCkgPT4gbW9kdWxlKVxuXHR9LFxuXG5cdGdldE1vZHVsZShtb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlID09PSB1bmRlZmluZWQpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ01vZHVsZSB1bmRlZmluZWQuJylcblx0XHRyZXR1cm4gbW9kdWxlLl9nZXQgaW5zdGFuY2VvZiBtcy5MYXp5ID8gbW9kdWxlLl9nZXQuZ2V0KCkgOiBtb2R1bGVcblx0fSxcblxuXHRnZXREZWZhdWx0RXhwb3J0OiBtb2R1bGUgPT4ge1xuXHRcdGlmIChtb2R1bGUgPT09IHVuZGVmaW5lZClcblx0XHRcdHRocm93IG5ldyBFcnJvcignTW9kdWxlIHVuZGVmaW5lZC4nKVxuXHRcdGNvbnN0IG1vZCA9IG1zLmdldE1vZHVsZShtb2R1bGUpXG5cdFx0cmV0dXJuIG1vZC5kZWZhdWx0ID09PSB1bmRlZmluZWQgPyBtb2QgOiBtb2QuZGVmYXVsdFxuXHR9LFxuXG5cdGxhenlQcm9wKGxhenlPYmplY3QsIGtleSkge1xuXHRcdGlmICghKGxhenlPYmplY3QgaW5zdGFuY2VvZiBtcy5MYXp5KSlcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYSBMYXp5LCBnb3Q6ICR7bGF6eU9iamVjdH1gKVxuXHRcdHJldHVybiBtcy5sYXp5KCgpID0+IGxhenlPYmplY3QuZ2V0KClba2V5XSlcblx0fSxcblxuXHRnZXQob2JqZWN0LCBrZXkpIHtcblx0XHRjb25zdCBfID0gb2JqZWN0W2tleV1cblx0XHRpZiAoXyA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBNb2R1bGUgJHtvYmplY3QubmFtZX0gZG9lcyBub3QgaGF2ZSAke2tleX1gKVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0Ym9vbChiKSB7XG5cdFx0aWYgKHR5cGVvZiBiICE9PSAnYm9vbGVhbicpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIEJvb2xlYW4sIGdvdCAke2J9YClcblx0XHRyZXR1cm4gYlxuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIHNwbGF0IGNhbGxzLlxuXHQvLyBUT0RPOkVTNiBTaG91bGRuJ3QgbmVlZC4gYGZ1biguLi5hcmcpYCBzaG91bGQgd29yayBmb3IgYW55IGl0ZXJhYmxlLlxuXHRhcnIoYSkge1xuXHRcdGlmIChhIGluc3RhbmNlb2YgQXJyYXkpXG5cdFx0XHRyZXR1cm4gYVxuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0Zm9yIChsZXQgZW0gb2YgbXMuaXRlcmF0b3IoYSkpXG5cdFx0XHRvdXQucHVzaChlbSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0Ly8gRm9yIHVzZSBieSBPYmotVHlwZS5tcyBnZW5lcmF0ZWQgY29kZS5cblx0Y2hlY2tOb0V4dHJhcyhfdGhpcywgXywgcnROYW1lKSB7XG5cdFx0Ly8gSWYgdGhlcmUgd2FzIHNvbWUga2V5IGluIGBfYCB0aGF0IHdlIGRpZG4ndCBjb3B5OlxuXHRcdGlmIChPYmplY3Qua2V5cyhfKS5sZW5ndGggPiBPYmplY3Qua2V5cyhfdGhpcykubGVuZ3RoKVxuXHRcdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoXykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG5cdFx0XHRcdC8vIFRPRE86RElTUExBWU5BTUVcblx0XHRcdFx0aWYgKG5hbWUgIT09ICduYW1lJylcblx0XHRcdFx0XHRpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfdGhpcywgbmFtZSkpXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0V4dHJhIHByb3AgJyArIG5hbWUgKyAnIGZvciAnICsgcnROYW1lKVxuXHRcdFx0fSlcblx0fSxcblxuXHRMYXp5OiBmdW5jdGlvbiBMYXp5KGdldCkge1xuXHRcdHRoaXMuZ2V0ID0gKCkgPT4ge1xuXHRcdFx0dGhpcy5nZXQgPSAoKSA9PiB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgTGF6eSB2YWx1ZSBkZXBlbmRzIG9uIGl0c2VsZi4gVGh1bms6ICR7Z2V0fWApXG5cdFx0XHR9XG5cdFx0XHRjb25zdCBfID0gZ2V0KClcblx0XHRcdHRoaXMuZ2V0ID0gKCkgPT4gX1xuXHRcdFx0cmV0dXJuIF9cblx0XHR9XG5cdH0sXG5cdGxhenk6IF8gPT4gbmV3IG1zLkxhenkoXyksXG5cdHVubGF6eTogXyA9PiBfIGluc3RhbmNlb2YgbXMuTGF6eSA/IF8uZ2V0KCkgOiBfLFxuXG5cdHNldChfLCBrMCwgdjAsIGsxLCB2MSwgazIsIHYyLCBrMykge1xuXHRcdGNvbnN0IGRvU2V0ID0gKGssIHYpID0+IHtcblx0XHRcdC8vIFRPRE86RElTUExBWU5BTUVcblx0XHRcdGlmICghKGsgPT09ICduYW1lJyAmJiBfIGluc3RhbmNlb2YgRnVuY3Rpb24pKVxuXHRcdFx0XHRfW2tdID0gdlxuXHRcdH1cblxuXHRcdGRvU2V0KGswLCB2MClcblx0XHRpZiAoazEgPT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBfXG5cdFx0ZG9TZXQoazEsIHYxKVxuXHRcdGlmIChrMiA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIF9cblx0XHRkb1NldChrMiwgdjIpXG5cdFx0aWYgKGszID09PSB1bmRlZmluZWQpXG5cdFx0XHRyZXR1cm4gX1xuXHRcdGZvciAobGV0IGkgPSA3OyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSA9IGkgKyAyKVxuXHRcdFx0ZG9TZXQoYXJndW1lbnRzW2ldLCBhcmd1bWVudHNbaSArIDFdKVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblxuXHRsc2V0KF8sIGswLCB2MCwgazEsIHYxLCBrMiwgdjIsIGszKSB7XG5cdFx0c2V0T3JMYXp5KF8sIGswLCB2MClcblx0XHRpZiAoazEgPT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBfXG5cdFx0c2V0T3JMYXp5KF8sIGsxLCB2MSlcblx0XHRpZiAoazIgPT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBfXG5cdFx0c2V0T3JMYXp5KF8sIGsyLCB2Milcblx0XHRpZiAoazMgPT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBfXG5cdFx0Zm9yIChsZXQgaSA9IDc7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpID0gaSArIDIpXG5cdFx0XHRzZXRPckxhenkoXywgYXJndW1lbnRzW2ldLCBhcmd1bWVudHNbaSArIDFdKVxuXHRcdHJldHVybiBfXG5cdH1cbn1cbk9iamVjdC5rZXlzKG1zRGVmcykuZm9yRWFjaChfID0+IG1zRGVmKF8sIG1zRGVmc1tfXSkpXG5cbmNvbnN0IHNldE9yTGF6eSA9IChvYmosIGtleSwgdmFsKSA9PiB7XG5cdGlmICh2YWwgaW5zdGFuY2VvZiBtcy5MYXp5KVxuXHRcdE9iamVjdC5zZXRQcm9wZXJ0eShvYmosIGtleSwgeyBnZXQoKSB7IHJldHVybiBtcy51bmxhenkodmFsKSB9IH0pXG5cdGVsc2Vcblx0XHRwQWRkKG9iaiwga2V5LCB2YWwpXG59XG5cbmNvbnN0IG1zRGVmVGVtcCA9IChuYW1lLCBmdW4pID0+XG5cdG1zW25hbWVdID0gZnVuXG5cbm1zRGVmVGVtcCgnc2hvdycsIF8gPT4ge1xuXHRpZiAodHlwZW9mIF8gIT09ICdzdHJpbmcnICYmIHR5cGVvZiBfICE9PSAnbnVtYmVyJylcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRgT25seSB1c2UgU3RyaW5ncyBvciBOdW1iZXJzIGhlcmUgdW50aWwgdGhpcyBpcyBvdmVycmlkZGVuIGJ5IHNob3cubXMuIEdvdDpcXG4ke199YClcblx0cmV0dXJuIF8udG9TdHJpbmcoKVxufSlcblxuLy8gcmVnaW9uIENvbnRhaW5zXG4vLyBTb21lIFR5cGVzIHdhbnQgdG8gaW1wbGVtZW50IGNvbnRhaW5zPyBiZWZvcmUgaXQgaXMgb2ZmaWNpYWxseSBkZWZpbmVkLlxuZXhwb3J0IGNvbnN0IGNvbnRhaW5zSW1wbFN5bWJvbCA9ICdpbXBsLWNvbnRhaW5zPydcbmV4cG9ydCBjb25zdCBpbXBsQ29udGFpbnMgPSAodHlwZSwgaW1wbCkgPT5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGUucHJvdG90eXBlLCBjb250YWluc0ltcGxTeW1ib2wsIHtcblx0XHR2YWx1ZTogaW1wbCxcblx0XHRlbnVtZXJhYmxlOiBmYWxzZVxuXHR9KVxuXG4vLyBPdmVyd3JpdHRlbiBieSBUeXBlL2luZGV4Lm1zIHRvIGFjdHVhbGx5IGRvIHR5cGUgY2hlY2tpbmcuXG5tc0RlZlRlbXAoJ2NoZWNrQ29udGFpbnMnLCAodHlwZSwgdmFsKSA9PiB2YWwpXG5cbk9iamVjdFtjb250YWluc0ltcGxTeW1ib2xdID0gZnVuY3Rpb24oaWdub3JlLCBfKSB7XG5cdGlmIChfID09IG51bGwpXG5cdFx0cmV0dXJuIGZhbHNlXG5cdHN3aXRjaCAodHlwZW9mIF8pIHtcblx0XHRjYXNlICdib29sZWFuJzpcblx0XHRjYXNlICdudW1iZXInOlxuXHRcdGNhc2UgJ3N0cmluZyc6XG5cdFx0Y2FzZSAnc3ltYm9sJzpcblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHR9XG59O1xuXG4vLyBBbiBvYmplY3QgaXMgYSBGdW5jdGlvbiBpZiBpdHMgdHlwZW9mIGlzIGBmdW5jdGlvbmAuXG4vLyBUaGlzIGhlbHBzIHVzIGNhdGNoIGFueSBjYWxsYWJlIE9iai1UeXBlLlxuLy8gVE9ETzogU2VwYXJhdGUgRnVuY3Rpb24gZnJvbSBDYWxsYWJsZVxuLy8gU2luY2UgdGhlc2UgYXJlIHByaW1pdGl2ZXMsIHdlIGNhbid0IHVzZSBgaW5zdGFuY2VvZmAuXG5bIEZ1bmN0aW9uLCBCb29sZWFuLCBTdHJpbmcsIFN5bWJvbCwgTnVtYmVyIF0uZm9yRWFjaCh0eXBlID0+IHtcblx0Ly8gR2VuZXJhdGVkIGNvZGUgaXMgZmFzdGVyIHRoYW4gdXNpbmcgYSBjbG9zdXJlLlxuXHRjb25zdCBzcmMgPSAncmV0dXJuIHR5cGVvZiBfID09PSBcIicgKyB0eXBlLm5hbWUudG9Mb3dlckNhc2UoKSArICdcIidcblx0cEFkZCh0eXBlLCBjb250YWluc0ltcGxTeW1ib2wsIEZ1bmN0aW9uKCdpZ25vcmUnLCAnXycsIHNyYykpXG59KVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=