if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const
	// Kind.ms
	KindContains = function (kind, _) {
		return _ != null && _[kind['symbol-for-isa']] !== undefined;
	},
	      isEmpty = function (array) {
		return array.length === 0;
	},
	     

	// show.ms
	newSet = function () {
		return new Set();
	},
	     

	// Obj-Type.ms and Method.ms and Wrap-Type.ms
	buildStr = function (builder) {
		let s = '';
		builder(function (str) {
			s = s + str + '\n';
		});
		return s;
	},
	     
	// Obj-Type.ms
	addOne = function (_) {
		return _ + 1;
	},
	     

	// perf-test.ms
	timeStar = function (times, timeMe) {
		let i = times;
		const out = [];
		while (i > 0) {
			i = i - 1;
			out.push(timeMe(i));
		}
		return out;
	},
	     

	// Function.ms
	// TODO:ES6 (f, ...args) => Function.prototype.bind.call(f, null, ...args)
	iCurry = function (f) {
		return Function.prototype.bind.apply(f, arguments);
	},
	     

	// Method.js
	// TODO: Should be doable in Mason...
	methodArgNames = function (nArgs) {
		const res = [];
		const a = 'a'.charCodeAt(0);
		for (let i = 0; i < nArgs; i = i + 1) res.push(String.fromCharCode(a + i));
		return res.join(',');
	};

	exports.KindContains = KindContains;
	exports.isEmpty = isEmpty;
	exports.newSet = newSet;
	exports.buildStr = buildStr;
	exports.addOne = addOne;
	exports.timeStar = timeStar;
	exports.iCurry = iCurry;
	exports.methodArgNames = methodArgNames;
	// hash-code.ms
	const hashes = new WeakMap();
	const hashCodeDefault = function (_, hashCode) {
		if (_ === null) return 108;
		if (_ === undefined) return 109;

		let hash = hashes.get(_);
		if (hash !== undefined) return hash;

		// Don't recurse infinitely.
		hashes.set(_, 17);

		hash = 17;
		for (let key in _) hash = hashCode(_[key]) + (hash * 23 | 0) | 0;

		hashes.set(_, hash);
		return hash;
	},
	      hashCodeString = function (_) {
		let hash = 13;
		for (let i = 0; i < _.length; i = i + 1) hash = (hash + _.charCodeAt(i) | 0) * 31;
		return hash;
	};
	exports.hashCodeDefault = hashCodeDefault;
	exports.hashCodeString = hashCodeString;
});
//# sourceMappingURL=data:application/json;base64,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SSxHQUFHLEFBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEFBQUMsSUFBSSxHQUFHLEVBQUUsR0FBSSxDQUFDLENBQUEsQUFBQyxHQUFJLENBQUMsQ0FBQTs7QUFFbEQsUUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDbkIsU0FBTyxJQUFJLENBQUE7RUFDWDtPQUVELGNBQWMsR0FBRyxVQUFBLENBQUMsRUFBSTtBQUNyQixNQUFJLElBQUksR0FBRyxFQUFFLENBQUE7QUFDYixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDdEMsSUFBSSxHQUFHLENBQUMsQUFBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBSSxDQUFDLENBQUEsR0FBSSxFQUFFLENBQUE7QUFDM0MsU0FBTyxJQUFJLENBQUE7RUFDWCxDQUFBO1NBMUJELGVBQWUsR0FBZixlQUFlO1NBcUJmLGNBQWMsR0FBZCxjQUFjIiwiZmlsZSI6InByaXZhdGUvanMtaW1wbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydFx0Y29uc3Rcblx0Ly8gS2luZC5tc1xuXHRLaW5kQ29udGFpbnMgPSAoa2luZCwgXykgPT5cblx0XHRfICE9IG51bGwgJiYgX1traW5kWydzeW1ib2wtZm9yLWlzYSddXSAhPT0gdW5kZWZpbmVkLFxuXHRpc0VtcHR5ID0gYXJyYXkgPT4gYXJyYXkubGVuZ3RoID09PSAwLFxuXG5cdC8vIHNob3cubXNcblx0bmV3U2V0ID0gKCkgPT4gbmV3IFNldCgpLFxuXG5cdC8vIE9iai1UeXBlLm1zIGFuZCBNZXRob2QubXMgYW5kIFdyYXAtVHlwZS5tc1xuXHRidWlsZFN0ciA9IGJ1aWxkZXIgPT4ge1xuXHRcdGxldCBzID0gJydcblx0XHRidWlsZGVyKHN0ciA9PiB7IHMgPSBzICsgc3RyICsgJ1xcbicgfSlcblx0XHRyZXR1cm4gc1xuXHR9LFxuXHQvLyBPYmotVHlwZS5tc1xuXHRhZGRPbmUgPSBfID0+IF8gKyAxLFxuXG5cdC8vIHBlcmYtdGVzdC5tc1xuXHR0aW1lU3RhciA9ICh0aW1lcywgdGltZU1lKSA9PiB7XG5cdFx0bGV0IGkgPSB0aW1lc1xuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0d2hpbGUgKGkgPiAwKSB7XG5cdFx0XHRpID0gaSAtIDFcblx0XHRcdG91dC5wdXNoKHRpbWVNZShpKSlcblx0XHR9XG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXG5cdC8vIEZ1bmN0aW9uLm1zXG5cdC8vIFRPRE86RVM2IChmLCAuLi5hcmdzKSA9PiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKGYsIG51bGwsIC4uLmFyZ3MpXG5cdGlDdXJyeSA9IGZ1bmN0aW9uKGYpIHtcblx0XHRyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoZiwgYXJndW1lbnRzKVxuXHR9LFxuXG5cdC8vIE1ldGhvZC5qc1xuXHQvLyBUT0RPOiBTaG91bGQgYmUgZG9hYmxlIGluIE1hc29uLi4uXG5cdG1ldGhvZEFyZ05hbWVzID0gbkFyZ3MgPT4ge1xuXHRcdGNvbnN0IHJlcyA9IFsgXVxuXHRcdGNvbnN0IGEgPSAnYScuY2hhckNvZGVBdCgwKVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbkFyZ3M7IGkgPSBpICsgMSlcblx0XHRcdHJlcy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYSArIGkpKVxuXHRcdHJldHVybiByZXMuam9pbignLCcpXG5cdH1cblxuLy8gaGFzaC1jb2RlLm1zXG5jb25zdCBoYXNoZXMgPSBuZXcgV2Vha01hcCgpXG5leHBvcnQgY29uc3Rcblx0aGFzaENvZGVEZWZhdWx0ID0gKF8sIGhhc2hDb2RlKSA9PiB7XG5cdFx0aWYgKF8gPT09IG51bGwpXG5cdFx0XHRyZXR1cm4gMTA4XG5cdFx0aWYgKF8gPT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiAxMDlcblxuXHRcdGxldCBoYXNoID0gaGFzaGVzLmdldChfKVxuXHRcdGlmIChoYXNoICE9PSB1bmRlZmluZWQpXG5cdFx0XHRyZXR1cm4gaGFzaFxuXG5cdFx0Ly8gRG9uJ3QgcmVjdXJzZSBpbmZpbml0ZWx5LlxuXHRcdGhhc2hlcy5zZXQoXywgMTcpXG5cblx0XHRoYXNoID0gMTdcblx0XHRmb3IgKGxldCBrZXkgaW4gXylcblx0XHRcdGhhc2ggPSAoaGFzaENvZGUoX1trZXldKSArICgoaGFzaCAqIDIzKSB8IDApKSB8IDBcblxuXHRcdGhhc2hlcy5zZXQoXywgaGFzaClcblx0XHRyZXR1cm4gaGFzaFxuXHR9LFxuXG5cdGhhc2hDb2RlU3RyaW5nID0gXyA9PiB7XG5cdFx0bGV0IGhhc2ggPSAxM1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgXy5sZW5ndGg7IGkgPSBpICsgMSlcblx0XHRcdGhhc2ggPSAoKGhhc2ggKyBfLmNoYXJDb2RlQXQoaSkpIHwgMCkgKiAzMVxuXHRcdHJldHVybiBoYXNoXG5cdH1cbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9