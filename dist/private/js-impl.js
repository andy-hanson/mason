if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const
	// Kind.ms
	KindContains = (kind, _) => _ != null && _[kind['symbol-for-isa']] !== undefined,
	      isEmpty = array => array.length === 0,
	     

	// show.ms
	newSet = () => new Set(),
	     

	// Obj-Type.ms and Method.ms and Wrap-Type.ms
	buildStr = builder => {
		let s = '';
		builder(str => {
			s = s + str + '\n';
		});
		return s;
	},
	     
	// Obj-Type.ms
	addOne = _ => _ + 1,
	     

	// perf-test.ms
	timeStar = (times, timeMe) => {
		let i = times;
		const out = [];
		while (i > 0) {
			i = i - 1;
			out.push(timeMe(i));
		}
		return out;
	},
	     

	// Function.ms
	// TODO:ES6 (f, ...args) => Function.prototype.bind.call(f, null, ...args)
	iCurry = function (f) {
		return Function.prototype.bind.apply(f, arguments);
	},
	     

	// Method.js
	// TODO: Should be doable in Mason...
	methodArgNames = nArgs => {
		const res = [];
		const a = 'a'.charCodeAt(0);
		for (let i = 0; i < nArgs; i = i + 1) res.push(String.fromCharCode(a + i));
		return res.join(',');
	};

	exports.KindContains = KindContains;
	exports.isEmpty = isEmpty;
	exports.newSet = newSet;
	exports.buildStr = buildStr;
	exports.addOne = addOne;
	exports.timeStar = timeStar;
	exports.iCurry = iCurry;
	exports.methodArgNames = methodArgNames;
	// hash-code.ms
	const hashes = new WeakMap();
	const hashCodeDefault = (_, hashCode) => {
		if (_ === null) return 108;
		if (_ === undefined) return 109;

		let hash = hashes.get(_);
		if (hash !== undefined) return hash;

		// Don't recurse infinitely.
		hashes.set(_, 17);

		hash = 17;
		for (let key in _) hash = hashCode(_[key]) + (hash * 23 | 0) | 0;

		hashes.set(_, hash);
		return hash;
	},
	      hashCodeString = _ => {
		let hash = 13;
		for (let i = 0; i < _.length; i = i + 1) hash = (hash + _.charCodeAt(i) | 0) * 31;
		return hash;
	};
	exports.hashCodeDefault = hashCodeDefault;
	exports.hashCodeString = hashCodeString;
});
//# sourceMappingURL=data:application/json;base64,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QyxJQUFJLEFBQUMsSUFBSSxHQUFHLEVBQUUsR0FBSSxDQUFDLENBQUEsQUFBQyxHQUFJLENBQUMsQ0FBQTs7QUFFbEQsUUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDbkIsU0FBTyxJQUFJLENBQUE7RUFDWDtPQUVELGNBQWMsR0FBRyxDQUFDLElBQUk7QUFDckIsTUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFBO0FBQ2IsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQ3RDLElBQUksR0FBRyxDQUFDLEFBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUksQ0FBQyxDQUFBLEdBQUksRUFBRSxDQUFBO0FBQzNDLFNBQU8sSUFBSSxDQUFBO0VBQ1gsQ0FBQTtTQTFCRCxlQUFlLEdBQWYsZUFBZTtTQXFCZixjQUFjLEdBQWQsY0FBYyIsImZpbGUiOiJwcml2YXRlL2pzLWltcGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRcdGNvbnN0XG5cdC8vIEtpbmQubXNcblx0S2luZENvbnRhaW5zID0gKGtpbmQsIF8pID0+XG5cdFx0XyAhPSBudWxsICYmIF9ba2luZFsnc3ltYm9sLWZvci1pc2EnXV0gIT09IHVuZGVmaW5lZCxcblx0aXNFbXB0eSA9IGFycmF5ID0+IGFycmF5Lmxlbmd0aCA9PT0gMCxcblxuXHQvLyBzaG93Lm1zXG5cdG5ld1NldCA9ICgpID0+IG5ldyBTZXQoKSxcblxuXHQvLyBPYmotVHlwZS5tcyBhbmQgTWV0aG9kLm1zIGFuZCBXcmFwLVR5cGUubXNcblx0YnVpbGRTdHIgPSBidWlsZGVyID0+IHtcblx0XHRsZXQgcyA9ICcnXG5cdFx0YnVpbGRlcihzdHIgPT4geyBzID0gcyArIHN0ciArICdcXG4nIH0pXG5cdFx0cmV0dXJuIHNcblx0fSxcblx0Ly8gT2JqLVR5cGUubXNcblx0YWRkT25lID0gXyA9PiBfICsgMSxcblxuXHQvLyBwZXJmLXRlc3QubXNcblx0dGltZVN0YXIgPSAodGltZXMsIHRpbWVNZSkgPT4ge1xuXHRcdGxldCBpID0gdGltZXNcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdHdoaWxlIChpID4gMCkge1xuXHRcdFx0aSA9IGkgLSAxXG5cdFx0XHRvdXQucHVzaCh0aW1lTWUoaSkpXG5cdFx0fVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHQvLyBGdW5jdGlvbi5tc1xuXHQvLyBUT0RPOkVTNiAoZiwgLi4uYXJncykgPT4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChmLCBudWxsLCAuLi5hcmdzKVxuXHRpQ3VycnkgPSBmdW5jdGlvbihmKSB7XG5cdFx0cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KGYsIGFyZ3VtZW50cylcblx0fSxcblxuXHQvLyBNZXRob2QuanNcblx0Ly8gVE9ETzogU2hvdWxkIGJlIGRvYWJsZSBpbiBNYXNvbi4uLlxuXHRtZXRob2RBcmdOYW1lcyA9IG5BcmdzID0+IHtcblx0XHRjb25zdCByZXMgPSBbIF1cblx0XHRjb25zdCBhID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5BcmdzOyBpID0gaSArIDEpXG5cdFx0XHRyZXMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGEgKyBpKSlcblx0XHRyZXR1cm4gcmVzLmpvaW4oJywnKVxuXHR9XG5cbi8vIGhhc2gtY29kZS5tc1xuY29uc3QgaGFzaGVzID0gbmV3IFdlYWtNYXAoKVxuZXhwb3J0IGNvbnN0XG5cdGhhc2hDb2RlRGVmYXVsdCA9IChfLCBoYXNoQ29kZSkgPT4ge1xuXHRcdGlmIChfID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIDEwOFxuXHRcdGlmIChfID09PSB1bmRlZmluZWQpXG5cdFx0XHRyZXR1cm4gMTA5XG5cblx0XHRsZXQgaGFzaCA9IGhhc2hlcy5nZXQoXylcblx0XHRpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGhhc2hcblxuXHRcdC8vIERvbid0IHJlY3Vyc2UgaW5maW5pdGVseS5cblx0XHRoYXNoZXMuc2V0KF8sIDE3KVxuXG5cdFx0aGFzaCA9IDE3XG5cdFx0Zm9yIChsZXQga2V5IGluIF8pXG5cdFx0XHRoYXNoID0gKGhhc2hDb2RlKF9ba2V5XSkgKyAoKGhhc2ggKiAyMykgfCAwKSkgfCAwXG5cblx0XHRoYXNoZXMuc2V0KF8sIGhhc2gpXG5cdFx0cmV0dXJuIGhhc2hcblx0fSxcblxuXHRoYXNoQ29kZVN0cmluZyA9IF8gPT4ge1xuXHRcdGxldCBoYXNoID0gMTNcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IF8ubGVuZ3RoOyBpID0gaSArIDEpXG5cdFx0XHRoYXNoID0gKChoYXNoICsgXy5jaGFyQ29kZUF0KGkpKSB8IDApICogMzFcblx0XHRyZXR1cm4gaGFzaFxuXHR9XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==