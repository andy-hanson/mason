if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const
	// Kind.ms
	KindContains = function (_) {
		return _ != null && _[this['symbol-for-isa']] !== undefined;
	},
	      isEmpty = array => array.length === 0,
	     

	// show.ms
	newSet = () => new Set(),
	     

	// Obj-Type.ms and Method.ms and Wrap-Type.ms
	buildStr = builder => {
		let s = '';
		builder(str => {
			s = s + str + '\n';
		});
		return s;
	},
	     
	// Obj-Type.ms
	addOne = _ => _ + 1,
	     

	// perf-test.ms
	timeStar = (times, timeMe) => {
		let i = times;
		const out = [];
		while (i > 0) {
			i = i - 1;
			out.push(timeMe(i));
		}
		return out;
	},
	     

	// Function.ms
	// TODO:ES6 (f, ...args) => Function.prototype.bind.call(f, null, ...args)
	iCurry = function (f) {
		return Function.prototype.bind.apply(f, arguments);
	},
	     

	// Method.js
	// TODO: Should be doable in Mason...
	methodArgNames = nArgs => {
		const res = [];
		const a = 'a'.charCodeAt(0);
		for (let i = 1; i < nArgs; i = i + 1) res.push(String.fromCharCode(a + i));
		return res.join(',');
	};

	exports.KindContains = KindContains;
	exports.isEmpty = isEmpty;
	exports.newSet = newSet;
	exports.buildStr = buildStr;
	exports.addOne = addOne;
	exports.timeStar = timeStar;
	exports.iCurry = iCurry;
	exports.methodArgNames = methodArgNames;
	// hash-code.ms
	const hashes = new WeakMap();
	const hashCodeDefault = (_, hashCode) => {
		if (_ === null) return 108;
		if (_ === undefined) return 109;

		let hash = hashes.get(_);
		if (hash !== undefined) return hash;

		// Don't recurse infinitely.
		hashes.set(_, 17);

		hash = 17;
		for (let key in _) hash = hashCode(_[key]) + (hash * 23 | 0) | 0;

		hashes.set(_, hash);
		return hash;
	},
	      hashCodeString = function () {
		let hash = 13;
		for (let i = 0; i < this.length; i = i + 1) hash = (hash + this.charCodeAt(i) | 0) * 31;
		return hash;
	};
	exports.hashCodeDefault = hashCodeDefault;
	exports.hashCodeString = hashCodeString;
});
//# sourceMappingURL=data:application/json;base64,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RyxDQUFDLENBQUMsSUFBSSxBQUFDLElBQUksR0FBRyxFQUFFLEdBQUksQ0FBQyxDQUFBLEFBQUMsR0FBSSxDQUFDLENBQUE7O0FBRWxELFFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ25CLFNBQU8sSUFBSSxDQUFBO0VBQ1g7T0FFRCxjQUFjLEdBQUcsWUFBVztBQUMzQixNQUFJLElBQUksR0FBRyxFQUFFLENBQUE7QUFDYixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDekMsSUFBSSxHQUFHLENBQUMsQUFBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBSSxDQUFDLENBQUEsR0FBSSxFQUFFLENBQUE7QUFDOUMsU0FBTyxJQUFJLENBQUE7RUFDWCxDQUFBO1NBMUJELGVBQWUsR0FBZixlQUFlO1NBcUJmLGNBQWMsR0FBZCxjQUFjIiwiZmlsZSI6InByaXZhdGUvanMtaW1wbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydFx0Y29uc3Rcblx0Ly8gS2luZC5tc1xuXHRLaW5kQ29udGFpbnMgPSBmdW5jdGlvbihfKSB7XG5cdFx0cmV0dXJuIF8gIT0gbnVsbCAmJiBfW3RoaXNbJ3N5bWJvbC1mb3ItaXNhJ11dICE9PSB1bmRlZmluZWRcblx0fSxcblx0aXNFbXB0eSA9IGFycmF5ID0+IGFycmF5Lmxlbmd0aCA9PT0gMCxcblxuXHQvLyBzaG93Lm1zXG5cdG5ld1NldCA9ICgpID0+IG5ldyBTZXQoKSxcblxuXHQvLyBPYmotVHlwZS5tcyBhbmQgTWV0aG9kLm1zIGFuZCBXcmFwLVR5cGUubXNcblx0YnVpbGRTdHIgPSBidWlsZGVyID0+IHtcblx0XHRsZXQgcyA9ICcnXG5cdFx0YnVpbGRlcihzdHIgPT4geyBzID0gcyArIHN0ciArICdcXG4nIH0pXG5cdFx0cmV0dXJuIHNcblx0fSxcblx0Ly8gT2JqLVR5cGUubXNcblx0YWRkT25lID0gXyA9PiBfICsgMSxcblxuXHQvLyBwZXJmLXRlc3QubXNcblx0dGltZVN0YXIgPSAodGltZXMsIHRpbWVNZSkgPT4ge1xuXHRcdGxldCBpID0gdGltZXNcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdHdoaWxlIChpID4gMCkge1xuXHRcdFx0aSA9IGkgLSAxXG5cdFx0XHRvdXQucHVzaCh0aW1lTWUoaSkpXG5cdFx0fVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHQvLyBGdW5jdGlvbi5tc1xuXHQvLyBUT0RPOkVTNiAoZiwgLi4uYXJncykgPT4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChmLCBudWxsLCAuLi5hcmdzKVxuXHRpQ3VycnkgPSBmdW5jdGlvbihmKSB7XG5cdFx0cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KGYsIGFyZ3VtZW50cylcblx0fSxcblxuXHQvLyBNZXRob2QuanNcblx0Ly8gVE9ETzogU2hvdWxkIGJlIGRvYWJsZSBpbiBNYXNvbi4uLlxuXHRtZXRob2RBcmdOYW1lcyA9IG5BcmdzID0+IHtcblx0XHRjb25zdCByZXMgPSBbIF1cblx0XHRjb25zdCBhID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IG5BcmdzOyBpID0gaSArIDEpXG5cdFx0XHRyZXMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGEgKyBpKSlcblx0XHRyZXR1cm4gcmVzLmpvaW4oJywnKVxuXHR9XG5cbi8vIGhhc2gtY29kZS5tc1xuY29uc3QgaGFzaGVzID0gbmV3IFdlYWtNYXAoKVxuZXhwb3J0IGNvbnN0XG5cdGhhc2hDb2RlRGVmYXVsdCA9IChfLCBoYXNoQ29kZSkgPT4ge1xuXHRcdGlmIChfID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIDEwOFxuXHRcdGlmIChfID09PSB1bmRlZmluZWQpXG5cdFx0XHRyZXR1cm4gMTA5XG5cblx0XHRsZXQgaGFzaCA9IGhhc2hlcy5nZXQoXylcblx0XHRpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGhhc2hcblxuXHRcdC8vIERvbid0IHJlY3Vyc2UgaW5maW5pdGVseS5cblx0XHRoYXNoZXMuc2V0KF8sIDE3KVxuXG5cdFx0aGFzaCA9IDE3XG5cdFx0Zm9yIChsZXQga2V5IGluIF8pXG5cdFx0XHRoYXNoID0gKGhhc2hDb2RlKF9ba2V5XSkgKyAoKGhhc2ggKiAyMykgfCAwKSkgfCAwXG5cblx0XHRoYXNoZXMuc2V0KF8sIGhhc2gpXG5cdFx0cmV0dXJuIGhhc2hcblx0fSxcblxuXHRoYXNoQ29kZVN0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHRcdGxldCBoYXNoID0gMTNcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpID0gaSArIDEpXG5cdFx0XHRoYXNoID0gKChoYXNoICsgdGhpcy5jaGFyQ29kZUF0KGkpKSB8IDApICogMzFcblx0XHRyZXR1cm4gaGFzaFxuXHR9XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==