{"version":3,"sources":["meta/compile/compile.js"],"names":[],"mappings":";;;;;;kBAcwB,OAAO;;KAdxB,YAAY;;KACZ,EAAE;;KACF,GAAG;;KACH,KAAK;;KACH,cAAc,gBAAd,cAAc;;KAChB,MAAM;;KACN,SAAS;;KACT,IAAI;;KACJ,MAAM;;;AAGb,OAAM,CAAC,KAAK,GAAG,IAAI,CAAA;AAGJ,UAAS,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE;AAC1C,MAAI,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;AAC/B,QAAM,EAAE,GAAG,IAAI,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAA;AACvC,MAAI;AACH,SAAM,CAAC,GAAG,KAAK,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAA;AACjC,SAAM,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;AACxB,SAAM,GAAG,GAAG,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA;AAChC,OAAI,MAAM,CAAA;AACV,OAAI,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;kBACF,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC;;UAA7B,IAAI,WAAJ,IAAI;UAAE,GAAG,WAAH,GAAG;;;AAEjB,UAAM,GAAG,EAAE,IAAI,EAAJ,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAA;IACxD,MACA,MAAM,GAAG,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAA;AACzB,UAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAN,MAAM,EAAE,CAAA;GACxC,CAAC,OAAO,KAAK,EAAE;AACf,OAAI,KAAK,YAAY,YAAY,EAChC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA,KAE/C,MAAM,KAAK,CAAA;GACZ;EACD","file":"meta/compile/compile.js","sourcesContent":["import CompileError from './CompileError'\nimport Cx from './private/Cx'\nimport lex from './private/lex/lex'\nimport parse from './private/parse/parse'\nimport { OptsFromObject } from './private/Opts'\nimport render from './private/render'\nimport transpile from './private/transpile/transpile'\nimport type from './private/U/type'\nimport verify from './private/verify/verify'\n\n// Speed boost by turning this off\nglobal.DEBUG = true\n\n// See private/Opts.js for description of opts\nexport default function compile(src, opts) {\n\ttype(src, String, opts, Object)\n\tconst cx = new Cx(OptsFromObject(opts))\n\ttry {\n\t\tconst e = parse(cx, lex(cx, src))\n\t\tconst vr = verify(cx, e)\n\t\tconst ast = transpile(cx, e, vr)\n\t\tlet result\n\t\tif (cx.opts.sourceMap()) {\n\t\t\tconst { code, map } = render(cx, ast)\n\t\t\t// TODO: There must be a better way of doing this...\n\t\t\tresult = { code, sourceMap: JSON.parse(map.toString()) }\n\t\t} else\n\t\t\tresult = render(cx, ast)\n\t\treturn { warnings: cx.warnings, result }\n\t} catch (error) {\n\t\tif (error instanceof CompileError)\n\t\t\treturn { warnings: cx.warnings, result: error }\n\t\telse\n\t\t\tthrow error\n\t}\n}\n"],"sourceRoot":"/src"}