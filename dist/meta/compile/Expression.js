if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/Loc', 'tupl/dist/tupl', 'tupl/dist/type', './private/language'], function (exports, _esastDistLoc, _tuplDistTupl, _tuplDistType, _privateLanguage) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Loc = _interopRequire(_esastDistLoc);

	var _tupl = _interopRequire(_tuplDistTupl);

	const Expression = (0, _tuplDistTupl.abstract)('Expression', Object, 'doc');
	exports.default = Expression;
	const LineContent = (0, _tuplDistTupl.abstract)('ValOrDo', Expression, 'Valid part of a Block.'),
	      Do = (0, _tuplDistTupl.abstract)('Do', LineContent, '\n\t\tThese can only appear as lines in a Block.\n\t\tNot to be confused with Generator expressions resulting from `do` keyword.'),
	      Val = (0, _tuplDistTupl.abstract)('Val', LineContent, 'These can appear in any expression.');

	exports.LineContent = LineContent;
	exports.Do = Do;
	exports.Val = Val;
	const makeType = function (superType) {
		return function (name, doc, namesTypes, protoProps, tuplProps) {
			return (
				// TODO: provide actual docs...
				(0, _tupl)(name, superType, doc, ['loc', _Loc].concat(namesTypes), protoProps, tuplProps)
			);
		};
	};
	const ee = makeType(Expression),
	      ed = makeType(Do),
	      ev = makeType(Val);

	const LD_Const = 0,
	      LD_Lazy = 1,
	      LD_Mutable = 2,
	      LocalDeclare = ee('LocalDeclare', 'TODO:DOC', ['name', String, 'opType', (0, _tuplDistType.Nullable)(Val), 'kind', Number], {
		isLazy: function () {
			return this.kind === LD_Lazy;
		},
		isMutable: function () {
			return this.kind === LD_Mutable;
		}
	}, {
		// Can't call this 'name' because LocalDeclare.name is 'LocalDeclare'
		declareName: function (loc) {
			return LocalDeclare.plain(loc, 'name');
		},
		focus: function (loc) {
			return LocalDeclare.plain(loc, '_');
		},
		noType: function (loc, name, isLazy) {
			return LocalDeclare(loc, name, null, isLazy ? LD_Lazy : LD_Const);
		},
		plain: function (loc, name) {
			return LocalDeclare.noType(loc, name, false);
		}
	}),
	      LocalDeclareRes = makeType(LocalDeclare)('LocalDeclareRes', 'TODO:DOC', ['opType', (0, _tuplDistType.Nullable)(Val)], {
		name: 'res',
		kind: LD_Const
	}),
	      Debug = ed('Debug', 'TODO:DOC', ['lines', [LineContent]]),
	      Block = (0, _tuplDistTupl.abstract)('Block', Expression, 'TODO:DOC'),
	      BlockDo = makeType(Block)('BlockDo', 'TODO:DOC', ['lines', [LineContent]]),
	      BlockVal = (0, _tuplDistTupl.abstract)('BlockVal', Block, 'TODO:DOC'),
	      BlockWithReturn = makeType(BlockVal)('BlockWithReturn', 'TODO:DOC', ['lines', [LineContent], 'returned', Val]),
	      BlockObj = makeType(BlockVal)('BlockObj', 'TODO:DOC', ['lines', [LineContent], 'keys', [LocalDeclare], 'opObjed', (0, _tuplDistType.Nullable)(Val), 'opName', (0, _tuplDistType.Nullable)(String)]),
	      BagEntry = ee('BagEntry', 'TODO:DOC', ['value', Val]),
	      BlockBag = makeType(BlockVal)('BlockBag', 'TODO:DOC', ['lines', [(0, _tuplDistType.Union)(LineContent, BagEntry)]]),
	      MapEntry = ee('MapEntry', 'TODO:DOC', ['key', Val, 'val', Val]),
	      BlockMap = makeType(BlockVal)('BlockMap', 'TODO:DOC', ['lines', [(0, _tuplDistType.Union)(LineContent, MapEntry)]]),
	      LocalAccess = ev('LocalAccess', 'TODO:DOC', ['name', String], {}, { focus: function (loc) {
			return LocalAccess(loc, '_');
		} }),
	      Assign = ed('Assign', 'TODO:DOC', ['assignee', LocalDeclare, 'value', Val], {}, { focus: function (loc, value) {
			return Assign(loc, LocalDeclare.focus(loc), value);
		} }),
	      AssignDestructure = ed('AssignDestructure', 'TODO:DOC', ['assignees', [LocalDeclare], 'value', Val], {
		// All assignees must share the same kind.
		kind: function () {
			return this.assignees[0].kind;
		}
	}),
	      AssignMutate = ed('AssignMutate', 'TODO:DOC', ['name', String, 'value', Val]),
	      GlobalAccess = ev('GlobalAccess', 'TODO:DOC', ['name', _privateLanguage.JsGlobals]),
	     
	// Module
	UseDo = ee('UseDo', 'TODO:DOC', ['path', String]),
	      Use = ee('Use', 'TODO:DOC', ['path', String, 'used', [LocalDeclare], 'opUseDefault', (0, _tuplDistType.Nullable)(LocalDeclare)]),
	      Module = ee('Module', 'TODO:DOC', ['doUses', [UseDo], 'uses', [Use], 'debugUses', [Use], 'lines', [Do], 'exports', [LocalDeclare], 'opDefaultExport', (0, _tuplDistType.Nullable)(Val)]),
	     

	// Data
	BagSimple = ev('ListSimple', 'TODO:DOC', ['parts', [Val]]),
	      ObjPair = ee('ObjPair', 'TODO:DOC', ['key', String, 'value', Val]),
	     
	// Verifier checks that no two pairs may have the same key.
	ObjSimple = ev('ObjSimple', 'TODO:DOC', ['pairs', [ObjPair]]),
	     

	// Case
	Pattern = ee('Pattern', 'TODO:DOC', ['type', Val, 'locals', [LocalDeclare], 'patterned', LocalAccess]),
	      CaseDoPart = ee('CaseDoPart', 'TODO:DOC', ['test', (0, _tuplDistType.Union)(Val, Pattern), 'result', BlockDo]),
	      CaseValPart = ee('CaseValPart', 'TODO:DOC', ['test', (0, _tuplDistType.Union)(Val, Pattern), 'result', BlockVal]),
	      CaseDo = ed('CaseDo', 'TODO:DOC', ['opCased', (0, _tuplDistType.Nullable)(Assign), 'parts', [CaseDoPart], 'opElse', (0, _tuplDistType.Nullable)(BlockDo)]),
	     
	// Unlike CaseDo, this has `return` statements.
	CaseVal = ev('CaseVal', 'TODO:DOC', ['opCased', (0, _tuplDistType.Nullable)(Assign), 'parts', [CaseValPart], 'opElse', (0, _tuplDistType.Nullable)(BlockVal)]),
	     

	// Statements
	Loop = ed('Loop', 'TODO:DOC', ['block', BlockDo]),
	      EndLoop = ed('EndLoop', 'TODO:DOC', []),
	     

	// Generators
	Yield = ev('Yield', 'TODO:DOC', ['yielded', Val]),
	      YieldTo = ev('YieldTo', 'TODO:DOC', ['yieldedTo', Val]),
	     

	// Expressions
	Splat = ee('Splat', 'TODO:DOC', ['splatted', Val]),
	      Call = ev('Call', 'TODO:DOC', ['called', Val, 'args', [(0, _tuplDistType.Union)(Val, Splat)]], {}, {
		contains: function (loc, testType, tested) {
			return Call(loc, SpecialVal.contains(loc), [testType, tested]);
		},
		sub: function (loc, args) {
			return Call(loc, SpecialVal.sub(loc), args);
		}
	}),
	      BlockWrap = ev('BlockWrap', 'TODO:DOC', ['block', BlockVal]),
	      Fun = ev('Fun', 'TODO:DOC', ['isGenerator', Boolean, 'args', [LocalDeclare], 'opRestArg', (0, _tuplDistType.Nullable)(LocalDeclare), 'block', Block, 'opIn', (0, _tuplDistType.Nullable)(Debug),
	// If non-empty, block should be a BlockVal,
	// and either it has a type or opOut is non-empty.
	'opResDeclare', (0, _tuplDistType.Nullable)(LocalDeclareRes), 'opOut', (0, _tuplDistType.Nullable)(Debug), 'name', (0, _tuplDistType.Nullable)(String)]),
	      Lazy = ev('Lazy', 'TODO:DOC', ['value', Val]),
	      NumberLiteral = ev('NumberLiteral', 'TODO:DOC', ['value', Number]),
	      Member = ev('Member', 'TODO:DOC', ['object', Val, 'name', String]),
	     
	// parts are Strings interleaved with Vals.
	Quote = ev('Quote', 'TODO:DOC', ['parts', [Object]], {}, {
		forString: function (loc, str) {
			return Quote(loc, [str]);
		}
	}),
	      SD_Debugger = 0,
	      SpecialDo = ed('SpecialDo', 'TODO:DOC', ['kind', Number], {}, {
		debugger: function (loc) {
			return SpecialDo(loc, SD_Debugger);
		}
	}),
	      SV_Contains = 0,
	      SV_False = 1,
	      SV_Null = 2,
	      SV_Sub = 3,
	      SV_This = 4,
	      SV_ThisModuleDirectory = 5,
	      SV_True = 6,
	      SV_Undefined = 7,
	     
	// k is a SP_***
	SpecialVal = ev('Special', 'TODO:DOC', ['kind', Number], {}, {
		contains: function (loc) {
			return SpecialVal(loc, SV_Contains);
		},
		sub: function (loc) {
			return SpecialVal(loc, SV_Sub);
		},
		null: function (loc) {
			return SpecialVal(loc, SV_Null);
		}
	});
	exports.LD_Const = LD_Const;
	exports.LD_Lazy = LD_Lazy;
	exports.LD_Mutable = LD_Mutable;
	exports.LocalDeclare = LocalDeclare;
	exports.LocalDeclareRes = LocalDeclareRes;
	exports.Debug = Debug;
	exports.Block = Block;
	exports.BlockDo = BlockDo;
	exports.BlockVal = BlockVal;
	exports.BlockWithReturn = BlockWithReturn;
	exports.BlockObj = BlockObj;
	exports.BagEntry = BagEntry;
	exports.BlockBag = BlockBag;
	exports.MapEntry = MapEntry;
	exports.BlockMap = BlockMap;
	exports.LocalAccess = LocalAccess;
	exports.Assign = Assign;
	exports.AssignDestructure = AssignDestructure;
	exports.AssignMutate = AssignMutate;
	exports.GlobalAccess = GlobalAccess;
	exports.UseDo = UseDo;
	exports.Use = Use;
	exports.Module = Module;
	exports.BagSimple = BagSimple;
	exports.ObjPair = ObjPair;
	exports.ObjSimple = ObjSimple;
	exports.Pattern = Pattern;
	exports.CaseDoPart = CaseDoPart;
	exports.CaseValPart = CaseValPart;
	exports.CaseDo = CaseDo;
	exports.CaseVal = CaseVal;
	exports.Loop = Loop;
	exports.EndLoop = EndLoop;
	exports.Yield = Yield;
	exports.YieldTo = YieldTo;
	exports.Splat = Splat;
	exports.Call = Call;
	exports.BlockWrap = BlockWrap;
	exports.Fun = Fun;
	exports.Lazy = Lazy;
	exports.NumberLiteral = NumberLiteral;
	exports.Member = Member;
	exports.Quote = Quote;
	exports.SD_Debugger = SD_Debugger;
	exports.SpecialDo = SpecialDo;
	exports.SV_Contains = SV_Contains;
	exports.SV_False = SV_False;
	exports.SV_Null = SV_Null;
	exports.SV_Sub = SV_Sub;
	exports.SV_This = SV_This;
	exports.SV_ThisModuleDirectory = SV_ThisModuleDirectory;
	exports.SV_True = SV_True;
	exports.SV_Undefined = SV_Undefined;
	exports.SpecialVal = SpecialVal;
});
//# sourceMappingURL=data:application/json;base64,