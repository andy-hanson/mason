if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/Loc', 'tupl/dist/tupl', 'tupl/dist/type', './private/Lang', './private/U/Op'], function (exports, _esastDistLoc, _tuplDistTupl, _tuplDistType, _privateLang, _privateUOp) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Loc = _interopRequire(_esastDistLoc);

	var _tupl = _interopRequire(_tuplDistTupl);

	var _Op = _interopRequire(_privateUOp);

	const Expression = _tuplDistTupl.abstract('Expression', Object, 'doc');
	exports.default = Expression;
	const Do = _tuplDistTupl.abstract('Do', Expression, '\n\t\tThese can only appear as lines in a Block.\n\t\tNot to be confused with Generator expressions resulting from `do` keyword.'),
	      Val = _tuplDistTupl.abstract('Val', Expression, 'These can appear in any expression.');

	exports.Do = Do;
	exports.Val = Val;
	const makeType = function (superType) {
		return function (name) {
			for (var _len = arguments.length, namesTypes = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
				namesTypes[_key - 1] = arguments[_key];
			}

			return (
				// TODO: provide actual docs...
				_tupl(name, superType, 'doc', ['loc', _Loc].concat(namesTypes))
			);
		};
	};
	const ee = makeType(Expression),
	      ed = makeType(Do),
	      ev = makeType(Val);

	const Debug = ed('Debug', 'lines', [Expression]),
	      BlockDo = ed('BlockDo', 'lines', [Expression]),
	      BlockVal = ed('BlockVal', 'lines', [Expression], 'returned', Val),
	      ModuleDefaultExport = ed('ModuleDefaultExport', 'value', Val),
	      LocalDeclare = Object.assign(ee('LocalDeclare', 'name', String, 'opType', _Op(Val), 'isLazy', Boolean, 'okToNotUse', Boolean), {
		focus: function (loc) {
			return LocalDeclare(loc, '_', _privateUOp.None, false, false);
		},
		res: function (loc, opType) {
			return LocalDeclare(loc, 'res', opType, false, true);
		}
	}),
	      Assign = Object.assign(
	// TODO: 'k' may also be the string 'export'...
	ed('Assign', 'assignee', LocalDeclare, 'k', Number, 'value', Val), { focus: function (loc, value) {
			return Assign(loc, LocalDeclare.focus(loc), '=', value);
		} }),
	      AssignDestructure = ed('AssignDestructure', 'assignees', [LocalDeclare],
	// TODO: 'k' may also be the string 'export'...
	'k', Number, 'value', Val, 'isLazy', Boolean),
	      LocalAccess = Object.assign(ev('LocalAccess', 'name', String), { focus: function (loc) {
			return LocalAccess(loc, '_');
		} }),
	      GlobalAccess = Object.assign(ev('GlobalAccess', 'name', _privateLang.JsGlobals), {
		null: function (loc) {
			return GlobalAccess(loc, 'null');
		},
		true: function (loc) {
			return GlobalAccess(loc, 'true');
		}
	}),
	     
	// Module
	UseDo = ee('UseDo', 'path', String),
	      Use = ee('Use', 'path', String, 'used', [LocalDeclare], 'opUseDefault', _Op(LocalDeclare)),
	     
	// `block` will contain ModuleExport and ModuleDefaultExport_s
	// TODO: BlockVal and don't have `exports` object
	Module = ee('Module', 'doUses', [UseDo], 'uses', [Use], 'debugUses', [Use], 'block', BlockDo),
	     

	// Data
	// TODO: Don't store index here, do it in Vr
	ListEntry = ed('ListEntry', 'value', Val, 'index', Number),
	     
	// TODO: Don't store length here, do it in Vr
	ListReturn = ev('ListReturn', 'length', Number),
	      ListSimple = ev('ListSimple', 'parts', [Val]),
	     

	// TODO: Don't store index here, do it in Vr
	MapEntry = ed('MapEntry', 'key', Val, 'val', Val, 'index', Number),
	     
	// TODO: Don't store length here, do it in Vr
	MapReturn = ev('MapReturn', 'length', Number),
	      ObjReturn = ev('ObjReturn', 'keys', [LocalDeclare], 'debugKeys', [LocalDeclare], 'opObjed', _Op(Val), 'opDisplayName', _Op(String)),
	      ObjPair = ee('ObjPair', 'key', String, 'value', Val),
	     
	// Verifier checks that no two pairs may have the same key.
	ObjSimple = ev('ObjSimple', 'pairs', [ObjPair]),
	     

	// Case
	Pattern = ee('Pattern', 'type', Val, 'locals', [LocalDeclare], 'patterned', LocalAccess),
	      CaseDoPart = ee('CaseDoPart', 'test', _tuplDistType.Union(Val, Pattern), 'result', BlockDo),
	      CaseValPart = ee('CaseValPart', 'test', _tuplDistType.Union(Val, Pattern), 'result', BlockVal),
	      CaseDo = ed('CaseDo', 'opCased', _Op(Assign), 'parts', [CaseDoPart], 'opElse', _Op(BlockDo)),
	     
	// Unlike CaseDo, this has `return` statements.
	CaseVal = ev('CaseVal', 'opCased', _Op(Assign), 'parts', [CaseValPart], 'opElse', _Op(BlockVal)),
	     

	// Statements
	Loop = ed('Loop', 'block', BlockDo),
	      EndLoop = ed('EndLoop'),
	     

	// Generators
	Yield = ev('Yield', 'yielded', Val),
	      YieldTo = ev('YieldTo', 'yieldedTo', Val),
	     

	// Expressions
	Call = Object.assign(ev('Call', 'called', Val, 'args', [Val]), {
		contains: function (loc, testType, tested) {
			return Call(loc, Special.contains(loc), [testType, tested]);
		},
		sub: function (loc, args) {
			return Call(loc, Special.sub(loc), args);
		}
	}),
	     
	// Only for use in a Call
	Splat = ev('Splat', 'splatted', Val),
	      BlockWrap = ev('BlockWrap', 'block', BlockVal),
	      Fun = ev('Fun', 'isGenerator', Boolean, 'args', [LocalDeclare], 'opRestArg', _Op(LocalDeclare),
	// BlockDo or BlockVal
	'block', Expression, 'opIn', _Op(Debug),
	// If non-empty, block should be a BlockVal, and either it has a type or opOut is non-empty.
	'opResDeclare', _Op(LocalDeclare), 'opOut', _Op(Debug)),
	      Lazy = ev('Lazy', 'value', Val),
	      NumberLiteral = ev('NumberLiteral', 'value', Number),
	      Member = ev('Member', 'object', Val, 'name', String),
	     
	// parts are Strings interleaved with Vals.
	Quote = Object.assign(ev('Quote', 'parts', [Object]), {
		forString: function (loc, str) {
			return Quote(loc, [str]);
		}
	}),
	      SP_Contains = 0,
	      SP_Debugger = 1,
	      SP_Sub = 2,
	      SP_This = 3,
	      SP_ThisModuleDirectory = 4,
	      Special = Object.assign(
	// k is a SP_***
	ev('Special', 'k', Number), {
		contains: function (loc) {
			return Special(loc, SP_Contains);
		},
		debugger: function (loc) {
			return Special(loc, SP_Debugger);
		},
		sub: function (loc) {
			return Special(loc, SP_Sub);
		}
	});
	exports.Debug = Debug;
	exports.BlockDo = BlockDo;
	exports.BlockVal = BlockVal;
	exports.ModuleDefaultExport = ModuleDefaultExport;
	exports.LocalDeclare = LocalDeclare;
	exports.Assign = Assign;
	exports.AssignDestructure = AssignDestructure;
	exports.LocalAccess = LocalAccess;
	exports.GlobalAccess = GlobalAccess;
	exports.UseDo = UseDo;
	exports.Use = Use;
	exports.Module = Module;
	exports.ListEntry = ListEntry;
	exports.ListReturn = ListReturn;
	exports.ListSimple = ListSimple;
	exports.MapEntry = MapEntry;
	exports.MapReturn = MapReturn;
	exports.ObjReturn = ObjReturn;
	exports.ObjPair = ObjPair;
	exports.ObjSimple = ObjSimple;
	exports.Pattern = Pattern;
	exports.CaseDoPart = CaseDoPart;
	exports.CaseValPart = CaseValPart;
	exports.CaseDo = CaseDo;
	exports.CaseVal = CaseVal;
	exports.Loop = Loop;
	exports.EndLoop = EndLoop;
	exports.Yield = Yield;
	exports.YieldTo = YieldTo;
	exports.Call = Call;
	exports.Splat = Splat;
	exports.BlockWrap = BlockWrap;
	exports.Fun = Fun;
	exports.Lazy = Lazy;
	exports.NumberLiteral = NumberLiteral;
	exports.Member = Member;
	exports.Quote = Quote;
	exports.SP_Contains = SP_Contains;
	exports.SP_Debugger = SP_Debugger;
	exports.SP_Sub = SP_Sub;
	exports.SP_This = SP_This;
	exports.SP_ThisModuleDirectory = SP_ThisModuleDirectory;
	exports.Special = Special;
});
//# sourceMappingURL=data:application/json;base64,