if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/Loc', 'tupl/dist/tupl', 'tupl/dist/type', './private/Lang'], function (exports, _esastDistLoc, _tuplDistTupl, _tuplDistType, _privateLang) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Loc = _interopRequire(_esastDistLoc);

	var _tupl = _interopRequire(_tuplDistTupl);

	const Expression = _tuplDistTupl.abstract('Expression', Object, 'doc');
	exports.default = Expression;
	const LineContent = _tuplDistTupl.abstract('ValOrDo', Expression, 'Valid part of a Block.'),
	      Do = _tuplDistTupl.abstract('Do', LineContent, '\n\t\tThese can only appear as lines in a Block.\n\t\tNot to be confused with Generator expressions resulting from `do` keyword.'),
	      Val = _tuplDistTupl.abstract('Val', LineContent, 'These can appear in any expression.');

	exports.LineContent = LineContent;
	exports.Do = Do;
	exports.Val = Val;
	const makeType = function (superType) {
		return function (name, doc, namesTypes, protoProps, tuplProps) {
			return (
				// TODO: provide actual docs...
				_tupl(name, superType, 'doc', ['loc', _Loc].concat(namesTypes), protoProps, tuplProps)
			);
		};
	};
	const ee = makeType(Expression),
	      ed = makeType(Do),
	      ev = makeType(Val);

	const LocalDeclare = ee('LocalDeclare', 'TODO:DOC', ['name', String, 'opType', _tuplDistType.Nullable(Val), 'isLazy', Boolean], {}, {
		displayName: function (loc) {
			return LocalDeclare.plain(loc, 'displayName');
		},
		focus: function (loc) {
			return LocalDeclare.plain(loc, '_');
		},
		noType: function (loc, name, isLazy) {
			return LocalDeclare(loc, name, null, isLazy);
		},
		plain: function (loc, name) {
			return LocalDeclare.noType(loc, name, false);
		}
	}),
	      LocalDeclareRes = makeType(LocalDeclare)('LocalDeclareRes', 'TODO:DOC', ['opType', _tuplDistType.Nullable(Val)], {
		name: 'res',
		isLazy: false
	}),
	      Debug = ed('Debug', 'TODO:DOC', ['lines', [LineContent]]),
	      Block = _tuplDistTupl.abstract('Block', Expression, 'TODO:DOC'),
	      BlockDo = makeType(Block)('BlockDo', 'TODO:DOC', ['lines', [LineContent]]),
	      BlockVal = _tuplDistTupl.abstract('BlockVal', Block, 'TODO:DOC'),
	      BlockWithReturn = makeType(BlockVal)('BlockWithReturn', 'TODO:DOC', ['lines', [LineContent], 'returned', Val]),
	      BlockObj = makeType(BlockVal)('BlockObj', 'TODO:DOC', ['lines', [LineContent], 'keys', [LocalDeclare], 'opObjed', _tuplDistType.Nullable(Val), 'opDisplayName', _tuplDistType.Nullable(String)]),
	      BagEntry = ee('BagEntry', 'TODO:DOC', ['value', Val]),
	      BlockBag = makeType(BlockVal)('BlockBag', 'TODO:DOC', ['lines', [_tuplDistType.Union(LineContent, BagEntry)]]),
	      MapEntry = ee('MapEntry', 'TODO:DOC', ['key', Val, 'val', Val]),
	      BlockMap = makeType(BlockVal)('BlockMap', 'TODO:DOC', ['lines', [_tuplDistType.Union(LineContent, MapEntry)]]),
	      Assign = ed('Assign', 'TODO:DOC', ['assignee', LocalDeclare, 'value', Val], {}, { focus: function (loc, value) {
			return Assign(loc, LocalDeclare.focus(loc), value);
		} }),
	      AssignDestructure = ed('AssignDestructure', 'TODO:DOC', ['assignees', [LocalDeclare], 'value', Val, 'isLazy', Boolean]),
	      LocalAccess = ev('LocalAccess', 'TODO:DOC', ['name', String], {}, { focus: function (loc) {
			return LocalAccess(loc, '_');
		} }),
	      GlobalAccess = ev('GlobalAccess', 'TODO:DOC', ['name', _privateLang.JsGlobals], {}, {
		null: function (loc) {
			return GlobalAccess(loc, 'null');
		},
		true: function (loc) {
			return GlobalAccess(loc, 'true');
		}
	}),
	     
	// Module
	UseDo = ee('UseDo', 'TODO:DOC', ['path', String]),
	      Use = ee('Use', 'TODO:DOC', ['path', String, 'used', [LocalDeclare], 'opUseDefault', _tuplDistType.Nullable(LocalDeclare)]),
	      Module = ee('Module', 'TODO:DOC', ['doUses', [UseDo], 'uses', [Use], 'debugUses', [Use], 'lines', [Do], 'exports', [LocalDeclare], 'opDefaultExport', _tuplDistType.Nullable(Val)]),
	     

	// Data
	ListSimple = ev('ListSimple', 'TODO:DOC', ['parts', [Val]]),
	      ObjPair = ee('ObjPair', 'TODO:DOC', ['key', String, 'value', Val]),
	     
	// Verifier checks that no two pairs may have the same key.
	ObjSimple = ev('ObjSimple', 'TODO:DOC', ['pairs', [ObjPair]]),
	     

	// Case
	Pattern = ee('Pattern', 'TODO:DOC', ['type', Val, 'locals', [LocalDeclare], 'patterned', LocalAccess]),
	      CaseDoPart = ee('CaseDoPart', 'TODO:DOC', ['test', _tuplDistType.Union(Val, Pattern), 'result', BlockDo]),
	      CaseValPart = ee('CaseValPart', 'TODO:DOC', ['test', _tuplDistType.Union(Val, Pattern), 'result', BlockVal]),
	      CaseDo = ed('CaseDo', 'TODO:DOC', ['opCased', _tuplDistType.Nullable(Assign), 'parts', [CaseDoPart], 'opElse', _tuplDistType.Nullable(BlockDo)]),
	     
	// Unlike CaseDo, this has `return` statements.
	CaseVal = ev('CaseVal', 'TODO:DOC', ['opCased', _tuplDistType.Nullable(Assign), 'parts', [CaseValPart], 'opElse', _tuplDistType.Nullable(BlockVal)]),
	     

	// Statements
	Loop = ed('Loop', 'TODO:DOC', ['block', BlockDo]),
	      EndLoop = ed('EndLoop', 'TODO:DOC', []),
	     

	// Generators
	Yield = ev('Yield', 'TODO:DOC', ['yielded', Val]),
	      YieldTo = ev('YieldTo', 'TODO:DOC', ['yieldedTo', Val]),
	     

	// Expressions
	Splat = ee('Splat', 'TODO:DOC', ['splatted', Val]),
	      Call = ev('Call', 'TODO:DOC', ['called', Val, 'args', [_tuplDistType.Union(Val, Splat)]], {}, {
		contains: function (loc, testType, tested) {
			return Call(loc, Special.contains(loc), [testType, tested]);
		},
		sub: function (loc, args) {
			return Call(loc, Special.sub(loc), args);
		}
	}),
	      BlockWrap = ev('BlockWrap', 'TODO:DOC', ['block', BlockVal]),
	      Fun = ev('Fun', 'TODO:DOC', ['isGenerator', Boolean, 'args', [LocalDeclare], 'opRestArg', _tuplDistType.Nullable(LocalDeclare), 'block', Block, 'opIn', _tuplDistType.Nullable(Debug),
	// If non-empty, block should be a BlockVal,
	// and either it has a type or opOut is non-empty.
	'opResDeclare', _tuplDistType.Nullable(LocalDeclareRes), 'opOut', _tuplDistType.Nullable(Debug), 'name', _tuplDistType.Nullable(String)]),
	      Lazy = ev('Lazy', 'TODO:DOC', ['value', Val]),
	      NumberLiteral = ev('NumberLiteral', 'TODO:DOC', ['value', Number]),
	      Member = ev('Member', 'TODO:DOC', ['object', Val, 'name', String]),
	     
	// parts are Strings interleaved with Vals.
	Quote = ev('Quote', 'TODO:DOC', ['parts', [Object]], {}, {
		forString: function (loc, str) {
			return Quote(loc, [str]);
		}
	}),
	      SP_Contains = 0,
	      SP_Debugger = 1,
	      SP_Sub = 2,
	      SP_This = 3,
	      SP_ThisModuleDirectory = 4,
	      SP_False = 5,
	      SP_True = 6,
	     
	// k is a SP_***
	Special = ev('Special', 'TODO:DOC', ['kind', Number], {}, {
		contains: function (loc) {
			return Special(loc, SP_Contains);
		},
		debugger: function (loc) {
			return Special(loc, SP_Debugger);
		},
		sub: function (loc) {
			return Special(loc, SP_Sub);
		}
	});
	exports.LocalDeclare = LocalDeclare;
	exports.LocalDeclareRes = LocalDeclareRes;
	exports.Debug = Debug;
	exports.Block = Block;
	exports.BlockDo = BlockDo;
	exports.BlockVal = BlockVal;
	exports.BlockWithReturn = BlockWithReturn;
	exports.BlockObj = BlockObj;
	exports.BagEntry = BagEntry;
	exports.BlockBag = BlockBag;
	exports.MapEntry = MapEntry;
	exports.BlockMap = BlockMap;
	exports.Assign = Assign;
	exports.AssignDestructure = AssignDestructure;
	exports.LocalAccess = LocalAccess;
	exports.GlobalAccess = GlobalAccess;
	exports.UseDo = UseDo;
	exports.Use = Use;
	exports.Module = Module;
	exports.ListSimple = ListSimple;
	exports.ObjPair = ObjPair;
	exports.ObjSimple = ObjSimple;
	exports.Pattern = Pattern;
	exports.CaseDoPart = CaseDoPart;
	exports.CaseValPart = CaseValPart;
	exports.CaseDo = CaseDo;
	exports.CaseVal = CaseVal;
	exports.Loop = Loop;
	exports.EndLoop = EndLoop;
	exports.Yield = Yield;
	exports.YieldTo = YieldTo;
	exports.Splat = Splat;
	exports.Call = Call;
	exports.BlockWrap = BlockWrap;
	exports.Fun = Fun;
	exports.Lazy = Lazy;
	exports.NumberLiteral = NumberLiteral;
	exports.Member = Member;
	exports.Quote = Quote;
	exports.SP_Contains = SP_Contains;
	exports.SP_Debugger = SP_Debugger;
	exports.SP_Sub = SP_Sub;
	exports.SP_This = SP_This;
	exports.SP_ThisModuleDirectory = SP_ThisModuleDirectory;
	exports.SP_False = SP_False;
	exports.SP_True = SP_True;
	exports.Special = Special;
});
//# sourceMappingURL=data:application/json;base64,