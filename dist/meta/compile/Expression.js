if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/Loc', 'tupl/dist/tupl', 'tupl/dist/type', './private/Lang', './private/U/Op'], function (exports, _esastDistLoc, _tuplDistTupl, _tuplDistType, _privateLang, _privateUOp) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Loc = _interopRequire(_esastDistLoc);

	var _tupl = _interopRequire(_tuplDistTupl);

	var _Op = _interopRequire(_privateUOp);

	const Expression = _tuplDistTupl.abstract('Expression', Object, 'doc');
	exports.default = Expression;
	const Do = _tuplDistTupl.abstract('Do', Expression, '\n\t\tThese can only appear as lines in a Block.\n\t\tNot to be confused with Generator expressions resulting from `do` keyword.'),
	      Val = _tuplDistTupl.abstract('Val', Expression, 'These can appear in any expression.');

	exports.Do = Do;
	exports.Val = Val;
	const makeType = function (superType) {
		return function (name, doc, namesTypes, protoProps, tuplProps) {
			return (
				// TODO: provide actual docs...
				_tupl(name, superType, 'doc', ['loc', _Loc].concat(namesTypes), protoProps, tuplProps)
			);
		};
	};
	const ee = makeType(Expression),
	      ed = makeType(Do),
	      ev = makeType(Val);

	const Debug = ed('Debug', 'TODO:DOC', ['lines', [Expression]]),
	      BlockDo = ed('BlockDo', 'TODO:DOC', ['lines', [Expression]]),
	      BlockVal = ed('BlockVal', 'TODO:DOC', ['lines', [Expression], 'returned', Val]),
	      ModuleDefaultExport = ed('ModuleDefaultExport', 'TODO:DOC', ['value', Val]),
	      LocalDeclare = ee('LocalDeclare', 'TODO:DOC', ['name', String, 'opType', _Op(Val), 'isLazy', Boolean], {}, {
		displayName: function (loc) {
			return LocalDeclare.plain(loc, 'displayName');
		},
		focus: function (loc) {
			return LocalDeclare.plain(loc, '_');
		},
		plain: function (loc, name) {
			return LocalDeclare(loc, name, _privateUOp.None, false);
		}
	}),
	      LocalDeclareRes = makeType(LocalDeclare)('LocalDeclareRes', 'TODO:DOC', ['opType', _Op(Val)], {
		name: 'res',
		isLazy: false
	}),
	      Assign = ed('Assign', 'TODO:DOC', ['assignee', LocalDeclare, 'value', Val], {}, { focus: function (loc, value) {
			return Assign(loc, LocalDeclare.focus(loc), value);
		} }),
	      AssignDestructure = ed('AssignDestructure', 'TODO:DOC', ['assignees', [LocalDeclare], 'value', Val, 'isLazy', Boolean]),
	      LocalAccess = ev('LocalAccess', 'TODO:DOC', ['name', String], {}, { focus: function (loc) {
			return LocalAccess(loc, '_');
		} }),
	      GlobalAccess = ev('GlobalAccess', 'TODO:DOC', ['name', _privateLang.JsGlobals], {}, {
		null: function (loc) {
			return GlobalAccess(loc, 'null');
		},
		true: function (loc) {
			return GlobalAccess(loc, 'true');
		}
	}),
	     
	// Module
	UseDo = ee('UseDo', 'TODO:DOC', ['path', String]),
	      Use = ee('Use', 'TODO:DOC', ['path', String, 'used', [LocalDeclare], 'opUseDefault', _Op(LocalDeclare)]),
	      Module = ee('Module', 'TODO:DOC', ['doUses', [UseDo], 'uses', [Use], 'debugUses', [Use], 'lines', [Do], 'exports', [LocalDeclare], 'opDefaultExport', Val]),
	     

	// Data
	ListEntry = ed('ListEntry', 'TODO:DOC', ['value', Val]),
	      ListReturn = ev('ListReturn', 'TODO:DOC', []),
	      ListSimple = ev('ListSimple', 'TODO:DOC', ['parts', [Val]]),
	      MapEntry = ed('MapEntry', 'TODO:DOC', ['key', Val, 'val', Val]),
	      MapReturn = ev('MapReturn', 'TODO:DOC', []),
	      ObjReturn = ev('ObjReturn', 'TODO:DOC', ['keys', [LocalDeclare], 'opObjed', _Op(Val), 'opDisplayName', _Op(String)]),
	      ObjPair = ee('ObjPair', 'TODO:DOC', ['key', String, 'value', Val]),
	     
	// Verifier checks that no two pairs may have the same key.
	ObjSimple = ev('ObjSimple', 'TODO:DOC', ['pairs', [ObjPair]]),
	     

	// Case
	Pattern = ee('Pattern', 'TODO:DOC', ['type', Val, 'locals', [LocalDeclare], 'patterned', LocalAccess]),
	      CaseDoPart = ee('CaseDoPart', 'TODO:DOC', ['test', _tuplDistType.Union(Val, Pattern), 'result', BlockDo]),
	      CaseValPart = ee('CaseValPart', 'TODO:DOC', ['test', _tuplDistType.Union(Val, Pattern), 'result', BlockVal]),
	      CaseDo = ed('CaseDo', 'TODO:DOC', ['opCased', _Op(Assign), 'parts', [CaseDoPart], 'opElse', _Op(BlockDo)]),
	     
	// Unlike CaseDo, this has `return` statements.
	CaseVal = ev('CaseVal', 'TODO:DOC', ['opCased', _Op(Assign), 'parts', [CaseValPart], 'opElse', _Op(BlockVal)]),
	     

	// Statements
	Loop = ed('Loop', 'TODO:DOC', ['block', BlockDo]),
	      EndLoop = ed('EndLoop', 'TODO:DOC', []),
	     

	// Generators
	Yield = ev('Yield', 'TODO:DOC', ['yielded', Val]),
	      YieldTo = ev('YieldTo', 'TODO:DOC', ['yieldedTo', Val]),
	     

	// Expressions
	Splat = ee('Splat', 'TODO:DOC', ['splatted', Val]),
	      Call = ev('Call', 'TODO:DOC', ['called', Val, 'args', [_tuplDistType.Union(Val, Splat)]], {}, {
		contains: function (loc, testType, tested) {
			return Call(loc, Special.contains(loc), [testType, tested]);
		},
		sub: function (loc, args) {
			return Call(loc, Special.sub(loc), args);
		}
	}),
	      BlockWrap = ev('BlockWrap', 'TODO:DOC', ['block', BlockVal]),
	      Fun = ev('Fun', 'TODO:DOC', ['isGenerator', Boolean, 'args', [LocalDeclare], 'opRestArg', _Op(LocalDeclare),
	// BlockDo or BlockVal
	'block', Expression, 'opIn', _Op(Debug),
	// If non-empty, block should be a BlockVal,
	// and either it has a type or opOut is non-empty.
	'opResDeclare', _Op(LocalDeclareRes), 'opOut', _Op(Debug)]),
	      Lazy = ev('Lazy', 'TODO:DOC', ['value', Val]),
	      NumberLiteral = ev('NumberLiteral', 'TODO:DOC', ['value', Number]),
	      Member = ev('Member', 'TODO:DOC', ['object', Val, 'name', String]),
	     
	// parts are Strings interleaved with Vals.
	Quote = ev('Quote', 'TODO:DOC', ['parts', [Object]], {}, {
		forString: function (loc, str) {
			return Quote(loc, [str]);
		}
	}),
	      SP_Contains = 0,
	      SP_Debugger = 1,
	      SP_Sub = 2,
	      SP_This = 3,
	      SP_ThisModuleDirectory = 4,
	     
	// k is a SP_***
	Special = ev('Special', 'TODO:DOC', ['kind', Number], {}, {
		contains: function (loc) {
			return Special(loc, SP_Contains);
		},
		debugger: function (loc) {
			return Special(loc, SP_Debugger);
		},
		sub: function (loc) {
			return Special(loc, SP_Sub);
		}
	});
	exports.Debug = Debug;
	exports.BlockDo = BlockDo;
	exports.BlockVal = BlockVal;
	exports.ModuleDefaultExport = ModuleDefaultExport;
	exports.LocalDeclare = LocalDeclare;
	exports.LocalDeclareRes = LocalDeclareRes;
	exports.Assign = Assign;
	exports.AssignDestructure = AssignDestructure;
	exports.LocalAccess = LocalAccess;
	exports.GlobalAccess = GlobalAccess;
	exports.UseDo = UseDo;
	exports.Use = Use;
	exports.Module = Module;
	exports.ListEntry = ListEntry;
	exports.ListReturn = ListReturn;
	exports.ListSimple = ListSimple;
	exports.MapEntry = MapEntry;
	exports.MapReturn = MapReturn;
	exports.ObjReturn = ObjReturn;
	exports.ObjPair = ObjPair;
	exports.ObjSimple = ObjSimple;
	exports.Pattern = Pattern;
	exports.CaseDoPart = CaseDoPart;
	exports.CaseValPart = CaseValPart;
	exports.CaseDo = CaseDo;
	exports.CaseVal = CaseVal;
	exports.Loop = Loop;
	exports.EndLoop = EndLoop;
	exports.Yield = Yield;
	exports.YieldTo = YieldTo;
	exports.Splat = Splat;
	exports.Call = Call;
	exports.BlockWrap = BlockWrap;
	exports.Fun = Fun;
	exports.Lazy = Lazy;
	exports.NumberLiteral = NumberLiteral;
	exports.Member = Member;
	exports.Quote = Quote;
	exports.SP_Contains = SP_Contains;
	exports.SP_Debugger = SP_Debugger;
	exports.SP_Sub = SP_Sub;
	exports.SP_This = SP_This;
	exports.SP_ThisModuleDirectory = SP_ThisModuleDirectory;
	exports.Special = Special;
});
//# sourceMappingURL=data:application/json;base64,