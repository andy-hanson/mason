{"version":3,"sources":["meta/compile/private/Vr.js"],"names":[],"mappings":";;;;;;;;;KAAO,UAAU;;KAAI,SAAS,eAAT,SAAS;KAAE,OAAO,eAAP,OAAO;KAAE,WAAW,eAAX,WAAW;KAC3C,OAAO,SAAP,OAAO;;KACT,IAAI;;KACF,MAAM,UAAN,MAAM;KACN,OAAO,WAAP,OAAO;;AAEhB,OAAM,EAAE,GAAG,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE;AAChC,eAAa,EAAE,GAAG;;AAElB,aAAW,EAAE,GAAG;AAChB,kBAAgB,EAAE,GAAG;AACrB,eAAa,EAAE,GAAG;EAClB,CAAC,CAAA;mBACa,EAAE;AAEV,OAAM,OAAO,GAAG;SAAM,EAAE,CAAC;AAC/B,gBAAa,EAAE,IAAI,GAAG,EAAE;AACxB,cAAW,EAAE,IAAI,GAAG,EAAE;AACtB,mBAAgB,EAAE,IAAI,GAAG,EAAE;AAC3B,gBAAa,EAAE,IAAI,GAAG,EAAE;GACxB,CAAC;EAAA,CAAA;;SALW,OAAO,GAAP,OAAO;AAOb,OAAM,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,MAAM,EAAE;AACvD,WAAS,EAAE,OAAO;AAClB,eAAa,EAAE,CAAC,WAAW,CAAC;AAC5B,kBAAgB,EAAE,CAAC,WAAW,CAAC;EAC/B,CAAC,CAAA;;SAJW,WAAW,GAAX,WAAW;AAMxB,OAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE;AAC3B,mBAAiB,EAAA,UAAC,CAAC,EAAE,EAAE,EAAE;AACxB,OAAI,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,OAAO,CAAC,CAAA;AAChC,SAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAA;AAClC,OAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;GAChC;AACD,gBAAc,EAAA,UAAC,CAAC,EAAE;AACjB,SAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAA;AAClC,SAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;AACpC,UAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;GACnC;AACD,YAAU,EAAA,UAAC,KAAK,EAAE;AACjB,SAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AACxC,UAAO,EAAE,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA,AAAC,CAAA;GACvE;EACD,CAAC,CAAA;;AAEF,OAAM,uBAAuB,GAAG,UAAA,CAAC;SAChC,CAAC,YAAY,OAAO,IAAI,CAAC,YAAY,SAAS;EAAA,CAAA","file":"meta/compile/private/Vr.js","sourcesContent":["import Expression, { BlockWrap, CaseVal, LocalAccess } from '../Expression'\nimport { isEmpty } from './U/Bag'\nimport type from './U/type'\nimport { assert } from './U/util'\nimport { ObjType } from './U/types'\n\nconst Vr = ObjType('Vr', Object, {\n\taccessToLocal: Map,\n\t// LocalDeclare -> VrLocalInfo\n\tlocalToInfo: Map,\n\teToIsInGenerator: Map,\n\tendLoopToLoop: Map\n})\nexport default Vr\n\nexport const emptyVr = () => Vr({\n\taccessToLocal: new Map(),\n\tlocalToInfo: new Map(),\n\teToIsInGenerator: new Map(),\n\tendLoopToLoop: new Map()\n})\n\nexport const VrLocalInfo = ObjType('LocalInfo', Object, {\n\tisInDebug: Boolean,\n\tdebugAccesses: [LocalAccess],\n\tnonDebugAccesses: [LocalAccess]\n})\n\nObject.assign(Vr.prototype, {\n\tsetEIsInGenerator(e, is) {\n\t\ttype(e, Expression, is, Boolean)\n\t\tassert(botherWithIsInGenerator(e))\n\t\tthis.eToIsInGenerator.set(e, is)\n\t},\n\teIsInGenerator(e) {\n\t\tassert(botherWithIsInGenerator(e))\n\t\tassert(this.eToIsInGenerator.has(e))\n\t\treturn this.eToIsInGenerator.get(e)\n\t},\n\tisAccessed(local) {\n\t\tconst info = this.localToInfo.get(local)\n\t\treturn !(isEmpty(info.debugAccesses) && isEmpty(info.nonDebugAccesses))\n\t}\n})\n\nconst botherWithIsInGenerator = e =>\n\te instanceof CaseVal || e instanceof BlockWrap\n"],"sourceRoot":"/src"}