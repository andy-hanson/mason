{"version":3,"sources":["meta/compile/private/parse/vars.js"],"names":[],"mappings":";;;;;;;;;;;;;AAGO,KACN,EAAE,EAAE,MAAM,EAAE,GAAG,CAAA;;SAAf,EAAE,GAAF,EAAE;SAAE,MAAM,GAAN,MAAM;SAAE,GAAG,GAAH,GAAG;AAET,OACN,IAAI,GAAG,UAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAK;AAC9B,UAJD,EAAE,GAID,EAAE,GAAG,GAAG,CAAA;AACR,UALG,MAAM,GAKT,MAAM,GAAG,OAAO,CAAA;AAChB,UANW,GAAG,GAMd,GAAG,GAAG,IAAI,CAAA;EACV;OAED,MAAM,GAAG,YAAM;AAAE,UATjB,EAAE,GASe,EAAE,WATf,MAAM,GASY,MAAM,WAThB,GAAG,GASgB,GAAG,GAAG,SAAS,CAAA;EAAE;OAEhD,KAAK,GAAG,UAAC,IAAI,EAAE,OAAO;SACrB,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC;EAAA;OAE7B,UAAU,GAAG,UAAC,MAAM,EAAE,OAAO;SAC5B,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE;UAAM,aAAa,CAAC,MAAM,CAAC;GAAA,EAAE,OAAO,CAAC;EAAA;OAEjE,CAAC,GAAG,UAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAK;AAChC,QAAM,CAAC,GAAG,MAAM,CAAA;AAChB,UAnBG,MAAM,GAmBT,MAAM,GAAG,OAAO,CAAA;AAChB,QAAM,CAAC,GAAG,GAAG,CAAA;AACb,UArBW,GAAG,GAqBd,GAAG,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;AACpD,QAAM,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;AAC1B,UAvBG,MAAM,GAuBT,MAAM,GAAG,CAAC,CAAA;AACV,UAxBW,GAAG,GAwBd,GAAG,GAAG,CAAC,CAAA;AACP,SAAO,GAAG,CAAA;EACV;OAED,EAAE,GAAG,UAAC,CAAC,EAAE,GAAG,EAAE,GAAG;SAAK,CAAC,CAAC,WAAU,CAAE,CAAC,CAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;EAAA,CAAA;;SAzBnD,IAAI,GAAJ,IAAI;SAMJ,MAAM,GAAN,MAAM;SAEN,KAAK,GAAL,KAAK;SAGL,UAAU,GAAV,UAAU;SAGV,CAAC,GAAD,CAAC;SAWD,EAAE,GAAF,EAAE;AAEH,OAAM,aAAa,GAAG,UAAA,EAAE;SAAI,KAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;EAAA,CAAA","file":"meta/compile/private/parse/vars.js","sourcesContent":["import Loc from 'esast/dist/Loc'\nimport Slice from '../U/Slice'\n\nexport let\n\tcx, tokens, loc\n\nexport const\n\tinit = (_cx, _tokens, _loc) => {\n\t\tcx = _cx\n\t\ttokens = _tokens\n\t\tloc = _loc\n\t},\n\n\tuninit = () => { cx = tokens = loc = undefined },\n\n\tcheck = (cond, message) =>\n\t\tcx.check(cond, loc, message),\n\n\tcheckEmpty = (tokens, message) =>\n\t\tcx.check(tokens.isEmpty(), () => locFromTokens(tokens), message),\n\n\tw = (_tokens, fun, arg, arg2) => {\n\t\tconst t = tokens\n\t\ttokens = _tokens\n\t\tconst l = loc\n\t\tloc = tokens.isEmpty() ? loc : locFromTokens(tokens)\n\t\tconst res = fun(arg, arg2)\n\t\ttokens = t\n\t\tloc = l\n\t\treturn res\n\t},\n\n\twt = (t, fun, arg) => w(new Slice([ t ]), fun, arg)\n\nconst locFromTokens = ts => Loc(ts.head().loc.start, ts.last().loc.end)\n"],"sourceRoot":"/src"}