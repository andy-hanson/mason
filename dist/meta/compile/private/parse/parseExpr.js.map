{"version":3,"sources":["meta/compile/private/parse/parseExpr.js"],"names":[],"mappings":"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","file":"meta/compile/private/parse/parseExpr.js","sourcesContent":["import { Call, GlobalAccess, ObjSimple, Yield, YieldTo } from '../../Expression'\nimport { Keyword } from '../Token'\nimport type from '../U/type'\nimport { assert } from '../U/util'\nimport { ifElse } from '../U/Op'\nimport { head, isEmpty, last, push, tail } from '../U/Bag'\nimport parseFun from './parseFun'\nimport { parseLocalDeclare } from './parseLocalDeclares'\nimport parseSingle from './parseSingle'\nimport Px from './Px'\n// TODO:ES6\nimport * as PC from './parseCase'\n\nexport default function parseExpr(px) {\n\treturn ifElse(px.tokens.opSplitManyWhere(Keyword.isObjAssign),\n\t\tsplits => {\n\t\t\t// Short object form, such as (a. 1, b. 2)\n\t\t\tconst first = splits[0].before\n\t\t\tconst tokensCaller = first.rtail()\n\n\t\t\tconst keysVals = {}\n\t\t\tfor (let i = 0; i < splits.length - 1; i = i + 1) {\n\t\t\t\tconst local = px.wt(splits[i].before.last(), parseLocalDeclare)\n\t\t\t\t// Can't have got a type because there's only one token.\n\t\t\t\tassert(isEmpty(local.opType))\n\t\t\t\tconst tokensValue = i === splits.length - 2 ?\n\t\t\t\t\tsplits[i + 1].before :\n\t\t\t\t\tsplits[i + 1].before.rtail()\n\t\t\t\tconst value = px.w(tokensValue, parseExprPlain)\n\t\t\t\tpx.check(!Object.prototype.hasOwnProperty.call(keysVals, local.name),\n\t\t\t\t\tlocal.loc, () => `Duplicate property ${local}.`)\n\t\t\t\tObject.defineProperty(keysVals, local.name, { value })\n\t\t\t}\n\t\t\tassert(last(splits).at === undefined)\n\t\t\tconst val = ObjSimple(px.loc, keysVals)\n\t\t\tif (tokensCaller.isEmpty())\n\t\t\t\treturn val\n\t\t\telse {\n\t\t\t\tconst parts = px.w(tokensCaller, parseExprParts)\n\t\t\t\tassert(!isEmpty(parts))\n\t\t\t\treturn Call(px.loc, head(parts), push(tail(parts), val))\n\t\t\t}\n\t\t},\n\t\t() => parseExprPlain(px)\n\t)\n}\n\nfunction parseExprPlain(px) {\n\ttype(px, Px)\n\tconst parts = parseExprParts(px)\n\tswitch (parts.length) {\n\t\tcase 0:\n\t\t\treturn GlobalAccess.null(px.loc)\n\t\tcase 1:\n\t\t\treturn head(parts)\n\t\tdefault:\n\t\t\treturn Call(px.loc, head(parts), tail(parts))\n\t}\n}\n\nexport function parseExprParts(px) {\n\tconst out = []\n\tconst end = px.tokens.end\n\tfor (let i = px.tokens.start; i < end; i = i + 1) {\n\t\tconst here = px.tokens.data[i]\n\t\tif (here instanceof Keyword) {\n\t\t\tconst rest = () => px.tokens._new(i + 1, end)\n\t\t\tswitch (here.k) {\n\t\t\t\tcase '|': case '~|':\n\t\t\t\t\treturn push(out, px.w(rest(), parseFun, here.k))\n\t\t\t\tcase 'case':\n\t\t\t\t\treturn push(out, px.w(rest(), PC.parseCase, 'case', false))\n\t\t\t\tcase '<~':\n\t\t\t\t\treturn push(out, Yield(px.loc, px.w(rest(), parseExpr)))\n\t\t\t\tcase '<~~':\n\t\t\t\t\treturn push(out, YieldTo(px.loc, px.w(rest(), parseExpr)))\n\t\t\t\tdefault:\n\t\t\t\t\t// fallthrough\n\t\t\t}\n\t\t}\n\t\tout.push(px.wt(here, parseSingle))\n\t}\n\treturn out\n}\n"],"sourceRoot":"/src"}