{"version":3,"sources":["meta/compile/private/parse/parseLocalDeclares.js"],"names":[],"mappings":";;;;;SAWgB,iBAAiB,GAAjB,iBAAiB;;;;KAXxB,IAAI,iBAAJ,IAAI;KACJ,YAAY,eAAZ,YAAY;KACZ,SAAS,SAAT,SAAS;KACT,KAAK,UAAL,KAAK;KAAE,OAAO,UAAP,OAAO;KAAE,IAAI,UAAJ,IAAI;KACpB,IAAI,QAAJ,IAAI;KAAE,IAAI,QAAJ,IAAI;;KACZ,IAAI;;KACF,MAAM,UAAN,MAAM;KACN,WAAW,gBAAX,WAAW;;mBAEL,UAAA,EAAE;SAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC;UAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,iBAAiB,CAAC;GAAA,CAAC;EAAA;;AAE7D,UAAS,iBAAiB,CAAC,EAAE,EAAE;AACrC,MAAI,IAAI,CAAA;AACR,MAAI,MAAM,GAAG,IAAI,CAAA;AACjB,MAAI,MAAM,GAAG,KAAK,CAAA;;AAElB,QAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;AAC9B,QAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAA;;AAE1B,MAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;AACtB,SAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAA;AACvB,OAAI,IAAI,GAAG,MAAM,CAAA;AACjB,OAAI,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE;AACnC,UAAM,GAAG,IAAI,CAAA;AACb,QAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAA;IACpB;AACD,OAAI,GAAG,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;AACtC,SAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA;AACzB,OAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;AACrB,UAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAA;AAC1B,MAAE,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,EAAE;0BAAkB,IAAI,CAAC,GAAG,CAAC;KAAE,CAAC,CAAA;AAC1E,MAAE,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;0CAAkC,KAAK;KAAE,CAAC,CAAA;AACrE,UAAM,UAAU,GAAG,KAAK,CAAC,IAAI,EAAE,CAAA;AAC/B,UAAM,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAA;IAC5C;GACD,MAEA,IAAI,GAAG,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;;AAE7B,SAAO,YAAY,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;EACxD;;AAED,OAAM,cAAc,GAAG,UAAC,EAAE,EAAE,CAAC,EAAK;AACjC,MAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EACrB,OAAO,GAAG,CAAA,KACN;AACJ,KAAE,CAAC,KAAK,CAAC,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE;2CAAoC,CAAC;IAAE,CAAC,CAAA;;AAE3E,KAAE,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE;sCAA+B,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAAE,CAAC,CAAA;AACtF,UAAO,CAAC,CAAC,IAAI,CAAA;GACb;EACD,CAAA","file":"meta/compile/private/parse/parseLocalDeclares.js","sourcesContent":["import { code } from '../../CompileError'\nimport { LocalDeclare } from '../../Expression'\nimport { JsGlobals } from '../Lang'\nimport { Group, Keyword, Name } from '../Token'\nimport { None, some } from '../U/Op'\nimport type from '../U/type'\nimport { assert } from '../U/util'\nimport { parseSpaced } from './parseSpaced'\n\nexport default px => px.tokens.map(t => px.wt(t, parseLocalDeclare))\n\nexport function parseLocalDeclare(px) {\n\tlet name\n\tlet opType = None\n\tlet isLazy = false\n\n\tassert(px.tokens.size() === 1)\n\tconst t = px.tokens.head()\n\n\tif (Group.isSpaced(t)) {\n\t\tconst tokens = t.tokens\n\t\tlet rest = tokens\n\t\tif (Keyword.isTilde(tokens.head())) {\n\t\t\tisLazy = true\n\t\t\trest = tokens.tail()\n\t\t}\n\t\tname = parseLocalName(px, rest.head())\n\t\tconst rest2 = rest.tail()\n\t\tif (!rest2.isEmpty()) {\n\t\t\tconst colon = rest2.head()\n\t\t\tpx.check(Keyword.isColon(colon), colon.loc, () => `Expected ${code(':')}`)\n\t\t\tpx.check(rest2.size() > 1, () => `Expected something after ${colon}`)\n\t\t\tconst tokensType = rest2.tail()\n\t\t\topType = some(px.w(tokensType, parseSpaced))\n\t\t}\n\t}\n\telse\n\t\tname = parseLocalName(px, t)\n\n\treturn LocalDeclare(px.loc, name, opType, isLazy, false)\n}\n\nconst parseLocalName = (px, t) => {\n\tif (Keyword.isFocus(t))\n\t\treturn '_'\n\telse {\n\t\tpx.check(t instanceof Name, t.loc, () => `Expected a local name, not ${t}`)\n\t\t// TODO: Allow this?\n\t\tpx.check(!JsGlobals.has(t.name), t.loc, () => `Can not shadow global ${code(t.name)}`)\n\t\treturn t.name\n\t}\n}\n"],"sourceRoot":"/src"}