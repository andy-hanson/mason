{"version":3,"sources":["meta/compile/private/parse/parse.js"],"names":[],"mappings":";;;;;kBAOwB,KAAK;;;;;;AAAd,UAAS,KAAK,CAAC,EAAE,EAAE,SAAS,EAAE;AAC5C,SANQ,MAAM,CAMP,OAPC,KAAK,CAOA,OAAO,CAAC,SAAS,CAAC,CAAC,CAAA;AAChC,QAAM,EAAE,GAAG,SAAO,EAAE,EAAE,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,CAAC,CAAA;AACtD,SAAO,WAAW,CAAC,EAAE,CAAC,CAAA;EACtB;;AAED,UAAS,WAAW,CAAC,EAAE,EAAE;qBACO,cAAY,EAAE,EAAE,MAAM,CAAC;;QAAxC,MAAM,gBAAZ,IAAI;QAAU,IAAI,gBAAJ,IAAI;;cACe,EAAE,CAAC,CAAC,CAAC,IAAI,iBAAe,KAAK,CAAC;;QAAzD,SAAS,SAAf,IAAI;QAAmB,KAAK,SAAX,IAAI;;eACW,EAAE,CAAC,CAAC,CAAC,KAAK,iBAAe,MAAM,CAAC;;QAA1D,QAAQ,UAAd,IAAI;QAAkB,KAAK,UAAX,IAAI;;eACa,EAAE,CAAC,CAAC,CAAC,KAAK,iBAAe,WAAW,CAAC;;QAAhE,SAAS,UAAf,IAAI;QAAmB,KAAK,UAAX,IAAI;;AAC7B,QAAM,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,KAAK,cAfhB,eAAe,CAemB,CAAA;;AAE1C,OAAK,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AAC3B,OAAI,IAAI,wBArBD,MAAM,AAqBa,IAAI,IAAI,CAAC,CAAC,KAAK,QAAQ,EAChD,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,aAAa,EAC5C,4CAA4C,CAAC,CAAA;GAC/C,CAAC,CAAA;AACF,MAAI,EAAE,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,EAChC,KAAK,CAAC,KAAK,CAAC,IAAI,CACf,YA3BM,MAAM,CA4BX,EAAE,CAAC,GAAG,EACN,YA7BuB,YAAY,CA6BtB,EAAE,CAAC,GAAG,EAAE,aAAa,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,EACpD,QAAQ,EACR,YA/Ba,QAAQ,CA+BZ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAA;;AAErD,QAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;AACvC,SAAO,YAlCiC,MAAM,CAkChC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAA;EACrD","file":"meta/compile/private/parse/parse.js","sourcesContent":["import { Assign, ELiteral, LocalDeclare, Module } from '../../Expression'\nimport { Group } from '../Token'\nimport { assert } from '../U/util'\nimport { parseModuleBody } from './parseBlock'\nimport tryParseUse from './parseUse'\nimport Px from './Px'\n\nexport default function parse(cx, rootToken) {\n\tassert(Group.isBlock(rootToken))\n\tconst px = new Px(cx, rootToken.tokens, rootToken.loc)\n\treturn parseModule(px)\n}\n\nfunction parseModule(px) {\n\tconst { uses: doUses, rest } = tryParseUse(px, 'use!')\n\tconst { uses: plainUses, rest: rest1 } = px.w(rest, tryParseUse, 'use')\n\tconst { uses: lazyUses, rest: rest2 } = px.w(rest1, tryParseUse, 'use~')\n\tconst { uses: debugUses, rest: rest3 } = px.w(rest2, tryParseUse, 'use-debug')\n\tconst block = px.w(rest3, parseModuleBody)\n\n\tblock.lines.forEach(line => {\n\t\tif (line instanceof Assign && line.k === 'export')\n\t\t\tpx.check(line.assignee.name !== 'displayName',\n\t\t\t\t'Module can not choose its own displayName.')\n\t})\n\tif (px.opts().moduleDisplayName())\n\t\tblock.lines.push(\n\t\t\tAssign(\n\t\t\t\tpx.loc,\n\t\t\t\tLocalDeclare(px.loc, 'displayName', [], false, true),\n\t\t\t\t'export',\n\t\t\t\tELiteral(px.loc, px.opts().moduleName(), String)))\n\n\tconst uses = plainUses.concat(lazyUses)\n\treturn Module(px.loc, doUses, uses, debugUses, block)\n}\n"],"sourceRoot":"/src"}