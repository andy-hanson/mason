{"version":3,"sources":["meta/compile/private/parse/parse.js"],"names":[],"mappings":";;;;;kBAOwB,KAAK;;;;AAAd,UAAS,KAAK,CAAC,EAAE,EAAE,SAAS,EAAE;AAC5C,SANQ,MAAM,CAMP,OAPC,KAAK,CAOA,OAAO,CAAC,SAAS,CAAC,CAAC,CAAA;AAChC,QAJQ,IAAI,CAIP,EAAE,EAAE,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,CAAC,CAAA;AACzC,QAAM,GAAG,GAAG,WAAW,EAAE,CAAA;AACzB,QANc,MAAM,EAMZ,CAAA;AACR,SAAO,GAAG,CAAA;EACV;;AAED,OAAM,WAAW,GAAG,YAAM;qBACM,cAAY,MAAM,CAAC;;QAApC,MAAM,gBAAZ,IAAI;QAAU,IAAI,gBAAJ,IAAI;;WACe,MAZR,CAAC,CAYS,IAAI,iBAAe,KAAK,CAAC;;QAAtD,SAAS,MAAf,IAAI;QAAmB,KAAK,MAAX,IAAI;;YACW,MAbP,CAAC,CAaQ,KAAK,iBAAe,MAAM,CAAC;;QAAvD,QAAQ,OAAd,IAAI;QAAkB,KAAK,OAAX,IAAI;;YACa,MAdR,CAAC,CAcS,KAAK,iBAAe,WAAW,CAAC;;QAA7D,SAAS,OAAf,IAAI;QAAmB,KAAK,OAAX,IAAI;;AAC7B,QAAM,KAAK,GAAG,MAfmB,CAAC,CAelB,KAAK,cAjBb,eAAe,CAiBgB,CAAA;;AAEvC,OAAK,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AAC3B,OAAI,IAAI,wBAvBD,MAAM,AAuBa,IAAI,IAAI,CAAC,CAAC,KAAK,QAAQ,EAChD,MAnBoB,KAAK,CAmBnB,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,aAAa,EACzC,4CAA4C,CAAC,CAAA;GAC/C,CAAC,CAAA;AACF,MAAI,MAtByB,EAAE,CAsBxB,IAAI,CAAC,iBAAiB,EAAE,EAC9B,KAAK,CAAC,KAAK,CAAC,IAAI,CACf,YA7BM,MAAM,OAKsB,GAAG,EA0BpC,YA/BuB,YAAY,OAKF,GAAG,EA0BlB,aAAa,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,EACjD,QAAQ,EACR,YAjCa,QAAQ,OAKY,GAAG,EA4BtB,MA5BY,EAAE,CA4BX,IAAI,CAAC,UAAU,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAA;;AAEhD,QAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;AACvC,SAAO,YApCiC,MAAM,OAKV,GAAG,EA+BpB,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAA;EAClD,CAAA","file":"meta/compile/private/parse/parse.js","sourcesContent":["import { Assign, ELiteral, LocalDeclare, Module } from '../../Expression'\nimport { Group } from '../Token'\nimport { assert } from '../U/util'\nimport { parseModuleBody } from './parseBlock'\nimport tryParseUse from './parseUse'\nimport { init, uninit, check, cx, w, loc } from './vars'\n\nexport default function parse(cx, rootToken) {\n\tassert(Group.isBlock(rootToken))\n\tinit(cx, rootToken.tokens, rootToken.loc)\n\tconst res = parseModule()\n\tuninit()\n\treturn res\n}\n\nconst parseModule = () => {\n\tconst { uses: doUses, rest } = tryParseUse('use!')\n\tconst { uses: plainUses, rest: rest1 } = w(rest, tryParseUse, 'use')\n\tconst { uses: lazyUses, rest: rest2 } = w(rest1, tryParseUse, 'use~')\n\tconst { uses: debugUses, rest: rest3 } = w(rest2, tryParseUse, 'use-debug')\n\tconst block = w(rest3, parseModuleBody)\n\n\tblock.lines.forEach(line => {\n\t\tif (line instanceof Assign && line.k === 'export')\n\t\t\tcheck(line.assignee.name !== 'displayName',\n\t\t\t\t'Module can not choose its own displayName.')\n\t})\n\tif (cx.opts.moduleDisplayName())\n\t\tblock.lines.push(\n\t\t\tAssign(\n\t\t\t\tloc,\n\t\t\t\tLocalDeclare(loc, 'displayName', [], false, true),\n\t\t\t\t'export',\n\t\t\t\tELiteral(loc, cx.opts.moduleName(), String)))\n\n\tconst uses = plainUses.concat(lazyUses)\n\treturn Module(loc, doUses, uses, debugUses, block)\n}\n"],"sourceRoot":"/src"}