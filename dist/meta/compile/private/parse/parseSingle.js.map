{"version":3,"sources":["meta/compile/private/parse/parseSingle.js"],"names":[],"mappings":";;;kBAUwB,WAAW;;AAApB,UAAS,WAAW,GAAG;AACrC,QAAM,CAAC,GAAG,MAHO,MAAM,CAGN,IAAI,EAAE,CAAA;AACvB,SARQ,MAAM,CAQP,MAJU,MAAM,CAIT,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;AAC3B,UAAQ,IAAI;AACX,QAAK,CAAC,mBAZC,WAAW,AAYW;AAC5B,WAAO,YAfD,IAAI,OAQA,GAAG,EAOI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAE,YAdrC,WAAW,CAcsC,KAAK,OAP1C,GAAG,CAO4C,CAAE,CAAC,CAAA;AAAA,AAC7D,QAAK,CAAC,mBAduC,OAAO,AAc3B;AACxB,WAAO,YAjBiB,QAAQ,CAiBhB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AAAA,AACrC,QAAK,CAAC,mBAhBgD,IAAI,AAgBpC;AACrB,WAAO,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;AAAA,AACtB,QAAK,CAAC,mBAlB8B,OAAO,AAkBlB;AACxB,QAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EACd,OAAO,YArBV,WAAW,CAqBW,KAAK,OAdf,GAAG,CAciB,CAAA;AAC9B,QAAI,MApBa,eAAe,CAoBZ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAC3B,OAAO,YAvBU,OAAO,OAOf,GAAG,EAgBQ,CAAC,CAAC,CAAC,CAAC,CAAA;AAAA;AAE1B,QAAK,CAAC,mBAxBuB,KAAK,AAwBX;AACtB,YAAQ,CAAC,CAAC,CAAC;AACV,UAAK,IAAI;AAAE,aAAO,MApBI,CAAC,CAoBH,CAAC,CAAC,MAAM,eArBvB,WAAW,CAqB0B,CAAA;AAAA,AAC1C,UAAK,IAAI;AAAE,aAAO,MArBI,CAAC,CAqBH,CAAC,CAAC,MAAM,cAxBvB,SAAS,EAwB2B,KAAK,CAAC,CAAA;AAAA,AAC/C,UAAK,GAAG;AAAE,aAAO,YA7BP,KAAK,OAON,GAAG,EAsBgB,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,IAAI;cAAI,MAtBxB,EAAE,CAsByB,IAAI,EAAE,WAAW,CAAC;OAAA,CAAC,CAAC,CAAA;AAAA,AACxE,UAAK,GAAG;AAAE,aAAO,MAvBK,CAAC,CAuBJ,CAAC,CAAC,MAAM,aAzBtB,SAAS,CAyByB,CAAA;AAAA,AACvC,UAAK,GAAG;AAAE,aAAO,YAhCN,UAAU,OAQZ,GAAG,EAwBqB,MAxBX,CAAC,CAwBY,CAAC,CAAC,MAAM,aA1B3B,cAAc,CA0B8B,CAAC,CAAA;AAAA,AAC7D,aAAQ;;KAER;AAAA,AACF,QAAK,CAAC,mBAlCc,OAAO,AAkCF;AACxB,QAAI,CAAC,CAAC,KAAK,KAAK,CAAC,EAChB,OAAO,YArCmB,KAAK,OAOtB,GAAG,EA8BM,YArCrB,WAAW,OAOC,GAAG,EA8BuB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;AAAA;AAE7C;AACC,UAjCM,EAAE,CAiCL,IAAI,iBAAe,CAAC,CAAG,CAAA;AAAA,GAC3B;EACD;;AAED,OAAM,MAAM,GAAG,UAAA,IAAI;SAClB,MA3CQ,SAAS,CA2CP,GAAG,CAAC,IAAI,CAAC,GAAG,YA9Cc,YAAY,OAQpC,GAAG,EAsCyB,IAAI,CAAC,GAAG,YA7ChD,WAAW,OAOC,GAAG,EAsCkD,IAAI,CAAC;EAAA,CAAA","file":"meta/compile/private/parse/parseSingle.js","sourcesContent":["import { Call, ListSimple, ELiteral, GlobalAccess,\n\tLocalAccess, Quote, Special, Splat } from '../../Expression'\nimport { CallOnFocus, DotName, Group, Keyword, Literal, Name } from '../Token'\nimport { JsGlobals, SpecialKeywords } from '../Lang'\nimport { assert } from '../U/util'\nimport { blockWrap } from './parseBlock'\nimport { parseExpr, parseExprParts } from './parseExpr'\nimport { parseSpaced } from './parseSpaced'\nimport { cx, loc, tokens, w, wt } from './vars'\n\nexport default function parseSingle() {\n\tconst t = tokens.head()\n\tassert(tokens.size() === 1)\n\tswitch (true) {\n\t\tcase t instanceof CallOnFocus:\n\t\t\treturn Call(loc, access(t.name), [ LocalAccess.focus(loc) ])\n\t\tcase t instanceof Literal:\n\t\t\treturn ELiteral(t.loc, t.value, t.k)\n\t\tcase t instanceof Name:\n\t\t\treturn access(t.name)\n\t\tcase t instanceof Keyword:\n\t\t\tif (t.k === '_')\n\t\t\t\treturn LocalAccess.focus(loc)\n\t\t\tif (SpecialKeywords.has(t.k))\n\t\t\t\treturn Special(loc, t.k)\n\t\t\t// Else fallthrough to fail\n\t\tcase t instanceof Group:\n\t\t\tswitch (t.k) {\n\t\t\t\tcase 'sp': return w(t.tokens, parseSpaced)\n\t\t\t\tcase '->': return w(t.tokens, blockWrap, 'val')\n\t\t\t\tcase '\"': return Quote(loc, t.tokens.map(tSub => wt(tSub, parseSingle)))\n\t\t\t\tcase '(': return w(t.tokens, parseExpr)\n\t\t\t\tcase '[': return ListSimple(loc, w(t.tokens, parseExprParts))\n\t\t\t\tdefault:\n\t\t\t\t\t// fallthrough\n\t\t\t}\n\t\tcase t instanceof DotName:\n\t\t\tif (t.nDots === 3)\n\t\t\t\treturn Splat(loc, LocalAccess(loc, t.name))\n\t\t\t// Else fallthrough to fail\n\t\tdefault:\n\t\t\tcx.fail(`Unexpected ${t}`)\n\t}\n}\n\nconst access = name =>\n\tJsGlobals.has(name) ? GlobalAccess(loc, name) : LocalAccess(loc, name)\n"],"sourceRoot":"/src"}