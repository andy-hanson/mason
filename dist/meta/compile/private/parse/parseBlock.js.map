{"version":3,"sources":["meta/compile/private/parse/parseBlock.js"],"names":[],"mappings":"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","file":"meta/compile/private/parse/parseBlock.js","sourcesContent":["import { Assign, BlockDo, BlockVal, BlockWrap, Debug, ObjReturn, ListEntry, ListReturn, ELiteral,\n\tLocalDeclare, MapReturn, MapEntry, Module, ModuleDefaultExport, Val } from '../../Expression'\nimport { Group, Keyword } from '../Token'\nimport { cat, isEmpty, last, rtail } from '../U/Bag'\nimport { ifElse, None, some } from '../U/Op'\nimport type from '../U/type'\nimport { assert, lazy } from '../U/util'\nimport Px from './Px'\n// TODO:ES6\nimport * as PL from './parseLine'\nconst parseLine_ = () => PL.default\nconst parseLineOrLines_ = () => PL.parseLineOrLines\n\nexport const\n\ttakeBlockLinesFromEnd = px => {\n\t\ttype(px, Px)\n\t\tpx.check(!px.tokens.isEmpty(), 'Expected an indented block')\n\t\tconst l = px.tokens.last()\n\t\tpx.check(Group.isBlock(l), l.loc, 'Expected an indented block at the end')\n\t\treturn { before: px.tokens.rtail(), lines: l.tokens }\n\t},\n\n\tblockWrap = px => BlockWrap(px.loc, parseBody(px, 'val')),\n\n\tjustBlockDo = px => {\n\t\tconst { before, block } = takeBlockDoFromEnd(px)\n\t\tpx.check(before.isEmpty(), 'Expected just a block.')\n\t\treturn block\n\t},\n\tjustBlockVal = px => {\n\t\tconst { before, block } = takeBlockValFromEnd(px)\n\t\tpx.check(before.isEmpty(), 'Expected just a block.')\n\t\treturn block\n\t},\n\n\ttakeBlockDoFromEnd = px => {\n\t\tconst{ before, lines } = takeBlockLinesFromEnd(px)\n\t\tconst block = px.w(lines, parseBodyDo)\n\t\treturn { before, block }\n\t},\n\ttakeBlockValFromEnd = px => {\n\t\tconst { before, lines } = takeBlockLinesFromEnd(px)\n\t\tconst block = px.w(lines, parseBody, 'val')\n\t\treturn { before, block }\n\t},\n\n\t// TODO: Just have module return a value and use a normal block.\n\tparseModuleBody = px => parseBody(px, 'module'),\n\n\tparseBlockFromLines = px => parseBody(px, 'any'),\n\n\t// Gets lines in a region or Debug.\n\tparseLinesFromBlock = px => {\n\t\tconst h = px.tokens.head()\n\t\tpx.check(px.tokens.size() > 1, h.loc, () => `Expected indented block after ${h}`)\n\t\tconst block = px.tokens.second()\n\t\tassert(px.tokens.size() === 2 && Group.isBlock(block))\n\t\treturn block.tokens.flatMap(line => px.w(line.tokens, parseLineOrLines_()))\n\t}\n\nconst\n\tparseBodyDo = px => {\n\t\tconst { eLines, kReturn } = parseBlockLines(px)\n\t\tpx.check(kReturn === 'plain', `Can not make ${kReturn} in statement context.`)\n\t\treturn BlockDo(px.loc, eLines)\n\t},\n\n\tparseBody = (px, k) => {\n\t\tassert(k === 'val' || k === 'module' || k === 'any')\n\n\t\t// keys only matter if kReturn === 'obj'\n\t\tconst { eLines, kReturn, listLength, mapLength, objKeys, debugKeys } = parseBlockLines(px)\n\n\t\tconst { doLines, opReturn } = (() => {\n\t\t\tif (kReturn === 'bag')\n\t\t\t\treturn {\n\t\t\t\t\tdoLines: eLines,\n\t\t\t\t\topReturn: some(ListReturn(px.loc, listLength))\n\t\t\t\t}\n\t\t\tif (kReturn === 'map')\n\t\t\t\treturn {\n\t\t\t\t\tdoLines: eLines,\n\t\t\t\t\topReturn: some(MapReturn(px.loc, mapLength))\n\t\t\t\t}\n\n\t\t\tconst lastReturn = !isEmpty(eLines) && last(eLines) instanceof Val\n\t\t\tif (kReturn === 'obj' && k !== 'module')\n\t\t\t\treturn lastReturn ?\n\t\t\t\t\t{\n\t\t\t\t\t\tdoLines: rtail(eLines),\n\t\t\t\t\t\topReturn: some(ObjReturn(\n\t\t\t\t\t\t\tpx.loc,\n\t\t\t\t\t\t\tobjKeys,\n\t\t\t\t\t\t\tdebugKeys,\n\t\t\t\t\t\t\tsome(last(eLines)),\n\t\t\t\t\t\t\t// displayName is filled in by parseAssign.\n\t\t\t\t\t\t\tNone))\n\t\t\t\t\t} : {\n\t\t\t\t\t\tdoLines: eLines,\n\t\t\t\t\t\topReturn: some(ObjReturn(\n\t\t\t\t\t\t\tpx.loc,\n\t\t\t\t\t\t\tobjKeys,\n\t\t\t\t\t\t\tdebugKeys,\n\t\t\t\t\t\t\tNone,\n\t\t\t\t\t\t\t// displayName is filled in by parseAssign.\n\t\t\t\t\t\t\tNone))\n\t\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn lastReturn ?\n\t\t\t\t{ doLines: rtail(eLines), opReturn: some(last(eLines)) } :\n\t\t\t\t{ doLines: eLines, opReturn: None }\n\t\t})()\n\n\t\tswitch (k) {\n\t\t\tcase 'val':\n\t\t\t\treturn ifElse(opReturn,\n\t\t\t\t\treturned => BlockVal(px.loc, doLines, returned),\n\t\t\t\t\t() => px.fail('Expected a value block.'))\n\t\t\tcase 'any':\n\t\t\t\treturn ifElse(opReturn,\n\t\t\t\t\treturned => BlockVal(px.loc, doLines, returned),\n\t\t\t\t\t() => BlockDo(px.loc, doLines))\n\t\t\tcase 'module': {\n\t\t\t\t// TODO: Handle debug-only exports\n\t\t\t\tconst lines =\n\t\t\t\t\t// Turn Obj assigns into exports.\n\t\t\t\t\tcat(\n\t\t\t\t\t\tdoLines.map(line => {\n\t\t\t\t\t\t\tif (line instanceof Assign && line.k === '. ')\n\t\t\t\t\t\t\t\tline.k = 'export'\n\t\t\t\t\t\t\treturn line\n\t\t\t\t\t\t}),\n\t\t\t\t\t\topReturn.map(ret => ModuleDefaultExport(ret.loc, ret)))\n\t\t\t\treturn BlockDo(px.loc, lines)\n\t\t\t}\n\t\t\tdefault: throw new Error(k)\n\t\t}\n\t},\n\n\tparseBlockLines = px => {\n\t\tconst lines = px.tokens\n\t\tconst objKeys = [], debugKeys = []\n\t\tlet listLength = 0, mapLength = 0\n\t\tconst eLines = []\n\t\tconst addLine = (ln, inDebug) => {\n\t\t\tif (ln instanceof Array)\n\t\t\t\tln.forEach(_ => addLine(_, inDebug))\n\t\t\telse {\n\t\t\t\tif (ln instanceof Debug)\n\t\t\t\t\tln.lines.forEach(_ => addLine(_, true))\n\t\t\t\telse if (ln instanceof ListEntry) {\n\t\t\t\t\tassert(!inDebug, 'Not supported: debug list entries')\n\t\t\t\t\t// When ListEntries are first created they have no index.\n\t\t\t\t\tassert(ln.index === -1)\n\t\t\t\t\tln.index = listLength\n\t\t\t\t\tlistLength = listLength + 1\n\t\t\t\t}\n\t\t\t\telse if (ln instanceof MapEntry) {\n\t\t\t\t\tassert(!inDebug, 'Not supported: debug map entries')\n\t\t\t\t\tassert(ln.index === -1)\n\t\t\t\t\tln.index = mapLength\n\t\t\t\t\tmapLength = mapLength + 1\n\t\t\t\t}\n\t\t\t\telse if (ln instanceof Assign && ln.k === '. ')\n\t\t\t\t\t(inDebug ? debugKeys : objKeys).push(ln.assignee)\n\n\t\t\t\tif (!inDebug)\n\t\t\t\t\teLines.push(ln)\n\t\t\t\t// Else we are adding the Debug as a single line.\n\t\t\t}\n\t\t}\n\t\tlines.each(line => addLine(px.w(line.tokens, parseLine_(), listLength)))\n\n\t\tconst isObj = !(isEmpty(objKeys) && isEmpty(debugKeys))\n\t\t// TODO\n\t\t// if (isEmpty(objKeys))\n\t\t//\tpx.check(isEmpty(debugKeys), px.loc, 'Block can't have only debug keys')\n\t\tconst isBag = listLength > 0\n\t\tconst isMap = mapLength > 0\n\t\tpx.check(!(isObj && isBag), 'Block has both Bag and Obj lines.')\n\t\tpx.check(!(isObj && isMap), 'Block has both Obj and Map lines.')\n\t\tpx.check(!(isBag && isMap), 'Block has both Bag and Map lines.')\n\n\t\tconst kReturn = isObj ? 'obj' : isBag ? 'bag' : isMap ? 'map' : 'plain'\n\t\treturn { eLines, kReturn, listLength, mapLength, objKeys, debugKeys }\n\t}\n"],"sourceRoot":"/src"}