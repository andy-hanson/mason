{"version":3,"sources":["meta/compile/private/parse/parseLine.js"],"names":[],"mappings":"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","file":"meta/compile/private/parse/parseLine.js","sourcesContent":["import E, { Assign, AssignDestructure, BlockWrap, Call, Debug, GlobalAccess, ObjReturn,\n\tFun, EndLoop, ListEntry, Loop, MapEntry, Special, Yield, YieldTo } from '../../Expression'\nimport { defaultLoopName, LineSplitKeywords } from '../Lang'\nimport { Group, Keyword, Name } from '../Token'\nimport { head, isEmpty, last, opSplitOnceWhere } from '../U/Bag'\nimport { ifElse, some } from '../U/Op'\nimport type from '../U/type'\nimport { assert } from '../U/util'\nimport { parseCase } from './parseCase'\nimport parseExpr from './parseExpr'\nimport parseLocalDeclares from './parseLocalDeclares'\nimport Px from './Px'\n// TODO:ES6\nimport * as PB from './parseBlock'\n\n// Returns line or sq of lines\nexport default function parseLine(px) {\n\ttype(px, Px)\n\n\tconst h = px.tokens.head()\n\tconst rest = px.tokens.tail()\n\n\t// We only deal with mutable expressions here, otherwise we fall back to parseExpr.\n\tif (h instanceof Keyword)\n\t\tswitch (h.k) {\n\t\t\tcase '. ':\n\t\t\t\t// Index is set by parseBlock.\n\t\t\t\treturn ListEntry(px.loc, px.w(rest, parseExpr), -1)\n\t\t\tcase 'case!':\n\t\t\t\treturn px.w(rest, parseCase, 'case!', false)\n\t\t\tcase 'debug':\n\t\t\t\treturn Group.isBlock(px.tokens.second()) ?\n\t\t\t\t\t// `debug`, then indented block\n\t\t\t\t\tDebug(px.loc, PB.parseLinesFromBlock(px)) :\n\t\t\t\t\t// `debug`, then single line\n\t\t\t\t\tDebug(px.loc, px.w(rest, parseLineOrLines))\n\t\t\tcase 'debugger':\n\t\t\t\tpx.checkEmpty(rest, () => `Did not expect anything after ${h}`)\n\t\t\t\treturn Special.debugger(px.loc)\n\t\t\tcase 'end-loop!':\n\t\t\t\tpx.checkEmpty(rest, () => `Did not expect anything after ${h}`)\n\t\t\t\treturn EndLoop(px.loc)\n\t\t\tcase 'loop!':\n\t\t\t\treturn Loop(px.loc, px.w(rest, PB.justBlockDo))\n\t\t\tcase 'region':\n\t\t\t\treturn PB.parseLinesFromBlock(px)\n\t\t\tdefault:\n\t\t\t\t// fall through\n\t\t}\n\n\treturn ifElse(px.tokens.opSplitOnceWhere(Keyword.isLineSplit),\n\t\t({ before, at, after }) => {\n\t\t\treturn at.k === '->' ?\n\t\t\t\tparseMapEntry(px, before, after) :\n\t\t\t\tparseAssign(px, before, at, after)\n\t\t},\n\t\t() => parseExpr(px))\n}\n\nexport function parseLineOrLines(px) {\n\tconst _ = parseLine(px)\n\treturn _ instanceof Array ? _ : [ _ ]\n}\n\nfunction parseAssign(px, assigned, assigner, value) {\n\tlet locals = px.w(assigned, parseLocalDeclares)\n\tconst k = assigner.k\n\tconst eValuePre = value.isEmpty() ? GlobalAccess.true(px.loc) : px.w(value, parseExpr)\n\n\tlet eValueNamed\n\tif (locals.length === 1) {\n\t\tconst name = head(locals).name\n\t\tif (name === 'doc') {\n\t\t\tif (eValuePre instanceof Fun)\n\t\t\t\t// KLUDGE: `doc` for module can be a Fun signature.\n\t\t\t\t// TODO: Something better...\n\t\t\t\teValuePre.args.forEach(arg => { arg.okToNotUse = true })\n\t\t\teValueNamed = eValuePre\n\t\t}\n\t\telse\n\t\t\teValueNamed = tryAddDisplayName(eValuePre, name)\n\t}\n\telse\n\t\teValueNamed = eValuePre\n\n\tconst isYield = k === '<~' || k === '<~~'\n\n\tconst eValue = valueFromAssign(eValueNamed, k)\n\n\tif (isEmpty(locals)) {\n\t\tpx.check(isYield, 'Assignment to nothing')\n\t\treturn eValue\n\t}\n\n\tif (isYield)\n\t\tlocals.forEach(_ => px.check(_.k !== 'lazy', _.loc, 'Can not yield to lazy variable.'))\n\n\tif (k === '. ')\n\t\tlocals.forEach(l => { l.okToNotUse = true })\n\n\tif (locals.length === 1) {\n\t\tconst assign = Assign(px.loc, locals[0], k, eValue)\n\t\tconst isTest = assign.assignee.name.endsWith('test')\n\t\treturn isTest && k === '. ' ? Debug(px.loc, [ assign ]) : assign\n\t}\n\telse {\n\t\tconst isLazy = locals.some(l => l.isLazy)\n\t\tif (isLazy)\n\t\t\tlocals.forEach(_ => px.check(_.isLazy, _.loc,\n\t\t\t\t'If any part of destructuring assign is lazy, all must be.'))\n\t\treturn AssignDestructure(px.loc, locals, k, eValue, isLazy)\n\t}\n}\n\nfunction valueFromAssign(valuePre, kAssign) {\n\tswitch (kAssign) {\n\t\tcase '<~':\n\t\t\treturn Yield(valuePre.loc, valuePre)\n\t\tcase '<~~':\n\t\t\treturn YieldTo(valuePre.loc, valuePre)\n\t\tdefault:\n\t\t\treturn valuePre\n\t}\n}\n\n// We give it a displayName if:\n// . It's a block\n// . It's a function\n// . It's one of those at the end of a block\n// . It's one of those as the end member of a call.\nfunction tryAddDisplayName(eValuePre, displayName) {\n\ttype(eValuePre, E, displayName, String)\n\tswitch (true) {\n\t\tcase eValuePre instanceof Call && eValuePre.args.length > 0:\n\t\t\t// TODO: Immutable\n\t\t\teValuePre.args[eValuePre.args.length - 1] =\n\t\t\t\ttryAddDisplayName(last(eValuePre.args), displayName)\n\t\t\treturn eValuePre\n\n\t\tcase eValuePre instanceof Fun:\n\t\t\treturn ObjReturn(eValuePre.loc, [], [], some(eValuePre), some(displayName))\n\n\t\tcase eValuePre instanceof ObjReturn &&\n\t\t\t!eValuePre.keys.some(key => key.name === 'displayName'):\n\t\t\teValuePre.opDisplayName = some(displayName)\n\t\t\treturn eValuePre\n\n\t\tcase eValuePre instanceof BlockWrap: {\n\t\t\tconst block = eValuePre.block\n\t\t\tblock.returned = tryAddDisplayName(block.returned, displayName)\n\t\t\treturn eValuePre\n\t\t}\n\n\t\tdefault:\n\t\t\treturn eValuePre\n\t}\n}\n\nfunction parseMapEntry(px, before, after) {\n\t// TODO: index Filled in by ???\n\treturn MapEntry(px.loc, px.w(before, parseExpr), px.w(after, parseExpr), -1)\n}\n"],"sourceRoot":"/src"}