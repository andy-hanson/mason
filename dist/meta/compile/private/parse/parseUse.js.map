{"version":3,"sources":["meta/compile/private/parse/parseUse.js"],"names":[],"mappings":";;;;;kBAUwB,WAAW;;;;AAApB,UAAS,WAAW,CAAC,CAAC,EAAE;AACtC,MAAI,CAAC,MAHmB,MAAM,CAGlB,OAAO,EAAE,EAAE;AACtB,SAAM,EAAE,GAAG,MAJY,MAAM,CAIX,IAAI,EAAE,CAAA;AACxB,UARO,MAAM,CAQN,OAXS,KAAK,CAWR,MAAM,CAAC,EAAE,CAAC,CAAC,CAAA;AACxB,OAAI,OAZmB,OAAO,CAYlB,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAClC,OAAO;AACN,QAAI,EAAE,MARuB,CAAC,CAQtB,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;AACtC,QAAI,EAAE,MATe,MAAM,CASd,IAAI,EAAE;IACnB,CAAA;GACF;AACD,SAAO,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,QAZC,MAAM,AAYC,EAAE,CAAA;EACjC;;AAED,OACC,QAAQ,GAAG,UAAA,CAAC,EAAI;+BACW,YAnBnB,qBAAqB,EAmBqB;;QAAzC,MAAM,0BAAN,MAAM;QAAE,KAAK,0BAAL,KAAK;;AACrB,QAlBO,KAAK,CAkBN,MAAM,CAAC,OAAO,EAAE,EAAE;6CACU,cA3B3B,IAAI,CA2B4B,CAAC,CAAC;GAAqB,CAAC,CAAA;AAC/D,SAAO,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI;UAAI,MApBM,CAAC,CAoBL,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;GAAA,CAAC,CAAA;EACpD;;;;AAGD,QAAO,GAAG,UAAA,CAAC,EAAI;AACd,QAAM,IAAI,GAAG,MAzBU,MAAM,CAyBT,IAAI,EAAE,CAAA;;YACH,MA1BW,EAAE,CA0BV,IAAI,EAAE,YAAY,CAAC;;QAArC,IAAI,OAAJ,IAAI;QAAE,IAAI,OAAJ,IAAI;;AAElB,MAAI,CAAC,KAAK,MAAM,EAAE;AACjB,SA7BM,KAAK,CA6BL,MA7BgB,MAAM,CA6Bf,IAAI,EAAE,KAAK,CAAC,EAAE;2BAAoB,MA7BzB,MAAM,CA6B0B,CAAC,CAAC;IAAE,CAAC,CAAA;AAC3D,UAAO,YArCkB,KAAK,OAOb,GAAG,EA8BF,IAAI,CAAC,CAAA;GACvB,MAAM;AACN,SAAM,MAAM,GAAG,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,WAAW,CAAA;;YACjB,MAjCD,CAAC,CAiCE,MAjCX,MAAM,CAiCY,IAAI,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC;;SAAtE,IAAI,MAAJ,IAAI;SAAE,YAAY,MAAZ,YAAY;;AAC1B,UAAO,YAzCa,GAAG,OAON,GAAG,EAkCJ,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,CAAA;GACzC;EACD;OAED,eAAe,GAAG,UAAC,IAAI,EAAE,MAAM,EAAK;AACnC,QAAM,UAAU,GAAG;UAAM,YA9ClB,YAAY,OAOD,GAAG,EAuCsB,IAAI,OA3CxC,IAAI,EA2C4C,MAAM,EAAE,KAAK,CAAC;GAAA,CAAA;AACrE,MAAI,MAxCmB,MAAM,CAwClB,OAAO,EAAE,EACnB,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,YAAY,EAAE,KA7Cf,IAAI,CA6CgB,UAAU,EAAE,CAAC,EAAE,CAAA,KACjD;AACJ,SAAM,aAAa,GAAG,OAjDA,OAAO,CAiDC,OAAO,CAAC,MA3ChB,MAAM,CA2CiB,IAAI,EAAE,CAAC,CAAA;AACpD,SAAM,YAAY,GAAG,KAhDT,IAAI,CAgDU,aAAa,EAAE,UAAU,CAAC,CAAA;AACpD,SAAM,IAAI,GAAG,aAAa,GAAG,MA7CP,MAAM,CA6CQ,IAAI,EAAE,SA7CpB,MAAM,AA6CuB,CAAA;AACnD,SAAM,IAAI,GAAG,MA9CiB,CAAC,CA8ChB,IAAI,uBAAqB,CAAC,GAAG,CAAC,UAAA,CAAC,EAAI;AACjD,UA/CK,KAAK,CA+CJ,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;iBAAS,cAvD1B,IAAI,CAuD2B,GAAG,CAAC;KAA8B,CAAC,CAAA;AACvE,KAAC,CAAC,MAAM,GAAG,MAAM,CAAA;AACjB,WAAO,CAAC,CAAA;IACR,CAAC,CAAA;AACF,UAAO,EAAE,IAAI,EAAJ,IAAI,EAAE,YAAY,EAAZ,YAAY,EAAE,CAAA;GAC7B;EACD;OAED,YAAY,GAAG,YAAM;AACpB,SA3DO,MAAM,CA2DN,MAxDgB,MAAM,CAwDf,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;AAC3B,QAAM,CAAC,GAAG,MAzDa,MAAM,CAyDZ,IAAI,EAAE,CAAA;AACvB,MAAI,CAAC,mBAhE2B,IAAI,AAgEf,EACpB,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAA,KACjC,IAAI,CAAC,mBAlEH,OAAO,AAkEe,EAC5B,OAAO,iBAAiB,EAAE,CAAA,KACtB;AACJ,SA/DM,KAAK,CA+DL,OArES,KAAK,CAqER,QAAQ,CAAC,CAAC,CAAC,EAAE,0BAA0B,CAAC,CAAA;AACpD,UAAO,MAhEuB,CAAC,CAgEtB,CAAC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAA;GACrC;EACD;OAED,iBAAiB,GAAG,YAAM;AACzB,QAAM,KAAK,GAAG,MArES,MAAM,CAqER,IAAI,EAAE,CAAA;AAC3B,MAAI,KAAK,GAAG,EAAE,CAAA;AACd,MAAI,KAAK,mBA7EF,OAAO,AA6Ec,EAC3B,KAAK,GAAG,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MA7E9B,MAAM,CA6E+B,IAAI,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA,KAEjE,MA1Ea,EAAE,CA0EZ,KAAK,CAAC,KAAK,mBAhFiB,IAAI,AAgFL,EAAE,KAAK,CAAC,GAAG,EAAE,kCAAkC,CAAC,CAAA;AAC/E,OAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;AACtB,QA5EuB,MAAM,CA4EtB,IAAI,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC,EAAI;AACvB,SA7Ea,EAAE,CA6EZ,KAAK,CAAC,CAAC,mBAnFJ,OAAO,AAmFgB,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,EACpD,kCAAkC,CAAC,CAAA;AACpC,QAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;GAClB,CAAC,CAAA;AACF,SAAO;AACN,OAAI,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;AACrB,OAAI,EAAE,MAnFgB,MAAM,CAmFf,IAAI,EAAE,CAAC,IAAI;GACxB,CAAA;EACD,CAAA","file":"meta/compile/private/parse/parseUse.js","sourcesContent":["import { code } from '../../CompileError'\nimport { LocalDeclare, Use, UseDo } from '../../Expression'\nimport { DotName, Group, Keyword, Name } from '../Token'\nimport { repeat } from '../U/Bag'\nimport { None, opIf, some } from '../U/Op'\nimport { assert } from '../U/util'\nimport { takeBlockLinesFromEnd } from './parseBlock'\nimport parseLocalDeclares from './parseLocalDeclares'\nimport { check, cx, loc, tokens, w, wt } from './vars'\n\nexport default function tryParseUse(k) {\n\tif (!tokens.isEmpty()) {\n\t\tconst l0 = tokens.head()\n\t\tassert(Group.isLine(l0))\n\t\tif (Keyword.is(k)(l0.tokens.head()))\n\t\t\treturn {\n\t\t\t\tuses: w(l0.tokens.tail(), parseUse, k),\n\t\t\t\trest: tokens.tail()\n\t\t\t}\n\t}\n\treturn { uses: [], rest: tokens }\n}\n\nconst\n\tparseUse = k => {\n\t\tconst { before, lines } = takeBlockLinesFromEnd()\n\t\tcheck(before.isEmpty(), () =>\n\t\t\t`Did not expect anything after ${code(k)} other than a block`)\n\t\treturn lines.map(line => w(line.tokens, useLine, k))\n\t},\n\n\t// TODO:ES6 Just use module imports, no AssignDestructure needed\n\tuseLine = k => {\n\t\tconst tReq = tokens.head()\n\t\tconst { path, name } = wt(tReq, parseRequire)\n\n\t\tif (k === 'use!') {\n\t\t\tcheck(tokens.size() === 1, () => `Unexpected ${tokens[1]}`)\n\t\t\treturn UseDo(loc, path)\n\t\t} else {\n\t\t\tconst isLazy = k === 'use~' || k === 'use-debug'\n\t\t\tconst { used, opUseDefault } = w(tokens.tail(), parseThingsUsed, name, isLazy)\n\t\t\treturn Use(loc, path, used, opUseDefault)\n\t\t}\n\t},\n\n\tparseThingsUsed = (name, isLazy) => {\n\t\tconst useDefault = () => LocalDeclare(loc, name, None, isLazy, false)\n\t\tif (tokens.isEmpty())\n\t\t\treturn { used: [], opUseDefault: some(useDefault()) }\n\t\telse {\n\t\t\tconst hasDefaultUse = Keyword.isFocus(tokens.head())\n\t\t\tconst opUseDefault = opIf(hasDefaultUse, useDefault)\n\t\t\tconst rest = hasDefaultUse ? tokens.tail() : tokens\n\t\t\tconst used = w(rest, parseLocalDeclares).map(l => {\n\t\t\t\tcheck(l.name !== '_', () => `${code('_')} not allowed as import name.`)\n\t\t\t\tl.isLazy = isLazy\n\t\t\t\treturn l\n\t\t\t})\n\t\t\treturn { used, opUseDefault }\n\t\t}\n\t},\n\n\tparseRequire = () => {\n\t\tassert(tokens.size() === 1)\n\t\tconst t = tokens.head()\n\t\tif (t instanceof Name)\n\t\t\treturn { path: t.name, name: t.name }\n\t\telse if (t instanceof DotName)\n\t\t\treturn parseLocalRequire()\n\t\telse {\n\t\t\tcheck(Group.isSpaced(t), 'Not a valid module name.')\n\t\t\treturn w(t.tokens, parseLocalRequire)\n\t\t}\n\t},\n\n\tparseLocalRequire = () => {\n\t\tconst first = tokens.head()\n\t\tlet parts = []\n\t\tif (first instanceof DotName)\n\t\t\tparts = first.nDots === 1 ? ['.'] : repeat('..', first.nDots - 1)\n\t\telse\n\t\t\tcx.check(first instanceof Name, first.loc, 'Not a valid part of module path.')\n\t\tparts.push(first.name)\n\t\ttokens.tail().each(t => {\n\t\t\tcx.check(t instanceof DotName && t.nDots === 1, t.loc,\n\t\t\t\t'Not a valid part of module path.')\n\t\t\tparts.push(t.name)\n\t\t})\n\t\treturn {\n\t\t\tpath: parts.join('/'),\n\t\t\tname: tokens.last().name\n\t\t}\n\t}\n"],"sourceRoot":"/src"}