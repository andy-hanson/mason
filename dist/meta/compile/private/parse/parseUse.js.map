{"version":3,"sources":["meta/compile/private/parse/parseUse.js"],"names":[],"mappings":"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","file":"meta/compile/private/parse/parseUse.js","sourcesContent":["import { code } from '../../CompileError'\nimport { LocalDeclare, Use, UseDo } from '../../Expression'\nimport { UseKeywords } from '../Lang'\nimport { DotName, Group, Keyword, Name } from '../Token'\nimport { repeat } from '../U/Bag'\nimport { None, opIf, some } from '../U/Op'\nimport type from '../U/type'\nimport { assert } from '../U/util'\nimport Px from './Px'\n// TODO:ES6\nimport * as PB from './parseBlock'\nimport * as ParseLocalDeclares from './parseLocalDeclares'\n\nexport default function tryParseUse(px, k) {\n\ttype(px, Px, k, UseKeywords)\n\tif (!px.tokens.isEmpty()) {\n\t\tconst l0 = px.tokens.head()\n\t\tassert(Group.isLine(l0))\n\t\tif (Keyword.is(k)(l0.tokens.head()))\n\t\t\treturn {\n\t\t\t\tuses: px.w(l0.tokens.tail(), parseUse, k),\n\t\t\t\trest: px.tokens.tail()\n\t\t\t}\n\t}\n\treturn { uses: [], rest: px.tokens }\n}\n\nfunction parseUse(px, k) {\n\ttype(px, Px, k, UseKeywords)\n\tconst { before, lines } = PB.takeBlockLinesFromEnd(px)\n\tpx.check(before.isEmpty(), () =>\n\t\t`Did not expect anything after ${code(k)} other than a block`)\n\treturn lines.map(line => px.w(line.tokens, useLine, k))\n}\n\n// TODO:ES6 Just use module imports, no AssignDestructure needed\nfunction useLine(px, k) {\n\tconst tReq = px.tokens.head()\n\tconst { path, name } = px.wt(tReq, parseRequire)\n\n\tif (k === 'use!') {\n\t\tpx.check(px.tokens.size() === 1, () => `Unexpected ${px.tokens[1]}`)\n\t\treturn UseDo(px.loc, path)\n\t} else {\n\t\tconst isLazy = k === 'use~' || k === 'use-debug'\n\t\tconst { used, opUseDefault } = px.w(px.tokens.tail(), parseThingsUsed, name, isLazy)\n\t\treturn Use(px.loc, path, used, opUseDefault)\n\t}\n}\n\nfunction parseThingsUsed(px, name, isLazy) {\n\tconst useDefault = () => LocalDeclare(px.loc, name, None, isLazy, false)\n\tif (px.tokens.isEmpty())\n\t\treturn { used: [], opUseDefault: some(useDefault()) }\n\telse {\n\t\tconst hasDefaultUse = Keyword.isFocus(px.tokens.head())\n\t\tconst opUseDefault = opIf(hasDefaultUse, useDefault)\n\t\tconst rest = hasDefaultUse ? px.tokens.tail() : px.tokens\n\t\tconst used = px.w(rest, ParseLocalDeclares.default).map(l => {\n\t\t\tpx.check(l.name !== '_', () => `${code('_')} not allowed as import name.`)\n\t\t\tl.isLazy = isLazy\n\t\t\treturn l\n\t\t})\n\t\treturn { used, opUseDefault }\n\t}\n}\n\nfunction parseRequire(px) {\n\tassert(px.tokens.size() === 1)\n\tconst t = px.tokens.head()\n\tif (t instanceof Name)\n\t\treturn { path: t.name, name: t.name }\n\telse if (t instanceof DotName)\n\t\treturn parseLocalRequire(px)\n\telse {\n\t\tpx.check(Group.isSpaced(t), 'Not a valid module name.')\n\t\treturn px.w(t.tokens, parseLocalRequire)\n\t}\n}\n\nfunction parseLocalRequire(px) {\n\tconst first = px.tokens.head()\n\tlet parts = []\n\tif (first instanceof DotName)\n\t\tparts = first.nDots === 1 ? ['.'] : repeat('..', first.nDots - 1)\n\telse\n\t\tpx.check(first instanceof Name, first.loc, 'Not a valid part of module path.')\n\tparts.push(first.name)\n\tpx.tokens.tail().each(t => {\n\t\tpx.check(t instanceof DotName && t.nDots === 1, t.loc, 'Not a valid part of module path.')\n\t\tparts.push(t.name)\n\t})\n\treturn {\n\t\tpath: parts.join('/'),\n\t\tname: px.tokens.last().name\n\t}\n}\n"],"sourceRoot":"/src"}