{"version":3,"sources":["meta/compile/private/parse/Px.js"],"names":[],"mappings":";;;;;;;;;;;;;KAAO,GAAG;;KAAI,OAAO,iBAAP,OAAO;KACZ,UAAU,OAAV,UAAU;KACV,IAAI,SAAJ,IAAI;KAAE,OAAO,SAAP,OAAO;KAAE,IAAI,SAAJ,IAAI;;KACrB,IAAI;;KACJ,KAAK;;KACL,CAAC;;KAEa,EAAE;AACX,WADS,EAAE,CACV,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE;yBADT,EAAE;;AAErB,8BAFmB,EAAE,6CAEf,EAAE,EAAC;AACT,OAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;AACnB,OAAI,CAAC,MAAM,GAAG,MAAM,CAAA;AACpB,OAAI,CAAC,GAAG,GAAG,GAAG,CAAA;GACd;;YANmB,EAAE;;eAAF,EAAE;AAQtB,QAAK;WAAA,eAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE;AACzB,SAAI,OAAO,KAAK,SAAS,EAAE;AAC1B,aAAO,GAAG,GAAG,CAAA;AACb,iCAXkB,EAAE,uCAWR,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,EAAC;MACpC,MACA,2BAbkB,EAAE,uCAaR,IAAI,EAAE,GAAG,EAAE,OAAO,EAAC;KAChC;;AAED,aAAU;WAAA,oBAAC,MAAM,EAAE,OAAO,EAAE;AAC3B,gCAjBmB,EAAE,uCAiBT,MAAM,CAAC,OAAO,EAAE,EAAE;aAAM,aAAa,CAAC,MAAM,CAAC;MAAA,EAAE,OAAO,EAAC;KACnE;;AAED,OAAI;WAAA,cAAC,GAAG,EAAE,OAAO,EAAE;AAClB,SAAI,OAAO,KAAK,SAAS,EAAE;AAC1B,aAAO,GAAG,GAAG,CAAA;AACb,iCAvBkB,EAAE,sCAuBT,IAAI,CAAC,GAAG,EAAE,OAAO,EAAC;MAC7B,MACA,2BAzBkB,EAAE,sCAyBT,GAAG,EAAE,OAAO,EAAC;KACzB;;AAED,IAAC;WAAA,WAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE;AAC/B,WAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAA;AACrB,SAAI,CAAC,MAAM,GAAG,MAAM,CAAA;AACpB,WAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAA;AAClB,SAAI,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;AAC9D,WAAM,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AACtC,SAAI,CAAC,MAAM,GAAG,CAAC,CAAA;AACf,SAAI,CAAC,GAAG,GAAG,CAAC,CAAA;AACZ,YAAO,GAAG,CAAA;KACV;;AAED,KAAE;WAAA,YAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE;AACf,YAAO,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;KACvC;;;;SAzCmB,EAAE;IAAS,UAAU;;kBAArB,EAAE;;AA4CvB,OAAM,aAAa,GAAG,UAAA,EAAE;SAAI,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;EAAA,CAAA","file":"meta/compile/private/parse/Px.js","sourcesContent":["import Loc, { locType } from 'esast/dist/Loc'\nimport { SubContext } from '../Cx'\nimport { head, isEmpty, last } from '../U/Bag'\nimport type from '../U/type'\nimport Slice from '../U/Slice'\nimport T from '../Token'\n\nexport default class Px extends SubContext {\n\tconstructor(cx, tokens, loc) {\n\t\tsuper(cx)\n\t\ttype(tokens, Slice)\n\t\tthis.tokens = tokens\n\t\tthis.loc = loc\n\t}\n\n\tcheck(cond, loc, message) {\n\t\tif (message === undefined) {\n\t\t\tmessage = loc\n\t\t\tsuper.check(cond, this.loc, message)\n\t\t} else\n\t\t\tsuper.check(cond, loc, message)\n\t}\n\n\tcheckEmpty(tokens, message) {\n\t\tsuper.check(tokens.isEmpty(), () => locFromTokens(tokens), message)\n\t}\n\n\tfail(loc, message) {\n\t\tif (message === undefined) {\n\t\t\tmessage = loc\n\t\t\tsuper.fail(this.loc, message)\n\t\t} else\n\t\t\tsuper.fail(loc, message)\n\t}\n\n\tw(tokens, fun, arg, arg2, arg3) {\n\t\tconst t = this.tokens\n\t\tthis.tokens = tokens\n\t\tconst s = this.loc\n\t\tthis.loc = tokens.isEmpty() ? this.loc : locFromTokens(tokens)\n\t\tconst res = fun(this, arg, arg2, arg3)\n\t\tthis.tokens = t\n\t\tthis.loc = s\n\t\treturn res\n\t}\n\n\twt(t, fun, arg) {\n\t\treturn this.w(new Slice([t]), fun, arg)\n\t}\n}\n\nconst locFromTokens = ts => Loc(ts.head().loc.start, ts.last().loc.end)\n"],"sourceRoot":"/src"}