{"version":3,"sources":["meta/compile/private/parse/parseFun.js"],"names":[],"mappings":";;;;;kBAWwB,QAAQ;;;;AAAjB,UAAS,QAAQ,CAAC,CAAC,EAAE;2BACJ,iBAAiB,EAAE;;QAA1C,YAAY,sBAAZ,YAAY;QAAE,IAAI,sBAAJ,IAAI;;AAC1B,QAJQ,KAAK,CAIP,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;gDAA0C,cAbzD,IAAI,CAa0D,CAAC,CAAC;GAAE,CAAC,CAAA;;WAC3B,MALxB,CAAC,CAKyB,IAAI,EAAE,YAAY,CAAC;;QAA7D,IAAI,MAAJ,IAAI;QAAE,SAAS,MAAT,SAAS;QAAE,KAAK,MAAL,KAAK;QAAE,IAAI,MAAJ,IAAI;QAAE,KAAK,MAAL,KAAK;;;AAE3C,QAAM,YAAY,GAAG,KAbb,MAAM,CAac,YAAY,EACvC,UAAA,EAAE;UAAI,KAde,IAAI,CAcd,YAhB2B,YAAY,CAgB1B,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;GAAA,EAClD;UAAM,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC;WAAI,YAjBiB,YAAY,CAiBhB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,YAAY,CAAC;IAAA,CAAC;GAAA,CAAC,CAAA;AAC7D,SAAO,YAlB2B,GAAG,OAQlB,GAAG,EAUN,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,CAAC,CAAA;EACrE;;AAED,OAAM,iBAAiB,GAAG,YAAM;AAC/B,MAAI,CAAC,MAdsB,MAAM,CAcrB,OAAO,EAAE,EAAE;AACtB,SAAM,CAAC,GAAG,MAfgB,MAAM,CAef,IAAI,EAAE,CAAA;AACvB,OAAI,OAvBY,KAAK,CAuBX,QAAQ,CAAC,CAAC,CAAC,IAAI,OAvBF,OAAO,CAuBG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EACxD,OAAO;AACN,gBAAY,EAAE,KAxBK,IAAI,CAwBJ,MAlBE,CAAC,CAkBD,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,eArB/B,WAAW,CAqBkC,CAAC;AACnD,QAAI,EAAE,MAnBkB,MAAM,CAmBjB,IAAI,EAAE;IACnB,CAAA;GACF;AACD,SAAO,EAAE,YAAY,OA5BL,IAAI,AA4BO,EAAE,IAAI,QAtBN,MAAM,AAsBQ,EAAE,CAAA;EAC3C,CAAA;;AAED,OAAM,YAAY,GAAG,YAAM;AAC1B,QAAM,CAAC,GAAG,MA1BiB,MAAM,CA0BhB,IAAI,EAAE,CAAA;;AAEvB,MAAI,OAnCoB,OAAO,CAmCnB,cAAc,CAAC,CAAC,CAAC,EAAE;AAC9B,SAAM,KAAK,GAAG,MA7BS,CAAC,CA6BR,MA7BU,MAAM,CA6BT,IAAI,EAAE,aA/BtB,SAAS,EA+B0B,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;AACpD,SAAM,IAAI,GAAG,CAAE,YAtCuB,YAAY,CAsCtB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAE,CAAA;AAC1C,UAAO,AAAC,CAAC,CAAC,CAAC,KAAK,MAAM,GACrB;AACC,QAAI,EAAJ,IAAI,EAAE,SAAS,OAvCF,IAAI,AAuCI,EAAE,IAAI,OAvCd,IAAI,AAuCgB,EAAE,KAAK,OAvC3B,IAAI,AAuC6B;AAC9C,SAAK,EAAE,YA1CO,QAAQ,OAQN,GAAG,EAkCE,EAAG,EAAE,KAAK,CAAC;IAChC,GACD;AACC,QAAI,EAAJ,IAAI,EAAE,SAAS,OA3CF,IAAI,AA2CI,EAAE,IAAI,OA3Cd,IAAI,AA2CgB,EAAE,KAAK,OA3C3B,IAAI,AA2C6B;AAC9C,SAAK,EAAE,YA9CF,OAAO,OAQI,GAAG,EAsCC,CAAE,KAAK,CAAE,CAAC;IAC9B,CAAA;GACF,MAAM;gCACoB,YA1CnB,qBAAqB,EA0CqB;;SAAzC,MAAM,0BAAN,MAAM;SAAE,KAAK,0BAAL,KAAK;;aACO,MA1CL,CAAC,CA0CM,MAAM,EAAE,cAAc,CAAC;;SAA7C,IAAI,OAAJ,IAAI;SAAE,SAAS,OAAT,SAAS;;aACO,MA3CP,CAAC,CA2CQ,KAAK,EAAE,YAAY,CAAC;;SAA5C,IAAI,OAAJ,IAAI;SAAE,KAAK,OAAL,KAAK;SAAE,IAAI,OAAJ,IAAI;;AACzB,SAAM,KAAK,GAAG,MA5CS,CAAC,CA4CR,IAAI,cA7CU,mBAAmB,CA6CP,CAAA;AAC1C,UAAO,EAAE,IAAI,EAAJ,IAAI,EAAE,SAAS,EAAT,SAAS,EAAE,KAAK,EAAL,KAAK,EAAE,IAAI,EAAJ,IAAI,EAAE,KAAK,EAAL,KAAK,EAAE,CAAA;GAC9C;EACD,CAAA;;AAED,OAAM,cAAc,GAAG,YAAM;AAC5B,MAAI,MAlDuB,MAAM,CAkDtB,OAAO,EAAE,EACnB,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,OAzDb,IAAI,AAyDe,EAAE,CAAA,KAChC;AACJ,SAAM,CAAC,GAAG,MArDgB,MAAM,CAqDf,IAAI,EAAE,CAAA;AACvB,OAAI,CAAC,mBA7DE,OAAO,AA6DU,EAAE;AACzB,UAvDa,EAAE,CAuDZ,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,yCAAyC,CAAC,CAAA;AACzE,WAAO;AACN,SAAI,EAAE,MAzDe,CAAC,CAyDd,MAzDgB,MAAM,CAyDf,KAAK,EAAE,uBAAqB;AAC3C,cAAS,EAAE,KAhEQ,IAAI,CAgEP,YAlEoB,YAAY,CAkEnB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,OAhE7B,IAAI,EAgEiC,KAAK,EAAE,KAAK,CAAC,CAAC;KAChE,CAAA;IACD,MACI,OAAO,EAAE,IAAI,EAAE,sBAAoB,EAAE,SAAS,OAnEpC,IAAI,AAmEsC,EAAE,CAAA;GAC3D;EACD,CAAA;;AAED,UAAS,YAAY,GAAG;AACvB,WAAS,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE;AACvC,OAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;AACrB,UAAM,SAAS,GAAG,KAAK,CAAC,IAAI,EAAE,CAAA;AAC9B,WA1EM,MAAM,CA0EL,OA5EQ,KAAK,CA4EP,MAAM,CAAC,SAAS,CAAC,CAAC,CAAA;AAC/B,UAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAA;AACpC,QAAI,OA9EkB,OAAO,CA8EjB,EAAE,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,EAC1C,OAAO;AACN,SAAI,EAAE,KA/EY,IAAI,CA+EX,YAjFY,KAAK,CAkF3B,SAAS,CAAC,GAAG,EACb,MA3EmB,CAAC,CA2ElB,WAAW,cA5EkC,mBAAmB,CA4E/B,CAAC,CAAC;AACtC,SAAI,EAAE,KAAK,CAAC,IAAI,EAAE;KAClB,CAAA;IACF;AACD,UAAO,EAAE,IAAI,OArFE,IAAI,AAqFA,EAAE,IAAI,EAAE,KAAK,EAAE,CAAA;GAClC;;wBAEoC,cAAc,OAlFxB,MAAM,EAkF2B,IAAI,CAAC;;QAAnD,IAAI,mBAAV,IAAI;QAAc,MAAM,mBAAZ,IAAI;;yBACM,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC;;QAA7C,KAAK,oBAAX,IAAI;QAAS,IAAI,oBAAJ,IAAI;;AACzB,SAAO,EAAE,IAAI,EAAJ,IAAI,EAAE,KAAK,EAAL,KAAK,EAAE,IAAI,EAAJ,IAAI,EAAE,CAAA;EAC5B","file":"meta/compile/private/parse/parseFun.js","sourcesContent":["import { code } from '../../CompileError'\nimport { BlockDo, BlockVal, Debug, Fun, LocalDeclare } from '../../Expression'\nimport { DotName, Group, Keyword } from '../Token'\nimport { ifElse, None, some } from '../U/Op'\nimport { assert } from '../U/util'\nimport parseLocalDeclares from './parseLocalDeclares'\nimport { parseSpaced } from './parseSpaced'\nimport { parseCase } from './parseCase'\nimport { takeBlockLinesFromEnd, parseBlockFromLines, parseLinesFromBlock } from './parseBlock'\nimport { check, cx, loc, w, tokens } from './vars'\n\nexport default function parseFun(k) {\n\tconst { opReturnType, rest } = tryTakeReturnType()\n\tcheck(!rest.isEmpty(), () => `Expected an indented block after ${code(k)}`)\n\tconst { args, opRestArg, block, opIn, opOut } = w(rest, argsAndBlock)\n\t// Need res declare if there is a return type or out condition.\n\tconst opResDeclare = ifElse(opReturnType,\n\t\trt => some(LocalDeclare.res(rt.loc, opReturnType)),\n\t\t() => opOut.map(o => LocalDeclare.res(o.loc, opReturnType)))\n\treturn Fun(loc, k, args, opRestArg, block, opIn, opResDeclare, opOut)\n}\n\nconst tryTakeReturnType = () => {\n\tif (!tokens.isEmpty()) {\n\t\tconst h = tokens.head()\n\t\tif (Group.isSpaced(h) && Keyword.isColon(h.tokens.head()))\n\t\t\treturn {\n\t\t\t\topReturnType: some(w(h.tokens.tail(), parseSpaced)),\n\t\t\t\trest: tokens.tail()\n\t\t\t}\n\t}\n\treturn { opReturnType: None, rest: tokens }\n}\n\nconst argsAndBlock = () => {\n\tconst h = tokens.head()\n\t// Might be `|case`\n\tif (Keyword.isCaseOrCaseDo(h)) {\n\t\tconst eCase = w(tokens.tail(), parseCase, h.k, true)\n\t\tconst args = [ LocalDeclare.focus(h.loc) ]\n\t\treturn (h.k === 'case') ?\n\t\t\t{\n\t\t\t\targs, opRestArg: None, opIn: None, opOut: None,\n\t\t\t\tblock: BlockVal(loc, [ ], eCase)\n\t\t\t} :\n\t\t\t{\n\t\t\t\targs, opRestArg: None, opIn: None, opOut: None,\n\t\t\t\tblock: BlockDo(loc, [ eCase ])\n\t\t\t}\n\t} else {\n\t\tconst { before, lines } = takeBlockLinesFromEnd()\n\t\tconst { args, opRestArg } = w(before, parseFunLocals)\n\t\tconst { opIn, opOut, rest } = w(lines, tryTakeInOut)\n\t\tconst block = w(rest, parseBlockFromLines)\n\t\treturn { args, opRestArg, block, opIn, opOut }\n\t}\n}\n\nconst parseFunLocals = () => {\n\tif (tokens.isEmpty())\n\t\treturn { args: [], opRestArg: None }\n\telse {\n\t\tconst l = tokens.last()\n\t\tif (l instanceof DotName) {\n\t\t\tcx.check(l.nDots === 3, l.loc, 'Splat argument must have exactly 3 dots')\n\t\t\treturn {\n\t\t\t\targs: w(tokens.rtail(), parseLocalDeclares),\n\t\t\t\topRestArg: some(LocalDeclare(l.loc, l.name, None, false, false))\n\t\t\t}\n\t\t}\n\t\telse return { args: parseLocalDeclares(), opRestArg: None }\n\t}\n}\n\nfunction tryTakeInOut() {\n\tfunction tryTakeInOrOut(lines, inOrOut) {\n\t\tif (!lines.isEmpty()) {\n\t\t\tconst firstLine = lines.head()\n\t\t\tassert(Group.isLine(firstLine))\n\t\t\tconst tokensFirst = firstLine.tokens\n\t\t\tif (Keyword.is(inOrOut)(tokensFirst.head()))\n\t\t\t\treturn {\n\t\t\t\t\ttook: some(Debug(\n\t\t\t\t\t\tfirstLine.loc,\n\t\t\t\t\t\tw(tokensFirst, parseLinesFromBlock))),\n\t\t\t\t\trest: lines.tail()\n\t\t\t\t}\n\t\t}\n\t\treturn { took: None, rest: lines }\n\t}\n\n\tconst { took: opIn, rest: restIn } = tryTakeInOrOut(tokens, 'in')\n\tconst { took: opOut, rest } = tryTakeInOrOut(restIn, 'out')\n\treturn { opIn, opOut, rest }\n}\n"],"sourceRoot":"/src"}