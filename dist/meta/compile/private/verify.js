if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', '../CompileError', '../Expression', './util', './VerifyResults'], function (exports, module, _CompileError, _Expression, _util, _VerifyResults) {
	'use strict';

	module.exports = verify;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	var _VerifyResults2 = _interopRequire(_VerifyResults);

	const vm = function (es) {
		return es.forEach(function (e) {
			return e.verify();
		});
	};
	const vop = function (op) {
		return (0, _util.opEach)(op, function (_) {
			return _.verify();
		});
	};

	let cx, locals,
	// Locals for this block.
	// Replaces `locals` when entering into sub-function.
	pendingBlockLocals, isInDebug, isInGenerator, opLoop, vr;

	const init = function (_cx) {
		cx = _cx;
		locals = new Map();
		pendingBlockLocals = [];
		isInDebug = false;
		isInGenerator = false;
		opLoop = null;
		vr = new _VerifyResults2();
	},
	     
	// Release for garbage collection
	uninit = function () {
		locals = pendingBlockLocals = opLoop = vr = undefined;
	},
	      withInGenerator = function (_isInGenerator, fun) {
		const g = isInGenerator;
		isInGenerator = _isInGenerator;
		fun();
		isInGenerator = g;
	},
	      plusLocals = function (addedLocals, fun) {
		const shadowed = new Map();
		addedLocals.forEach(function (l) {
			const got = locals.get(l.name);
			if (got !== undefined) shadowed.set(l.name, got);
			locals.set(l.name, l);
		});
		fun();
		addedLocals.forEach(function (l) {
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});
	},
	      plusPendingBlockLocals = function (pending, fun) {
		const oldLength = pendingBlockLocals.length;
		pendingBlockLocals.push.apply(pendingBlockLocals, _toConsumableArray(pending));
		fun();
		while (pendingBlockLocals.length > oldLength) pendingBlockLocals.pop();
	},
	      withInLoop = function (loop, fun) {
		const l = opLoop;
		opLoop = loop;
		fun();
		opLoop = l;
	},
	      withInDebug = function (_isInDebug, fun) {
		const d = isInDebug;
		isInDebug = _isInDebug;
		fun();
		isInDebug = d;
	},
	      withBlockLocals = function (fun) {
		const bl = pendingBlockLocals;
		pendingBlockLocals = [];
		plusLocals(bl, fun);
		pendingBlockLocals = bl;
	},
	      accessLocal = function (declare, access, isDebugAccess) {
		return _addAccess(vr.localToInfo.get(declare), access, isDebugAccess);
	},
	      accessLocalForReturn = function (declare, access) {
		const info = vr.localToInfo.get(declare);
		_addAccess(info, access, info.isInDebug);
	},
	      _addAccess = function (localInfo, access, isDebugAccess) {
		return (isDebugAccess ? localInfo.debugAccesses : localInfo.nonDebugAccesses).push(access);
	},
	     

	// Vr setters
	setEndLoop = function (endLoop, loop) {
		vr.endLoopToLoop.set(endLoop, loop);
	},
	      registerLocal = function (local) {
		vr.localToInfo.set(local, (0, _VerifyResults.LocalInfo)(isInDebug, [], []));
	},
	      setEntryIndex = function (listMapEntry, index) {
		vr.entryToIndex.set(listMapEntry, index);
	};

	function verify(cx, e) {
		init(cx);
		e.verify();
		verifyLocalUse();
		const out = vr;
		uninit();
		return out;
	}

	const verifyLocalUse = function () {
		vr.localToInfo.forEach(function (info, local) {
			if (!(local instanceof _Expression.LocalDeclareRes)) {
				const noNonDebug = (0, _util.isEmpty)(info.nonDebugAccesses);
				if (noNonDebug && (0, _util.isEmpty)(info.debugAccesses)) cx.warn(local.loc, function () {
					return 'Unused local variable ' + (0, _CompileError.code)(local.name) + '.';
				});else if (info.isInDebug) cx.warnIf(!noNonDebug, function () {
					return (0, _util.head)(info.nonDebugAccesses).loc;
				}, function () {
					return 'Debug-only local ' + (0, _CompileError.code)(local.name) + ' used outside of debug.';
				});else cx.warnIf(noNonDebug, local.loc, function () {
					return 'Local ' + (0, _CompileError.code)(local.name) + ' used only in debug.';
				});
			}
		});
	};

	(0, _util.implementMany)(_Expression, 'verify', {
		Assign: function () {
			var _this = this;

			const doV = function () {
				_this.assignee.verify();
				_this.value.verify();
			};
			if (this.assignee.isLazy()) withBlockLocals(doV);else doV();
		},

		AssignDestructure: function () {
			this.value.verify();
			vm(this.assignees);
		},

		AssignMutate: function () {
			var _this2 = this;

			const declare = getLocalDeclare(this.name, this.loc);
			cx.check(declare.isMutable(), this.loc, function () {
				return '' + (0, _CompileError.code)(_this2.name) + ' is not mutable.';
			});
			// TODO: Track assignments. Mutable local must be mutated somewhere.
			this.value.verify();
		},

		BagEntry: function () {
			this.value.verify();
		},

		BagSimple: function () {
			vm(this.parts);
		},

		BlockDo: function () {
			verifyLines(this.lines);
		},

		BlockWithReturn: function () {
			var _this3 = this;

			var _verifyLines = verifyLines(this.lines);

			const newLocals = _verifyLines.newLocals;

			plusLocals(newLocals, function () {
				return _this3.returned.verify();
			});
		},

		BlockObj: function () {
			var _this4 = this;

			var _verifyLines2 = verifyLines(this.lines);

			const newLocals = _verifyLines2.newLocals;

			this.keys.forEach(function (_) {
				return accessLocalForReturn(_, _this4);
			});
			(0, _util.opEach)(this.opObjed, function (_) {
				return plusLocals(newLocals, function () {
					return _.verify();
				});
			});
		},

		BlockBag: blockBagOrMap,
		BlockMap: blockBagOrMap,

		BlockWrap: function () {
			this.block.verify();
		},

		Call: function () {
			this.called.verify();
			vm(this.args);
		},

		CaseDo: verifyCase,
		CaseDoPart: verifyCasePart,
		CaseVal: verifyCase,
		CaseValPart: verifyCasePart,

		// Only reach here for in/out condition
		Debug: function () {
			verifyLines([this]);
		},

		EndLoop: function () {
			var _this5 = this;

			(0, _util.ifElse)(opLoop, function (_) {
				return setEndLoop(_this5, _);
			}, function () {
				return cx.fail(_this5.loc, 'Not in a loop.');
			});
		},

		Fun: function () {
			var _this6 = this;

			withBlockLocals(function () {
				cx.check(_this6.opResDeclare === null || _this6.block instanceof _Expression.BlockVal, _this6.loc, 'Function with return condition must return something.');
				_this6.args.forEach(function (arg) {
					return vop(arg.opType);
				});
				withInGenerator(_this6.isGenerator, function () {
					const allArgs = (0, _util.cat)(_this6.args, _this6.opRestArg);
					allArgs.forEach(function (_) {
						return registerLocal(_);
					});
					plusLocals(allArgs, function () {
						vop(_this6.opIn);
						_this6.block.verify();
						(0, _util.opEach)(_this6.opResDeclare, function (_) {
							_.verify();
							registerLocal(_);
						});
						const verifyOut = function () {
							return (0, _util.opEach)(_this6.opOut, function (_) {
								return _.verify();
							});
						};
						(0, _util.ifElse)(_this6.opResDeclare, function (rd) {
							return plusLocals([rd], verifyOut);
						}, verifyOut);
					});
				});
			});
		},

		GlobalAccess: function () {},

		IfDo: function () {
			this.test.verify();
			this.result.verify();
		},

		Lazy: function () {
			var _this7 = this;

			withBlockLocals(function () {
				return _this7.value.verify();
			});
		},

		LocalAccess: function () {
			const declare = getLocalDeclare(this.name, this.loc);
			vr.accessToLocal.set(this, declare);
			accessLocal(declare, this, isInDebug);
		},

		Loop: function () {
			var _this8 = this;

			withInLoop(this, function () {
				return _this8.block.verify();
			});
		},

		// Adding LocalDeclares to the available locals is done by Fun or lineNewLocals.
		LocalDeclare: function () {
			vop(this.opType);
		},

		NumberLiteral: function () {},

		MapEntry: function () {
			this.key.verify();
			this.val.verify();
		},

		Member: function () {
			this.object.verify();
		},

		Module: function () {
			var _this9 = this;

			// No need to verify this.doUses.
			const useLocals = verifyUses(this.uses, this.debugUses);
			plusLocals(useLocals, function () {
				var _verifyLines3 = verifyLines(_this9.lines);

				const newLocals = _verifyLines3.newLocals;

				_this9.exports.forEach(function (ex) {
					return accessLocalForReturn(ex, _this9);
				});
				(0, _util.opEach)(_this9.opDefaultExport, function (_) {
					return plusLocals(newLocals, function () {
						return _.verify();
					});
				});
			});

			const exports = (0, _util.newSet)(this.exports);
			const markExportLines = function (line) {
				if (line instanceof _Expression.Assign && exports.has(line.assignee) || line instanceof _Expression.AssignDestructure && line.assignees.some(function (_) {
					return exports.has(_);
				})) vr.exportAssigns.add(line);else if (line instanceof _Expression.Debug) line.lines.forEach(markExportLines);
			};
			this.lines.forEach(markExportLines);
		},

		ObjSimple: function () {
			const keys = new Set();
			this.pairs.forEach(function (pair) {
				cx.check(!keys.has(pair.key), pair.loc, function () {
					return 'Duplicate key ' + pair.key;
				});
				keys.add(pair.key);
				pair.value.verify();
			});
		},

		Quote: function () {
			this.parts.forEach(function (_) {
				if (typeof _ !== 'string') _.verify();
			});
		},

		SpecialDo: function () {},

		SpecialVal: function () {},

		Splat: function () {
			this.splatted.verify();
		},

		Yield: function () {
			cx.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yielded.verify();
		},

		YieldTo: function () {
			cx.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yieldedTo.verify();
		}
	});

	function blockBagOrMap() {
		var _verifyLines4 = verifyLines(this.lines);

		const listMapLength = _verifyLines4.listMapLength;

		vr.blockToLength.set(this, listMapLength);
	}

	function verifyCase() {
		var _this10 = this;

		const newLocals = [];
		(0, _util.opEach)(this.opCased, function (_) {
			registerLocal(_.assignee);
			_.verify();
			newLocals.push(_.assignee);
		});
		plusLocals(newLocals, function () {
			vm(_this10.parts);
			vop(_this10.opElse);
		});
	}

	function verifyCasePart() {
		var _this11 = this;

		if (this.test instanceof _Expression.Pattern) {
			this.test.type.verify();
			this.test.patterned.verify();
			vm(this.test.locals);
			this.test.locals.forEach(registerLocal);
			plusLocals(this.test.locals, function () {
				return _this11.result.verify();
			});
		} else {
			this.test.verify();
			this.result.verify();
		}
	}

	const getLocalDeclare = function (name, accessLoc) {
		const declare = locals.get(name);
		cx.check(declare !== undefined, accessLoc, function () {
			return 'No such local ' + (0, _CompileError.code)(name) + '.\nLocals are:\n' + (0, _CompileError.code)((0, _util.mapKeys)(locals).join(' ')) + '.';
		});
		return declare;
	},
	      lineNewLocals = function (line) {
		return line instanceof _Expression.Assign ? [line.assignee] : line instanceof _Expression.AssignDestructure ? line.assignees : [];
	},
	      verifyUses = function (uses, debugUses) {
		const useLocals = [];
		const verifyUse = function (use) {
			use.used.forEach(useLocal);
			(0, _util.opEach)(use.opUseDefault, useLocal);
		},
		      useLocal = function (_) {
			registerLocal(_);
			useLocals.push(_);
		};
		uses.forEach(verifyUse);
		withInDebug(true, function () {
			return debugUses.forEach(verifyUse);
		});
		return useLocals;
	},
	      verifyLines = function (lines) {
		const newLocals = [];
		// First, get locals for the whole block.
		const getLineLocals = function (line) {
			if (line instanceof _Expression.Debug) withInDebug(true, function () {
				return line.lines.forEach(getLineLocals);
			});else {
				const news = lineNewLocals(line);
				news.forEach(registerLocal);
				newLocals.push.apply(newLocals, _toConsumableArray(news));
			}
		};

		lines.forEach(getLineLocals);

		const thisBlockLocalNames = new Set();
		const shadowed = new Map();

		let listMapLength = 0;

		const verifyLine = function (line) {
			if (line instanceof _Expression.Debug)
				// TODO: Do anything in this situation?
				// cx.check(!inDebug, line.loc, 'Redundant `debug`.')
				withInDebug(true, function () {
					return line.lines.forEach(verifyLine);
				});else {
				verifyIsStatement(line);
				lineNewLocals(line).forEach(function (l) {
					const got = locals.get(l.name);
					if (got !== undefined) {
						cx.check(!thisBlockLocalNames.has(l.name), l.loc, function () {
							return 'A local ' + (0, _CompileError.code)(l.name) + ' is already in this block.';
						});
						shadowed.set(l.name, got);
					}
					locals.set(l.name, l);
					thisBlockLocalNames.add(l.name);
				});
				if (line instanceof _Expression.BagEntry || line instanceof _Expression.MapEntry) {
					setEntryIndex(line, listMapLength);
					listMapLength = listMapLength + 1;
				}
				line.verify();
			}
		};

		plusPendingBlockLocals(newLocals, function () {
			return lines.forEach(verifyLine);
		});

		newLocals.forEach(function (l) {
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});

		return { newLocals: newLocals, listMapLength: listMapLength };
	},
	      verifyIsStatement = function (line) {
		const isStatement = line instanceof _Expression.Do || line instanceof _Expression.Call || line instanceof _Expression.Yield || line instanceof _Expression.YieldTo || line instanceof _Expression.BagEntry || line instanceof _Expression.MapEntry || line instanceof _Expression.SpecialDo;
		cx.check(isStatement, line.loc, 'Expression in statement position.');
	};
});
//# sourceMappingURL=data:application/json;base64,