if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', '../CompileError', '../Expression', './U/Bag', './U/Op', './U/util', './Vr'], function (exports, module, _CompileError, _Expression, _UBag, _UOp, _UUtil, _Vr) {
	'use strict';

	module.exports = verify;

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	const vm = function (es) {
		return es.forEach(function (e) {
			return e.verify();
		});
	};

	let cx, locals,
	// Locals for this block.
	// Replaces `locals` when entering into sub-function.
	pendingBlockLocals, isInDebug, isInGenerator, opLoop, vr;

	const init = function (_cx) {
		cx = _cx;
		locals = new Map();
		pendingBlockLocals = [];
		isInDebug = false;
		isInGenerator = false;
		opLoop = [];
		vr = _Vr.emptyVr();
	},
	     
	// Release for garbage collection
	uninit = function () {
		locals = pendingBlockLocals = opLoop = vr = undefined;
	},
	      withInGenerator = function (_isInGenerator, fun) {
		const g = isInGenerator;
		isInGenerator = _isInGenerator;
		fun();
		isInGenerator = g;
	},
	      plusLocals = function (addedLocals, fun) {
		const shadowed = new Map();
		addedLocals.forEach(function (l) {
			const got = locals.get(l.name);
			if (got !== undefined) shadowed.set(l.name, got);
			locals.set(l.name, l);
		});
		fun();
		addedLocals.forEach(function (l) {
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});
	},
	      plusPendingBlockLocals = function (pending, fun) {
		const oldLength = pendingBlockLocals.length;
		pendingBlockLocals.push.apply(pendingBlockLocals, _toConsumableArray(pending));
		fun();
		while (pendingBlockLocals.length > oldLength) pendingBlockLocals.pop();
	},
	      withInLoop = function (loop, fun) {
		const l = opLoop;
		opLoop = _UOp.some(loop);
		fun();
		opLoop = l;
	},
	      withInDebug = function (_isInDebug, fun) {
		const d = isInDebug;
		isInDebug = _isInDebug;
		fun();
		isInDebug = d;
	},
	      withBlockLocals = function (fun) {
		const bl = pendingBlockLocals;
		pendingBlockLocals = [];
		plusLocals(bl, fun);
		pendingBlockLocals = bl;
	},
	     

	// Vr setters
	setEndLoop = function (endLoop, loop) {
		vr.endLoopToLoop.set(endLoop, loop);
	},
	      registerLocal = function (local) {
		vr.localToInfo.set(local, _Vr.VrLocalInfo(isInDebug, [], []));
	};

	function verify(cx, e) {
		init(cx);
		e.verify();
		verifyLocalUse();
		const out = vr;
		uninit();
		return out;
	}

	const verifyLocalUse = function () {
		vr.localToInfo.forEach(function (info, local) {
			const noNonDebug = _UBag.isEmpty(info.nonDebugAccesses);
			if (noNonDebug && _UBag.isEmpty(info.debugAccesses)) cx.warnIf(!local.okToNotUse, local.loc, function () {
				return 'Unused local variable ' + _CompileError.code(local.name) + '.';
			});else if (info.isInDebug) cx.warnIf(!noNonDebug, function () {
				return _UBag.head(info.nonDebugAccesses).loc;
			}, function () {
				return 'Debug-only local ' + _CompileError.code(local.name) + ' used outside of debug.';
			});else cx.warnIf(!local.okToNotUse && noNonDebug, local.loc, function () {
				return 'Local ' + _CompileError.code(local.name) + ' used only in debug.';
			});
		});
	};

	_UUtil.implementMany(_Expression, 'verify', {
		Assign: function () {
			var _this = this;

			const doV = function () {
				_this.assignee.verify();
				_this.value.verify();
			};
			if (this.assignee.isLazy) withBlockLocals(doV);else doV();
		},
		BlockDo: function () {
			verifyLines(this.lines);
		},
		BlockVal: function () {
			var _this2 = this;

			const newLocals = verifyLines(this.lines);
			plusLocals(newLocals, function () {
				return _this2.returned.verify();
			});
		},
		BlockWrap: function () {
			this.block.verify();
		},
		CaseDo: verifyCase,
		CaseVal: verifyCase,
		// Only reach here for in/out condition
		Debug: function () {
			verifyLines([this]);
		},
		EndLoop: function () {
			var _this3 = this;

			_UOp.ifElse(opLoop, function (loop) {
				return setEndLoop(_this3, loop);
			}, function () {
				return cx.fail(_this3.loc, 'Not in a loop.');
			});
		},
		Fun: function () {
			var _this4 = this;

			withBlockLocals(function () {
				cx.check(_UBag.isEmpty(_this4.opResDeclare) || _this4.block instanceof _Expression.BlockVal, _this4.loc, 'Function with return condition must return something.');
				_this4.args.forEach(function (arg) {
					return vm(arg.opType);
				});
				withInGenerator(_this4.isGenerator, function () {
					const allArgs = _this4.args.concat(_this4.opRestArg);
					allArgs.forEach(function (_) {
						return registerLocal(_);
					});
					plusLocals(allArgs, function () {
						vm(_this4.opIn);
						_this4.block.verify();
						_this4.opResDeclare.forEach(function (rd) {
							rd.verify();
							registerLocal(rd);
						});
						_this4.opOut.forEach(function (o) {
							return plusLocals(_this4.opResDeclare, function () {
								return o.verify();
							});
						});
					});
				});
			});
		},
		LocalAccess: function () {
			const local = locals.get(this.name);
			if (local !== undefined) {
				vr.accessToLocal.set(this, local);
				const info = vr.localToInfo.get(local);
				const accesses = isInDebug ? info.debugAccesses : info.nonDebugAccesses;
				accesses.push(this);
			} else cx.fail(this.loc, 'Could not find local or global ' + _CompileError.code(this.name) + '.\n' + 'Available locals are:\n' + ('' + _CompileError.code(_UUtil.mapKeys(locals).join(' ')) + '.'));
		},
		Loop: function () {
			var _this5 = this;

			withInLoop(this, function () {
				return _this5.block.verify();
			});
		},
		// Adding LocalDeclares to the available locals is done by Fun or lineNewLocals.
		LocalDeclare: function () {
			vm(this.opType);
		},
		MapEntry: function () {
			this.key.verify();
			this.val.verify();
		},
		Module: function () {
			var _this6 = this;

			const useLocals = verifyUses(this.uses, this.debugUses);
			plusLocals(useLocals, function () {
				return _this6.block.verify();
			});
		},
		Yield: function () {
			cx.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yielded.verify();
		},
		YieldTo: function () {
			cx.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yieldedTo.verify();
		},

		// These ones just recurse to their children.
		AssignDestructure: function () {
			this.value.verify();
			vm(this.assignees);
		},
		Call: function () {
			this.called.verify();
			vm(this.args);
		},
		CaseDoPart: verifyCasePart,
		CaseValPart: verifyCasePart,
		GlobalAccess: function () {},
		ObjReturn: function () {
			vm(this.opObjed);
		},
		ObjSimple: function () {
			var _this7 = this;

			Object.getOwnPropertyNames(this.keysVals).forEach(function (key) {
				return _this7.keysVals[key].verify();
			});
		},
		Lazy: function () {
			var _this8 = this;

			withBlockLocals(function () {
				return _this8.value.verify();
			});
		},
		ListReturn: function () {},
		ListEntry: function () {
			this.value.verify();
		},
		ListSimple: function () {
			vm(this.parts);
		},
		NumberLiteral: function () {},
		MapReturn: function () {},
		Member: function () {
			this.object.verify();
		},
		ModuleDefaultExport: function () {
			this.value.verify();
		},
		Quote: function () {
			this.parts.forEach(function (_) {
				if (typeof _ !== 'string') _.verify();
			});
		},
		Special: function () {},
		Splat: function () {
			this.splatted.verify();
		}
	});

	function verifyCase() {
		var _this9 = this;

		const newLocals = [];
		this.opCased.forEach(function (cased) {
			registerLocal(cased.assignee);
			cased.verify();
			newLocals.push(cased.assignee);
		});
		plusLocals(newLocals, function () {
			vm(_this9.parts);
			vm(_this9.opElse);
		});
	}

	function verifyCasePart() {
		var _this10 = this;

		if (this.test instanceof _Expression.Pattern) {
			this.test.type.verify();
			this.test.patterned.verify();
			vm(this.test.locals);
			this.test.locals.forEach(registerLocal);
			plusLocals(this.test.locals, function () {
				return _this10.result.verify();
			});
		} else {
			this.test.verify();
			this.result.verify();
		}
	}

	const verifyUses = function (uses, debugUses) {
		const useLocals = [];
		const verifyUse = function (use) {
			use.used.forEach(useLocal);
			use.opUseDefault.forEach(useLocal);
		},
		      useLocal = function (_) {
			registerLocal(_);
			useLocals.push(_);
		};
		uses.forEach(function (use) {
			if (!(use instanceof _Expression.UseDo)) verifyUse(use);
		});
		withInDebug(true, function () {
			return debugUses.forEach(verifyUse);
		});
		return useLocals;
	},
	      verifyLines = function (lines) {
		const allNewLocals = [];
		// First, get locals for the whole block.
		const getLineLocals = function (line) {
			if (line instanceof _Expression.Debug) withInDebug(true, function () {
				return line.lines.forEach(getLineLocals);
			});else {
				const news = lineNewLocals(line);
				news.forEach(registerLocal);
				allNewLocals.push.apply(allNewLocals, _toConsumableArray(news));
			}
		};

		lines.forEach(getLineLocals);

		const thisBlockLocalNames = new Set();
		const shadowed = new Map();

		const verifyLine = function (line) {
			if (line instanceof _Expression.Debug)
				// TODO: Do anything in this situation?
				// cx.check(!inDebug, line.loc, 'Redundant `debug`.')
				withInDebug(true, function () {
					return line.lines.forEach(verifyLine);
				});else {
				verifyIsStatement(line);
				lineNewLocals(line).forEach(function (l) {
					const got = locals.get(l.name);
					if (got !== undefined) {
						cx.check(!thisBlockLocalNames.has(l.name), l.loc, function () {
							return 'A local ' + _CompileError.code(l.name) + ' is already in this block.';
						});
						shadowed.set(l.name, got);
					}
					locals.set(l.name, l);
					thisBlockLocalNames.add(l.name);
				});
				line.verify();
			}
		};

		plusPendingBlockLocals(allNewLocals, function () {
			return lines.forEach(verifyLine);
		});

		allNewLocals.forEach(function (l) {
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});

		return allNewLocals;
	},
	      verifyIsStatement = function (line) {
		switch (true) {
			case line instanceof _Expression.Do:
			// Some Vals are also conceptually Dos, but this was easier than multiple inheritance.
			case line instanceof _Expression.Call:
			case line instanceof _Expression.Yield:
			case line instanceof _Expression.YieldTo:
			case line instanceof _Expression.Special && line.k === 'debugger':
			// OK, used to mean `pass`
			case line instanceof _Expression.GlobalAccess && line.name === 'null':
				return;
			default:
				cx.fail(line.loc, 'Expression in statement position.');
		}
	},
	      lineNewLocals = function (line) {
		return line instanceof _Expression.Assign ? [line.assignee] : line instanceof _Expression.AssignDestructure ? line.assignees : [];
	};
});
//# sourceMappingURL=data:application/json;base64,