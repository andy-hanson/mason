if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', '../CompileError', '../Expression', './U/Bag', './U/op', './U/util', './VerifyResults'], function (exports, module, _CompileError, _Expression, _UBag, _UOp, _UUtil, _VerifyResults) {
	'use strict';

	module.exports = verify;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	var _VerifyResults2 = _interopRequire(_VerifyResults);

	const vm = function (es) {
		return es.forEach(function (e) {
			return e.verify();
		});
	};
	const vop = function (op) {
		return (0, _UOp.opEach)(op, function (_) {
			return _.verify();
		});
	};

	let cx, locals,
	// Locals for this block.
	// Replaces `locals` when entering into sub-function.
	pendingBlockLocals, isInDebug, isInGenerator, opLoop, vr;

	const init = function (_cx) {
		cx = _cx;
		locals = new Map();
		pendingBlockLocals = [];
		isInDebug = false;
		isInGenerator = false;
		opLoop = null;
		vr = new _VerifyResults2();
	},
	     
	// Release for garbage collection
	uninit = function () {
		locals = pendingBlockLocals = opLoop = vr = undefined;
	},
	      withInGenerator = function (_isInGenerator, fun) {
		const g = isInGenerator;
		isInGenerator = _isInGenerator;
		fun();
		isInGenerator = g;
	},
	      plusLocals = function (addedLocals, fun) {
		const shadowed = new Map();
		addedLocals.forEach(function (l) {
			const got = locals.get(l.name);
			if (got !== undefined) shadowed.set(l.name, got);
			locals.set(l.name, l);
		});
		fun();
		addedLocals.forEach(function (l) {
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});
	},
	      plusPendingBlockLocals = function (pending, fun) {
		const oldLength = pendingBlockLocals.length;
		pendingBlockLocals.push.apply(pendingBlockLocals, _toConsumableArray(pending));
		fun();
		while (pendingBlockLocals.length > oldLength) pendingBlockLocals.pop();
	},
	      withInLoop = function (loop, fun) {
		const l = opLoop;
		opLoop = loop;
		fun();
		opLoop = l;
	},
	      withInDebug = function (_isInDebug, fun) {
		const d = isInDebug;
		isInDebug = _isInDebug;
		fun();
		isInDebug = d;
	},
	      withBlockLocals = function (fun) {
		const bl = pendingBlockLocals;
		pendingBlockLocals = [];
		plusLocals(bl, fun);
		pendingBlockLocals = bl;
	},
	      accessLocal = function (declare, access, isDebugAccess) {
		return _addAccess(vr.localToInfo.get(declare), access, isDebugAccess);
	},
	      accessLocalForReturn = function (declare, access) {
		const info = vr.localToInfo.get(declare);
		_addAccess(info, access, info.isInDebug);
	},
	      _addAccess = function (localInfo, access, isDebugAccess) {
		return (isDebugAccess ? localInfo.debugAccesses : localInfo.nonDebugAccesses).push(access);
	},
	     

	// Vr setters
	setEndLoop = function (endLoop, loop) {
		vr.endLoopToLoop.set(endLoop, loop);
	},
	      registerLocal = function (local) {
		vr.localToInfo.set(local, (0, _VerifyResults.LocalInfo)(isInDebug, [], []));
	},
	      setEntryIndex = function (listMapEntry, index) {
		vr.entryToIndex.set(listMapEntry, index);
	};

	function verify(cx, e) {
		init(cx);
		e.verify();
		verifyLocalUse();
		const out = vr;
		uninit();
		return out;
	}

	const verifyLocalUse = function () {
		vr.localToInfo.forEach(function (info, local) {
			if (!(local instanceof _Expression.LocalDeclareRes)) {
				const noNonDebug = (0, _UBag.isEmpty)(info.nonDebugAccesses);
				if (noNonDebug && (0, _UBag.isEmpty)(info.debugAccesses)) cx.warn(local.loc, function () {
					return 'Unused local variable ' + (0, _CompileError.code)(local.name) + '.';
				});else if (info.isInDebug) cx.warnIf(!noNonDebug, function () {
					return (0, _UBag.head)(info.nonDebugAccesses).loc;
				}, function () {
					return 'Debug-only local ' + (0, _CompileError.code)(local.name) + ' used outside of debug.';
				});else cx.warnIf(noNonDebug, local.loc, function () {
					return 'Local ' + (0, _CompileError.code)(local.name) + ' used only in debug.';
				});
			}
		});
	};

	(0, _UUtil.implementMany)(_Expression, 'verify', {
		Assign: function () {
			var _this = this;

			const doV = function () {
				_this.assignee.verify();
				_this.value.verify();
			};
			if (this.assignee.isLazy) withBlockLocals(doV);else doV();
		},
		AssignDestructure: function () {
			this.value.verify();
			vm(this.assignees);
		},
		BagEntry: function () {
			this.value.verify();
		},
		BagSimple: function () {
			vm(this.parts);
		},
		BlockDo: function () {
			verifyLines(this.lines);
		},
		BlockWithReturn: function () {
			var _this2 = this;

			var _verifyLines = verifyLines(this.lines);

			const newLocals = _verifyLines.newLocals;

			plusLocals(newLocals, function () {
				return _this2.returned.verify();
			});
		},
		BlockObj: function () {
			var _this3 = this;

			var _verifyLines2 = verifyLines(this.lines);

			const newLocals = _verifyLines2.newLocals;

			this.keys.forEach(function (_) {
				return accessLocalForReturn(_, _this3);
			});
			(0, _UOp.opEach)(this.opObjed, function (_) {
				return plusLocals(newLocals, function () {
					return _.verify();
				});
			});
		},
		BlockBag: blockBagOrMap,
		BlockMap: blockBagOrMap,
		BlockWrap: function () {
			this.block.verify();
		},
		Call: function () {
			this.called.verify();
			vm(this.args);
		},
		CaseDo: verifyCase,
		CaseDoPart: verifyCasePart,
		CaseVal: verifyCase,
		CaseValPart: verifyCasePart,
		// Only reach here for in/out condition
		Debug: function () {
			verifyLines([this]);
		},
		EndLoop: function () {
			var _this4 = this;

			(0, _UOp.ifElse)(opLoop, function (_) {
				return setEndLoop(_this4, _);
			}, function () {
				return cx.fail(_this4.loc, 'Not in a loop.');
			});
		},
		Fun: function () {
			var _this5 = this;

			withBlockLocals(function () {
				cx.check(_this5.opResDeclare === null || _this5.block instanceof _Expression.BlockVal, _this5.loc, 'Function with return condition must return something.');
				_this5.args.forEach(function (arg) {
					return vop(arg.opType);
				});
				withInGenerator(_this5.isGenerator, function () {
					const allArgs = (0, _UBag.cat)(_this5.args, _this5.opRestArg);
					allArgs.forEach(function (_) {
						return registerLocal(_);
					});
					plusLocals(allArgs, function () {
						vop(_this5.opIn);
						_this5.block.verify();
						(0, _UOp.opEach)(_this5.opResDeclare, function (_) {
							_.verify();
							registerLocal(_);
						});
						const verifyOut = function () {
							return (0, _UOp.opEach)(_this5.opOut, function (_) {
								return _.verify();
							});
						};
						(0, _UOp.ifElse)(_this5.opResDeclare, function (rd) {
							return plusLocals([rd], verifyOut);
						}, verifyOut);
					});
				});
			});
		},
		GlobalAccess: function () {},
		Lazy: function () {
			var _this6 = this;

			withBlockLocals(function () {
				return _this6.value.verify();
			});
		},
		LocalAccess: function () {
			var _this7 = this;

			const declare = locals.get(this.name);
			cx.check(declare !== undefined, this.loc, function () {
				return 'No such local ' + (0, _CompileError.code)(_this7.name) + '.\nLocals are:\n' + (0, _CompileError.code)((0, _UUtil.mapKeys)(locals).join(' ')) + '.';
			});
			vr.accessToLocal.set(this, declare);
			accessLocal(declare, this, isInDebug);
		},
		Loop: function () {
			var _this8 = this;

			withInLoop(this, function () {
				return _this8.block.verify();
			});
		},
		// Adding LocalDeclares to the available locals is done by Fun or lineNewLocals.
		LocalDeclare: function () {
			vop(this.opType);
		},
		NumberLiteral: function () {},
		MapEntry: function () {
			this.key.verify();
			this.val.verify();
		},
		Member: function () {
			this.object.verify();
		},
		Module: function () {
			var _this9 = this;

			const useLocals = verifyUses(this.uses, this.debugUses);
			plusLocals(useLocals, function () {
				var _verifyLines3 = verifyLines(_this9.lines);

				const newLocals = _verifyLines3.newLocals;

				_this9.exports.forEach(function (ex) {
					return accessLocalForReturn(ex, _this9);
				});
				(0, _UOp.opEach)(_this9.opDefaultExport, function (_) {
					return plusLocals(newLocals, function () {
						return _.verify();
					});
				});
			});

			const exports = (0, _UUtil.newSet)(this.exports);
			const markExportLines = function (line) {
				if (line instanceof _Expression.Assign && exports.has(line.assignee) || line instanceof _Expression.AssignDestructure && line.assignees.some(function (_) {
					return exports.has(_);
				})) vr.exportAssigns.add(line);else if (line instanceof _Expression.Debug) line.lines.forEach(markExportLines);
			};
			this.lines.forEach(markExportLines);
		},
		ObjSimple: function () {
			const keys = new Set();
			this.pairs.forEach(function (pair) {
				cx.check(!keys.has(pair.key), pair.loc, function () {
					return 'Duplicate key ' + pair.key;
				});
				keys.add(pair.key);
				pair.value.verify();
			});
		},
		Quote: function () {
			this.parts.forEach(function (_) {
				if (typeof _ !== 'string') _.verify();
			});
		},
		SpecialDo: function () {},
		SpecialVal: function () {},
		Splat: function () {
			this.splatted.verify();
		},
		Yield: function () {
			cx.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yielded.verify();
		},
		YieldTo: function () {
			cx.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yieldedTo.verify();
		}
	});

	function blockBagOrMap() {
		var _verifyLines4 = verifyLines(this.lines);

		const listMapLength = _verifyLines4.listMapLength;

		vr.blockToLength.set(this, listMapLength);
	}

	function verifyCase() {
		var _this10 = this;

		const newLocals = [];
		(0, _UOp.opEach)(this.opCased, function (_) {
			registerLocal(_.assignee);
			_.verify();
			newLocals.push(_.assignee);
		});
		plusLocals(newLocals, function () {
			vm(_this10.parts);
			vop(_this10.opElse);
		});
	}

	function verifyCasePart() {
		var _this11 = this;

		if (this.test instanceof _Expression.Pattern) {
			this.test.type.verify();
			this.test.patterned.verify();
			vm(this.test.locals);
			this.test.locals.forEach(registerLocal);
			plusLocals(this.test.locals, function () {
				return _this11.result.verify();
			});
		} else {
			this.test.verify();
			this.result.verify();
		}
	}

	const verifyUses = function (uses, debugUses) {
		const useLocals = [];
		const verifyUse = function (use) {
			use.used.forEach(useLocal);
			(0, _UOp.opEach)(use.opUseDefault, useLocal);
		},
		      useLocal = function (_) {
			registerLocal(_);
			useLocals.push(_);
		};
		uses.forEach(function (use) {
			if (!(use instanceof _Expression.UseDo)) verifyUse(use);
		});
		withInDebug(true, function () {
			return debugUses.forEach(verifyUse);
		});
		return useLocals;
	},
	      verifyLines = function (lines) {
		const newLocals = [];
		// First, get locals for the whole block.
		const getLineLocals = function (line) {
			if (line instanceof _Expression.Debug) withInDebug(true, function () {
				return line.lines.forEach(getLineLocals);
			});else {
				const news = lineNewLocals(line);
				news.forEach(registerLocal);
				newLocals.push.apply(newLocals, _toConsumableArray(news));
			}
		};

		lines.forEach(getLineLocals);

		const thisBlockLocalNames = new Set();
		const shadowed = new Map();

		let listMapLength = 0;

		const verifyLine = function (line) {
			if (line instanceof _Expression.Debug)
				// TODO: Do anything in this situation?
				// cx.check(!inDebug, line.loc, 'Redundant `debug`.')
				withInDebug(true, function () {
					return line.lines.forEach(verifyLine);
				});else {
				verifyIsStatement(line);
				lineNewLocals(line).forEach(function (l) {
					const got = locals.get(l.name);
					if (got !== undefined) {
						cx.check(!thisBlockLocalNames.has(l.name), l.loc, function () {
							return 'A local ' + (0, _CompileError.code)(l.name) + ' is already in this block.';
						});
						shadowed.set(l.name, got);
					}
					locals.set(l.name, l);
					thisBlockLocalNames.add(l.name);
				});
				if (line instanceof _Expression.BagEntry || line instanceof _Expression.MapEntry) {
					setEntryIndex(line, listMapLength);
					listMapLength = listMapLength + 1;
				}
				line.verify();
			}
		};

		plusPendingBlockLocals(newLocals, function () {
			return lines.forEach(verifyLine);
		});

		newLocals.forEach(function (l) {
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});

		return { newLocals: newLocals, listMapLength: listMapLength };
	},
	      verifyIsStatement = function (line) {
		const isStatement = line instanceof _Expression.Do || line instanceof _Expression.Call || line instanceof _Expression.Yield || line instanceof _Expression.YieldTo || line instanceof _Expression.BagEntry || line instanceof _Expression.MapEntry;
		cx.check(isStatement, line.loc, 'Expression in statement position.');
	},
	      lineNewLocals = function (line) {
		return line instanceof _Expression.Assign ? [line.assignee] : line instanceof _Expression.AssignDestructure ? line.assignees : [];
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3ZlcmlmeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7a0JBbUh3QixNQUFNOzs7Ozs7OztBQTFHOUIsT0FBTSxFQUFFLEdBQUcsVUFBQSxFQUFFO1NBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7VUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO0dBQUEsQ0FBQztFQUFBLENBQUE7QUFDNUMsT0FBTSxHQUFHLEdBQUcsVUFBQSxFQUFFO1NBQUksU0FMRCxNQUFNLEVBS0UsRUFBRSxFQUFFLFVBQUEsQ0FBQztVQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUU7R0FBQSxDQUFDO0VBQUEsQ0FBQTs7QUFFN0MsS0FDQyxFQUFFLEVBQ0YsTUFBTTs7O0FBR04sbUJBQWtCLEVBQ2xCLFNBQVMsRUFDVCxhQUFhLEVBQ2IsTUFBTSxFQUNOLEVBQUUsQ0FBQTs7QUFFSCxPQUNDLElBQUksR0FBRyxVQUFBLEdBQUcsRUFBSTtBQUNiLElBQUUsR0FBRyxHQUFHLENBQUE7QUFDUixRQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtBQUNsQixvQkFBa0IsR0FBRyxFQUFFLENBQUE7QUFDdkIsV0FBUyxHQUFHLEtBQUssQ0FBQTtBQUNqQixlQUFhLEdBQUcsS0FBSyxDQUFBO0FBQ3JCLFFBQU0sR0FBRyxJQUFJLENBQUE7QUFDYixJQUFFLEdBQUcscUJBQW1CLENBQUE7RUFDeEI7OztBQUVELE9BQU0sR0FBRyxZQUFNO0FBQ2QsUUFBTSxHQUFHLGtCQUFrQixHQUFHLE1BQU0sR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFBO0VBQ3JEO09BRUQsZUFBZSxHQUFHLFVBQUMsY0FBYyxFQUFFLEdBQUcsRUFBSztBQUMxQyxRQUFNLENBQUMsR0FBRyxhQUFhLENBQUE7QUFDdkIsZUFBYSxHQUFHLGNBQWMsQ0FBQTtBQUM5QixLQUFHLEVBQUUsQ0FBQTtBQUNMLGVBQWEsR0FBRyxDQUFDLENBQUE7RUFDakI7T0FFRCxVQUFVLEdB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LGFBQWEsRUFBRSxDQUFBO0VBQ25DO09BRUQsaUJBQWlCLEdBQUcsVUFBQSxJQUFJLEVBQUk7QUFDM0IsUUFBTSxXQUFXLEdBQ2hCLElBQUksd0JBelhvRCxFQUFFLEFBeVh4QyxJQUNsQixJQUFJLHdCQTFYdUMsSUFBSSxBQTBYM0IsSUFDcEIsSUFBSSx3QkExWHFDLEtBQUssQUEwWHpCLElBQ3JCLElBQUksd0JBM1g0QyxPQUFPLEFBMlhoQyxJQUN2QixJQUFJLHdCQTdYd0QsUUFBUSxBQTZYNUMsSUFDeEIsSUFBSSx3QkE3WFcsUUFBUSxBQTZYQyxDQUFBO0FBQ3pCLElBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsbUNBQW1DLENBQUMsQ0FBQTtFQUNwRTtPQUVELGFBQWEsR0FBRyxVQUFBLElBQUk7U0FDbkIsSUFBSSx3QkFuWUcsTUFBTSxBQW1ZUyxHQUNyQixDQUFFLElBQUksQ0FBQyxRQUFRLENBQUUsR0FDakIsSUFBSSx3QkFyWVUsaUJBQWlCLEFBcVlFLEdBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQ2QsRUFBRztFQUFBLENBQUEiLCJmaWxlIjoibWV0YS9jb21waWxlL3ByaXZhdGUvdmVyaWZ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29kZSB9IGZyb20gJy4uL0NvbXBpbGVFcnJvcidcbmltcG9ydCAqIGFzIEVFeHBvcnRzIGZyb20gJy4uL0V4cHJlc3Npb24nXG5pbXBvcnQgeyBBc3NpZ24sIEFzc2lnbkRlc3RydWN0dXJlLCBCbG9ja1ZhbCwgQ2FsbCwgRGVidWcsIERvLCBCYWdFbnRyeSxcblx0TG9jYWxEZWNsYXJlUmVzLCBNYXBFbnRyeSwgUGF0dGVybiwgVXNlRG8sIFlpZWxkLCBZaWVsZFRvIH0gZnJvbSAnLi4vRXhwcmVzc2lvbidcbmltcG9ydCB7IGNhdCwgaGVhZCwgaXNFbXB0eSB9IGZyb20gJy4vVS9CYWcnXG5pbXBvcnQgeyBpZkVsc2UsIG9wRWFjaCB9IGZyb20gJy4vVS9vcCdcbmltcG9ydCB7IGltcGxlbWVudE1hbnksIG1hcEtleXMsIG5ld1NldCB9IGZyb20gJy4vVS91dGlsJ1xuaW1wb3J0IFZlcmlmeVJlc3VsdHMsIHsgTG9jYWxJbmZvIH0gZnJvbSAnLi9WZXJpZnlSZXN1bHRzJ1xuXG5jb25zdCB2bSA9IGVzID0+IGVzLmZvckVhY2goZSA9PiBlLnZlcmlmeSgpKVxuY29uc3Qgdm9wID0gb3AgPT4gb3BFYWNoKG9wLCBfID0+IF8udmVyaWZ5KCkpXG5cbmxldFxuXHRjeCxcblx0bG9jYWxzLFxuXHQvLyBMb2NhbHMgZm9yIHRoaXMgYmxvY2suXG5cdC8vIFJlcGxhY2VzIGBsb2NhbHNgIHdoZW4gZW50ZXJpbmcgaW50byBzdWItZnVuY3Rpb24uXG5cdHBlbmRpbmdCbG9ja0xvY2Fscyxcblx0aXNJbkRlYnVnLFxuXHRpc0luR2VuZXJhdG9yLFxuXHRvcExvb3AsXG5cdHZyXG5cbmNvbnN0XG5cdGluaXQgPSBfY3ggPT4ge1xuXHRcdGN4ID0gX2N4XG5cdFx0bG9jYWxzID0gbmV3IE1hcCgpXG5cdFx0cGVuZGluZ0Jsb2NrTG9jYWxzID0gW11cblx0XHRpc0luRGVidWcgPSBmYWxzZVxuXHRcdGlzSW5HZW5lcmF0b3IgPSBmYWxzZVxuXHRcdG9wTG9vcCA9IG51bGxcblx0XHR2ciA9IG5ldyBWZXJpZnlSZXN1bHRzKClcblx0fSxcblx0Ly8gUmVsZWFzZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdHVuaW5pdCA9ICgpID0+IHtcblx0XHRsb2NhbHMgPSBwZW5kaW5nQmxvY2tMb2NhbHMgPSBvcExvb3AgPSB2ciA9IHVuZGVmaW5lZFxuXHR9LFxuXG5cdHdpdGhJbkdlbmVyYXRvciA9IChfaXNJbkdlbmVyYXRvciwgZnVuKSA9PiB7XG5cdFx0Y29uc3QgZyA9IGlzSW5HZW5lcmF0b3Jcblx0XHRpc0luR2VuZXJhdG9yID0gX2lzSW5HZW5lcmF0b3Jcblx0XHRmdW4oKVxuXHRcdGlzSW5HZW5lcmF0b3IgPSBnXG5cdH0sXG5cblx0cGx1c0xvY2FscyA9IChhZGRlZExvY2FscywgZnVuKSA9PiB7XG5cdFx0Y29uc3Qgc2hhZG93ZWQgPSBuZXcgTWFwKClcblx0XHRhZGRlZExvY2Fscy5mb3JFYWNoKGwgPT4ge1xuXHRcdFx0Y29uc3QgZ290ID0gbG9jYWxzLmdldChsLm5hbWUpXG5cdFx0XHRpZiAoZ290ICE9PSB1bmRlZmluZWQpXG5cdFx0XHRcdHNoYWRvd2VkLnNldChsLm5hbWUsIGdvdClcblx0XHRcdGxvY2Fscy5zZXQobC5uYW1lLCBsKVxuXHRcdH0pXG5cdFx0ZnVuKClcblx0XHRhZGRlZExvY2Fscy5mb3JFYWNoKGwgPT4ge1xuXHRcdFx0Y29uc3QgcyA9IHNoYWRvd2VkLmdldChsLm5hbWUpXG5cdFx0XHRpZiAocyA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRsb2NhbHMuZGVsZXRlKGwubmFtZSlcblx0XHRcdGVsc2Vcblx0XHRcdFx0bG9jYWxzLnNldChsLm5hbWUsIHMpXG5cdFx0fSlcblx0fSxcblxuXHRwbHVzUGVuZGluZ0Jsb2NrTG9jYWxzID0gKHBlbmRpbmcsIGZ1bikgPT4ge1xuXHRcdGNvbnN0IG9sZExlbmd0aCA9IHBlbmRpbmdCbG9ja0xvY2Fscy5sZW5ndGhcblx0XHRwZW5kaW5nQmxvY2tMb2NhbHMucHVzaCguLi5wZW5kaW5nKVxuXHRcdGZ1bigpXG5cdFx0d2hpbGUgKHBlbmRpbmdCbG9ja0xvY2Fscy5sZW5ndGggPiBvbGRMZW5ndGgpXG5cdFx0XHRwZW5kaW5nQmxvY2tMb2NhbHMucG9wKClcblx0fSxcblxuXHR3aXRoSW5Mb29wID0gKGxvb3AsIGZ1bikgPT4ge1xuXHRcdGNvbnN0IGwgPSBvcExvb3Bcblx0XHRvcExvb3AgPSBsb29wXG5cdFx0ZnVuKClcblx0XHRvcExvb3AgPSBsXG5cdH0sXG5cblx0d2l0aEluRGVidWcgPSAoX2lzSW5EZWJ1ZywgZnVuKSA9PiB7XG5cdFx0Y29uc3QgZCA9IGlzSW5EZWJ1Z1xuXHRcdGlzSW5EZWJ1ZyA9IF9pc0luRGVidWdcblx0XHRmdW4oKVxuXHRcdGlzSW5EZWJ1ZyA9IGRcblx0fSxcblxuXHR3aXRoQmxvY2tMb2NhbHMgPSBmdW4gPT4ge1xuXHRcdGNvbnN0IGJsID0gcGVuZGluZ0Jsb2NrTG9jYWxzXG5cdFx0cGVuZGluZ0Jsb2NrTG9jYWxzID0gW11cblx0XHRwbHVzTG9jYWxzKGJsLCBmdW4pXG5cdFx0cGVuZGluZ0Jsb2NrTG9jYWxzID0gYmxcblx0fSxcblxuXHRhY2Nlc3NMb2NhbCA9IChkZWNsYXJlLCBhY2Nlc3MsIGlzRGVidWdBY2Nlc3MpID0+XG5cdFx0X2FkZEFjY2Vzcyh2ci5sb2NhbFRvSW5mby5nZXQoZGVjbGFyZSksIGFjY2VzcywgaXNEZWJ1Z0FjY2VzcyksXG5cdGFjY2Vzc0xvY2FsRm9yUmV0dXJuID0gKGRlY2xhcmUsIGFjY2VzcykgPT4ge1xuXHRcdGNvbnN0IGluZm8gPSB2ci5sb2NhbFRvSW5mby5nZXQoZGVjbGFyZSlcblx0XHRfYWRkQWNjZXNzKGluZm8sIGFjY2VzcywgaW5mby5pc0luRGVidWcpXG5cdH0sXG5cdF9hZGRBY2Nlc3MgPSAobG9jYWxJbmZvLCBhY2Nlc3MsIGlzRGVidWdBY2Nlc3MpID0+XG5cdFx0KGlzRGVidWdBY2Nlc3MgPyBsb2NhbEluZm8uZGVidWdBY2Nlc3NlcyA6IGxvY2FsSW5mby5ub25EZWJ1Z0FjY2Vzc2VzKS5wdXNoKGFjY2VzcyksXG5cblxuXHQvLyBWciBzZXR0ZXJzXG5cdHNldEVuZExvb3AgPSAoZW5kTG9vcCwgbG9vcCkgPT4ge1xuXHRcdHZyLmVuZExvb3BUb0xvb3Auc2V0KGVuZExvb3AsIGxvb3ApXG5cdH0sXG5cblx0cmVnaXN0ZXJMb2NhbCA9IGxvY2FsID0+IHtcblx0XHR2ci5sb2NhbFRvSW5mby5zZXQobG9jYWwsIExvY2FsSW5mbyhpc0luRGVidWcsIFtdLCBbXSkpXG5cdH0sXG5cblx0c2V0RW50cnlJbmRleCA9IChsaXN0TWFwRW50cnksIGluZGV4KSA9PiB7XG5cdFx0dnIuZW50cnlUb0luZGV4LnNldChsaXN0TWFwRW50cnksIGluZGV4KVxuXHR9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeShjeCwgZSkge1xuXHRpbml0KGN4KVxuXHRlLnZlcmlmeSgpXG5cdHZlcmlmeUxvY2FsVXNlKClcblx0Y29uc3Qgb3V0ID0gdnJcblx0dW5pbml0KClcblx0cmV0dXJuIG91dFxufVxuXG5jb25zdCB2ZXJpZnlMb2NhbFVzZSA9ICgpID0+IHtcblx0dnIubG9jYWxUb0luZm8uZm9yRWFjaCgoaW5mbywgbG9jYWwpID0+IHtcblx0XHRpZiAoIShsb2NhbCBpbnN0YW5jZW9mIExvY2FsRGVjbGFyZVJlcykpIHtcblx0XHRcdGNvbnN0IG5vTm9uRGVidWcgPSBpc0VtcHR5KGluZm8ubm9uRGVidWdBY2Nlc3Nlcylcblx0XHRcdGlmIChub05vbkRlYnVnICYmIGlzRW1wdHkoaW5mby5kZWJ1Z0FjY2Vzc2VzKSlcblx0XHRcdFx0Y3gud2Fybihsb2NhbC5sb2MsICgpID0+IGBVbnVzZWQgbG9jYWwgdmFyaWFibGUgJHtjb2RlKGxvY2FsLm5hbWUpfS5gKVxuXHRcdFx0ZWxzZSBpZiAoaW5mby5pc0luRGVidWcpXG5cdFx0XHRcdGN4Lndhcm5JZighbm9Ob25EZWJ1ZywgKCkgPT4gaGVhZChpbmZvLm5vbkRlYnVnQWNjZXNzZXMpLmxvYywgKCkgPT5cblx0XHRcdFx0XHRgRGVidWctb25seSBsb2NhbCAke2NvZGUobG9jYWwubmFtZSl9IHVzZWQgb3V0c2lkZSBvZiBkZWJ1Zy5gKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRjeC53YXJuSWYobm9Ob25EZWJ1ZywgbG9jYWwubG9jLCAoKSA9PlxuXHRcdFx0XHRcdGBMb2NhbCAke2NvZGUobG9jYWwubmFtZSl9IHVzZWQgb25seSBpbiBkZWJ1Zy5gKVxuXHRcdH1cblx0fSlcbn1cblxuaW1wbGVtZW50TWFueShFRXhwb3J0cywgJ3ZlcmlmeScsIHtcblx0QXNzaWduKCkge1xuXHRcdGNvbnN0IGRvViA9ICgpID0+IHtcblx0XHRcdHRoaXMuYXNzaWduZWUudmVyaWZ5KClcblx0XHRcdHRoaXMudmFsdWUudmVyaWZ5KClcblx0XHR9XG5cdFx0aWYgKHRoaXMuYXNzaWduZWUuaXNMYXp5KVxuXHRcdFx0d2l0aEJsb2NrTG9jYWxzKGRvVilcblx0XHRlbHNlXG5cdFx0XHRkb1YoKVxuXHR9LFxuXHRBc3NpZ25EZXN0cnVjdHVyZSgpIHtcblx0XHR0aGlzLnZhbHVlLnZlcmlmeSgpXG5cdFx0dm0odGhpcy5hc3NpZ25lZXMpXG5cdH0sXG5cdEJhZ0VudHJ5KCkgeyB0aGlzLnZhbHVlLnZlcmlmeSgpIH0sXG5cdEJhZ1NpbXBsZSgpIHsgdm0odGhpcy5wYXJ0cykgfSxcblx0QmxvY2tEbygpIHsgdmVyaWZ5TGluZXModGhpcy5saW5lcykgfSxcblx0QmxvY2tXaXRoUmV0dXJuKCkge1xuXHRcdGNvbnN0IHsgbmV3TG9jYWxzIH0gPSB2ZXJpZnlMaW5lcyh0aGlzLmxpbmVzKVxuXHRcdHBsdXNMb2NhbHMobmV3TG9jYWxzLCAoKSA9PiB0aGlzLnJldHVybmVkLnZlcmlmeSgpKVxuXHR9LFxuXHRCbG9ja09iaigpIHtcblx0XHRjb25zdCB7IG5ld0xvY2FscyB9ID0gdmVyaWZ5TGluZXModGhpcy5saW5lcylcblx0XHR0aGlzLmtleXMuZm9yRWFjaChfID0+IGFjY2Vzc0xvY2FsRm9yUmV0dXJuKF8sIHRoaXMpKVxuXHRcdG9wRWFjaCh0aGlzLm9wT2JqZWQsIF8gPT4gcGx1c0xvY2FscyhuZXdMb2NhbHMsICgpID0+IF8udmVyaWZ5KCkpKVxuXHR9LFxuXHRCbG9ja0JhZzogYmxvY2tCYWdPck1hcCxcblx0QmxvY2tNYXA6IGJsb2NrQmFnT3JNYXAsXG5cdEJsb2NrV3JhcCgpIHtcblx0XHR0aGlzLmJsb2NrLnZlcmlmeSgpXG5cdH0sXG5cdENhbGwoKSB7XG5cdFx0dGhpcy5jYWxsZWQudmVyaWZ5KClcblx0XHR2bSh0aGlzLmFyZ3MpXG5cdH0sXG5cdENhc2VEbzogdmVyaWZ5Q2FzZSxcblx0Q2FzZURvUGFydDogdmVyaWZ5Q2FzZVBhcnQsXG5cdENhc2VWYWw6IHZlcmlmeUNhc2UsXG5cdENhc2VWYWxQYXJ0OiB2ZXJpZnlDYXNlUGFydCxcblx0Ly8gT25seSByZWFjaCBoZXJlIGZvciBpbi9vdXQgY29uZGl0aW9uXG5cdERlYnVnKCkgeyB2ZXJpZnlMaW5lcyhbIHRoaXMgXSkgfSxcblx0RW5kTG9vcCgpIHtcblx0XHRpZkVsc2Uob3BMb29wLCBfID0+IHNldEVuZExvb3AodGhpcywgXyksICgpID0+IGN4LmZhaWwodGhpcy5sb2MsICdOb3QgaW4gYSBsb29wLicpKVxuXHR9LFxuXHRGdW4oKSB7XG5cdFx0d2l0aEJsb2NrTG9jYWxzKCgpID0+IHtcblx0XHRcdGN4LmNoZWNrKHRoaXMub3BSZXNEZWNsYXJlID09PSBudWxsIHx8IHRoaXMuYmxvY2sgaW5zdGFuY2VvZiBCbG9ja1ZhbCwgdGhpcy5sb2MsXG5cdFx0XHRcdCdGdW5jdGlvbiB3aXRoIHJldHVybiBjb25kaXRpb24gbXVzdCByZXR1cm4gc29tZXRoaW5nLicpXG5cdFx0XHR0aGlzLmFyZ3MuZm9yRWFjaChhcmcgPT4gdm9wKGFyZy5vcFR5cGUpKVxuXHRcdFx0d2l0aEluR2VuZXJhdG9yKHRoaXMuaXNHZW5lcmF0b3IsICgpID0+IHtcblx0XHRcdFx0Y29uc3QgYWxsQXJncyA9IGNhdCh0aGlzLmFyZ3MsIHRoaXMub3BSZXN0QXJnKVxuXHRcdFx0XHRhbGxBcmdzLmZvckVhY2goXyA9PiByZWdpc3RlckxvY2FsKF8pKVxuXHRcdFx0XHRwbHVzTG9jYWxzKGFsbEFyZ3MsICgpID0+IHtcblx0XHRcdFx0XHR2b3AodGhpcy5vcEluKVxuXHRcdFx0XHRcdHRoaXMuYmxvY2sudmVyaWZ5KClcblx0XHRcdFx0XHRvcEVhY2godGhpcy5vcFJlc0RlY2xhcmUsIF8gPT4ge1xuXHRcdFx0XHRcdFx0Xy52ZXJpZnkoKVxuXHRcdFx0XHRcdFx0cmVnaXN0ZXJMb2NhbChfKVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0Y29uc3QgdmVyaWZ5T3V0ID0gKCkgPT4gb3BFYWNoKHRoaXMub3BPdXQsIF8gPT4gXy52ZXJpZnkoKSlcblx0XHRcdFx0XHRpZkVsc2UodGhpcy5vcFJlc0RlY2xhcmUsIHJkID0+IHBsdXNMb2NhbHMoWyByZCBdLCB2ZXJpZnlPdXQpLCB2ZXJpZnlPdXQpXG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHRcdH0pXG5cdH0sXG5cdEdsb2JhbEFjY2VzcygpIHsgfSxcblx0TGF6eSgpIHsgd2l0aEJsb2NrTG9jYWxzKCgpID0+IHRoaXMudmFsdWUudmVyaWZ5KCkpIH0sXG5cdExvY2FsQWNjZXNzKCkge1xuXHRcdGNvbnN0IGRlY2xhcmUgPSBsb2NhbHMuZ2V0KHRoaXMubmFtZSlcblx0XHRjeC5jaGVjayhkZWNsYXJlICE9PSB1bmRlZmluZWQsIHRoaXMubG9jLCAoKSA9PlxuXHRcdFx0YE5vIHN1Y2ggbG9jYWwgJHtjb2RlKHRoaXMubmFtZSl9LlxcbkxvY2FscyBhcmU6XFxuJHtjb2RlKG1hcEtleXMobG9jYWxzKS5qb2luKCcgJykpfS5gKVxuXHRcdHZyLmFjY2Vzc1RvTG9jYWwuc2V0KHRoaXMsIGRlY2xhcmUpXG5cdFx0YWNjZXNzTG9jYWwoZGVjbGFyZSwgdGhpcywgaXNJbkRlYnVnKVxuXHR9LFxuXHRMb29wKCkgeyB3aXRoSW5Mb29wKHRoaXMsICgpID0+IHRoaXMuYmxvY2sudmVyaWZ5KCkpIH0sXG5cdC8vIEFkZGluZyBMb2NhbERlY2xhcmVzIHRvIHRoZSBhdmFpbGFibGUgbG9jYWxzIGlzIGRvbmUgYnkgRnVuIG9yIGxpbmVOZXdMb2NhbHMuXG5cdExvY2FsRGVjbGFyZSgpIHsgdm9wKHRoaXMub3BUeXBlKSB9LFxuXHROdW1iZXJMaXRlcmFsKCkgeyB9LFxuXHRNYXBFbnRyeSgpIHtcblx0XHR0aGlzLmtleS52ZXJpZnkoKVxuXHRcdHRoaXMudmFsLnZlcmlmeSgpXG5cdH0sXG5cdE1lbWJlcigpIHsgdGhpcy5vYmplY3QudmVyaWZ5KCkgfSxcblx0TW9kdWxlKCkge1xuXHRcdGNvbnN0IHVzZUxvY2FscyA9IHZlcmlmeVVzZXModGhpcy51c2VzLCB0aGlzLmRlYnVnVXNlcylcblx0XHRwbHVzTG9jYWxzKHVzZUxvY2FscywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgeyBuZXdMb2NhbHMgfSA9IHZlcmlmeUxpbmVzKHRoaXMubGluZXMpXG5cdFx0XHR0aGlzLmV4cG9ydHMuZm9yRWFjaChleCA9PiBhY2Nlc3NMb2NhbEZvclJldHVybihleCwgdGhpcykpXG5cdFx0XHRvcEVhY2godGhpcy5vcERlZmF1bHRFeHBvcnQsIF8gPT4gcGx1c0xvY2FscyhuZXdMb2NhbHMsICgpID0+IF8udmVyaWZ5KCkpKVxuXHRcdH0pXG5cblx0XHRjb25zdCBleHBvcnRzID0gbmV3U2V0KHRoaXMuZXhwb3J0cylcblx0XHRjb25zdCBtYXJrRXhwb3J0TGluZXMgPSBsaW5lID0+IHtcblx0XHRcdGlmIChsaW5lIGluc3RhbmNlb2YgQXNzaWduICYmIGV4cG9ydHMuaGFzKGxpbmUuYXNzaWduZWUpIHx8XG5cdFx0XHRcdGxpbmUgaW5zdGFuY2VvZiBBc3NpZ25EZXN0cnVjdHVyZSAmJiBsaW5lLmFzc2lnbmVlcy5zb21lKF8gPT4gZXhwb3J0cy5oYXMoXykpKVxuXHRcdFx0XHR2ci5leHBvcnRBc3NpZ25zLmFkZChsaW5lKVxuXHRcdFx0ZWxzZSBpZiAobGluZSBpbnN0YW5jZW9mIERlYnVnKVxuXHRcdFx0XHRsaW5lLmxpbmVzLmZvckVhY2gobWFya0V4cG9ydExpbmVzKVxuXHRcdH1cblx0XHR0aGlzLmxpbmVzLmZvckVhY2gobWFya0V4cG9ydExpbmVzKVxuXHR9LFxuXHRPYmpTaW1wbGUoKSB7XG5cdFx0Y29uc3Qga2V5cyA9IG5ldyBTZXQoKVxuXHRcdHRoaXMucGFpcnMuZm9yRWFjaChwYWlyID0+IHtcblx0XHRcdGN4LmNoZWNrKCFrZXlzLmhhcyhwYWlyLmtleSksIHBhaXIubG9jLCAoKSA9PiBgRHVwbGljYXRlIGtleSAke3BhaXIua2V5fWApXG5cdFx0XHRrZXlzLmFkZChwYWlyLmtleSlcblx0XHRcdHBhaXIudmFsdWUudmVyaWZ5KClcblx0XHR9KVxuXHR9LFxuXHRRdW90ZSgpIHtcblx0XHR0aGlzLnBhcnRzLmZvckVhY2goXyA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIF8gIT09ICdzdHJpbmcnKVxuXHRcdFx0XHRfLnZlcmlmeSgpXG5cdFx0fSlcblx0fSxcblx0U3BlY2lhbERvKCkgeyB9LFxuXHRTcGVjaWFsVmFsKCkgeyB9LFxuXHRTcGxhdCgpIHsgdGhpcy5zcGxhdHRlZC52ZXJpZnkoKSB9LFxuXHRZaWVsZCgpIHtcblx0XHRjeC5jaGVjayhpc0luR2VuZXJhdG9yLCB0aGlzLmxvYywgJ0Nhbm5vdCB5aWVsZCBvdXRzaWRlIG9mIGdlbmVyYXRvciBjb250ZXh0Jylcblx0XHR0aGlzLnlpZWxkZWQudmVyaWZ5KClcblx0fSxcblx0WWllbGRUbygpIHtcblx0XHRjeC5jaGVjayhpc0luR2VuZXJhdG9yLCB0aGlzLmxvYywgJ0Nhbm5vdCB5aWVsZCBvdXRzaWRlIG9mIGdlbmVyYXRvciBjb250ZXh0Jylcblx0XHR0aGlzLnlpZWxkZWRUby52ZXJpZnkoKVxuXHR9XG59KVxuXG5mdW5jdGlvbiBibG9ja0JhZ09yTWFwKCkge1xuXHRjb25zdCB7IGxpc3RNYXBMZW5ndGggfSA9IHZlcmlmeUxpbmVzKHRoaXMubGluZXMpXG5cdHZyLmJsb2NrVG9MZW5ndGguc2V0KHRoaXMsIGxpc3RNYXBMZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHZlcmlmeUNhc2UoKSB7XG5cdGNvbnN0IG5ld0xvY2FscyA9IFtdXG5cdG9wRWFjaCh0aGlzLm9wQ2FzZWQsIF8gPT4ge1xuXHRcdHJlZ2lzdGVyTG9jYWwoXy5hc3NpZ25lZSlcblx0XHRfLnZlcmlmeSgpXG5cdFx0bmV3TG9jYWxzLnB1c2goXy5hc3NpZ25lZSlcblx0fSlcblx0cGx1c0xvY2FscyhuZXdMb2NhbHMsICgpID0+IHtcblx0XHR2bSh0aGlzLnBhcnRzKVxuXHRcdHZvcCh0aGlzLm9wRWxzZSlcblx0fSlcbn1cblxuZnVuY3Rpb24gdmVyaWZ5Q2FzZVBhcnQoKSB7XG5cdGlmICh0aGlzLnRlc3QgaW5zdGFuY2VvZiBQYXR0ZXJuKSB7XG5cdFx0dGhpcy50ZXN0LnR5cGUudmVyaWZ5KClcblx0XHR0aGlzLnRlc3QucGF0dGVybmVkLnZlcmlmeSgpXG5cdFx0dm0odGhpcy50ZXN0LmxvY2Fscylcblx0XHR0aGlzLnRlc3QubG9jYWxzLmZvckVhY2gocmVnaXN0ZXJMb2NhbClcblx0XHRwbHVzTG9jYWxzKHRoaXMudGVzdC5sb2NhbHMsICgpID0+IHRoaXMucmVzdWx0LnZlcmlmeSgpKVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudGVzdC52ZXJpZnkoKVxuXHRcdHRoaXMucmVzdWx0LnZlcmlmeSgpXG5cdH1cbn1cblxuY29uc3Rcblx0dmVyaWZ5VXNlcyA9ICh1c2VzLCBkZWJ1Z1VzZXMpID0+IHtcblx0XHRjb25zdCB1c2VMb2NhbHMgPSBbXVxuXHRcdGNvbnN0XG5cdFx0XHR2ZXJpZnlVc2UgPSB1c2UgPT4ge1xuXHRcdFx0XHR1c2UudXNlZC5mb3JFYWNoKHVzZUxvY2FsKVxuXHRcdFx0XHRvcEVhY2godXNlLm9wVXNlRGVmYXVsdCwgdXNlTG9jYWwpXG5cdFx0XHR9LFxuXHRcdFx0dXNlTG9jYWwgPSBfID0+IHtcblx0XHRcdFx0cmVnaXN0ZXJMb2NhbChfKVxuXHRcdFx0XHR1c2VMb2NhbHMucHVzaChfKVxuXHRcdFx0fVxuXHRcdHVzZXMuZm9yRWFjaCh1c2UgPT4ge1xuXHRcdFx0aWYgKCEodXNlIGluc3RhbmNlb2YgVXNlRG8pKSB2ZXJpZnlVc2UodXNlKVxuXHRcdH0pXG5cdFx0d2l0aEluRGVidWcodHJ1ZSwgKCkgPT4gZGVidWdVc2VzLmZvckVhY2godmVyaWZ5VXNlKSlcblx0XHRyZXR1cm4gdXNlTG9jYWxzXG5cdH0sXG5cblx0dmVyaWZ5TGluZXMgPSBsaW5lcyA9PiB7XG5cdFx0Y29uc3QgbmV3TG9jYWxzID0gWyBdXG5cdFx0Ly8gRmlyc3QsIGdldCBsb2NhbHMgZm9yIHRoZSB3aG9sZSBibG9jay5cblx0XHRjb25zdCBnZXRMaW5lTG9jYWxzID0gbGluZSA9PiB7XG5cdFx0XHRpZiAobGluZSBpbnN0YW5jZW9mIERlYnVnKVxuXHRcdFx0XHR3aXRoSW5EZWJ1Zyh0cnVlLCAoKSA9PiBsaW5lLmxpbmVzLmZvckVhY2goZ2V0TGluZUxvY2FscykpXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y29uc3QgbmV3cyA9IGxpbmVOZXdMb2NhbHMobGluZSlcblx0XHRcdFx0bmV3cy5mb3JFYWNoKHJlZ2lzdGVyTG9jYWwpXG5cdFx0XHRcdG5ld0xvY2Fscy5wdXNoKC4uLm5ld3MpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGluZXMuZm9yRWFjaChnZXRMaW5lTG9jYWxzKVxuXG5cdFx0Y29uc3QgdGhpc0Jsb2NrTG9jYWxOYW1lcyA9IG5ldyBTZXQoKVxuXHRcdGNvbnN0IHNoYWRvd2VkID0gbmV3IE1hcCgpXG5cblx0XHRsZXQgbGlzdE1hcExlbmd0aCA9IDBcblxuXHRcdGNvbnN0IHZlcmlmeUxpbmUgPSBsaW5lID0+IHtcblx0XHRcdGlmIChsaW5lIGluc3RhbmNlb2YgRGVidWcpXG5cdFx0XHRcdC8vIFRPRE86IERvIGFueXRoaW5nIGluIHRoaXMgc2l0dWF0aW9uP1xuXHRcdFx0XHQvLyBjeC5jaGVjayghaW5EZWJ1ZywgbGluZS5sb2MsICdSZWR1bmRhbnQgYGRlYnVnYC4nKVxuXHRcdFx0XHR3aXRoSW5EZWJ1Zyh0cnVlLCAoKSA9PiBsaW5lLmxpbmVzLmZvckVhY2godmVyaWZ5TGluZSkpXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0dmVyaWZ5SXNTdGF0ZW1lbnQobGluZSlcblx0XHRcdFx0bGluZU5ld0xvY2FscyhsaW5lKS5mb3JFYWNoKGwgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGdvdCA9IGxvY2Fscy5nZXQobC5uYW1lKVxuXHRcdFx0XHRcdGlmIChnb3QgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Y3guY2hlY2soIXRoaXNCbG9ja0xvY2FsTmFtZXMuaGFzKGwubmFtZSksIGwubG9jLFxuXHRcdFx0XHRcdFx0XHQoKSA9PiBgQSBsb2NhbCAke2NvZGUobC5uYW1lKX0gaXMgYWxyZWFkeSBpbiB0aGlzIGJsb2NrLmApXG5cdFx0XHRcdFx0XHRzaGFkb3dlZC5zZXQobC5uYW1lLCBnb3QpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxvY2Fscy5zZXQobC5uYW1lLCBsKVxuXHRcdFx0XHRcdHRoaXNCbG9ja0xvY2FsTmFtZXMuYWRkKGwubmFtZSlcblx0XHRcdFx0fSlcblx0XHRcdFx0aWYgKGxpbmUgaW5zdGFuY2VvZiBCYWdFbnRyeSB8fCBsaW5lIGluc3RhbmNlb2YgTWFwRW50cnkpIHtcblx0XHRcdFx0XHRzZXRFbnRyeUluZGV4KGxpbmUsIGxpc3RNYXBMZW5ndGgpXG5cdFx0XHRcdFx0bGlzdE1hcExlbmd0aCA9IGxpc3RNYXBMZW5ndGggKyAxXG5cdFx0XHRcdH1cblx0XHRcdFx0bGluZS52ZXJpZnkoKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHBsdXNQZW5kaW5nQmxvY2tMb2NhbHMobmV3TG9jYWxzLCAoKSA9PiBsaW5lcy5mb3JFYWNoKHZlcmlmeUxpbmUpKVxuXG5cdFx0bmV3TG9jYWxzLmZvckVhY2gobCA9PiB7XG5cdFx0XHRjb25zdCBzID0gc2hhZG93ZWQuZ2V0KGwubmFtZSlcblx0XHRcdGlmIChzID09PSB1bmRlZmluZWQpXG5cdFx0XHRcdGxvY2Fscy5kZWxldGUobC5uYW1lKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRsb2NhbHMuc2V0KGwubmFtZSwgcylcblx0XHR9KVxuXG5cdFx0cmV0dXJuIHsgbmV3TG9jYWxzLCBsaXN0TWFwTGVuZ3RoIH1cblx0fSxcblxuXHR2ZXJpZnlJc1N0YXRlbWVudCA9IGxpbmUgPT4ge1xuXHRcdGNvbnN0IGlzU3RhdGVtZW50ID1cblx0XHRcdGxpbmUgaW5zdGFuY2VvZiBEbyB8fFxuXHRcdFx0bGluZSBpbnN0YW5jZW9mIENhbGwgfHxcblx0XHRcdGxpbmUgaW5zdGFuY2VvZiBZaWVsZCB8fFxuXHRcdFx0bGluZSBpbnN0YW5jZW9mIFlpZWxkVG8gfHxcblx0XHRcdGxpbmUgaW5zdGFuY2VvZiBCYWdFbnRyeSB8fFxuXHRcdFx0bGluZSBpbnN0YW5jZW9mIE1hcEVudHJ5XG5cdFx0Y3guY2hlY2soaXNTdGF0ZW1lbnQsIGxpbmUubG9jLCAnRXhwcmVzc2lvbiBpbiBzdGF0ZW1lbnQgcG9zaXRpb24uJylcblx0fSxcblxuXHRsaW5lTmV3TG9jYWxzID0gbGluZSA9PlxuXHRcdGxpbmUgaW5zdGFuY2VvZiBBc3NpZ24gP1xuXHRcdFx0WyBsaW5lLmFzc2lnbmVlIF0gOlxuXHRcdFx0bGluZSBpbnN0YW5jZW9mIEFzc2lnbkRlc3RydWN0dXJlID9cblx0XHRcdGxpbmUuYXNzaWduZWVzIDpcblx0XHRcdFsgXVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=