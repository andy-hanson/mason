if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', '../CompileError', '../Expression', './U/Bag', './U/Op', './U/util', './Vr'], function (exports, module, _CompileError, _Expression, _UBag, _UOp, _UUtil, _Vr) {
	'use strict';

	module.exports = verify;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	var _Vr2 = _interopRequire(_Vr);

	const vm = function (es) {
		return es.forEach(function (e) {
			return e.verify();
		});
	};

	let cx, locals,
	// Locals for this block.
	// Replaces `locals` when entering into sub-function.
	pendingBlockLocals, isInDebug, isInGenerator, opLoop, vr;

	const init = function (_cx) {
		cx = _cx;
		locals = new Map();
		pendingBlockLocals = [];
		isInDebug = false;
		isInGenerator = false;
		opLoop = [];
		vr = new _Vr2();
	},
	     
	// Release for garbage collection
	uninit = function () {
		locals = pendingBlockLocals = opLoop = vr = undefined;
	},
	      withInGenerator = function (_isInGenerator, fun) {
		const g = isInGenerator;
		isInGenerator = _isInGenerator;
		fun();
		isInGenerator = g;
	},
	      plusLocals = function (addedLocals, fun) {
		const shadowed = new Map();
		addedLocals.forEach(function (l) {
			const got = locals.get(l.name);
			if (got !== undefined) shadowed.set(l.name, got);
			locals.set(l.name, l);
		});
		fun();
		addedLocals.forEach(function (l) {
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});
	},
	      plusPendingBlockLocals = function (pending, fun) {
		const oldLength = pendingBlockLocals.length;
		pendingBlockLocals.push.apply(pendingBlockLocals, _toConsumableArray(pending));
		fun();
		while (pendingBlockLocals.length > oldLength) pendingBlockLocals.pop();
	},
	      withInLoop = function (loop, fun) {
		const l = opLoop;
		opLoop = _UOp.some(loop);
		fun();
		opLoop = l;
	},
	      withInDebug = function (_isInDebug, fun) {
		const d = isInDebug;
		isInDebug = _isInDebug;
		fun();
		isInDebug = d;
	},
	      withBlockLocals = function (fun) {
		const bl = pendingBlockLocals;
		pendingBlockLocals = [];
		plusLocals(bl, fun);
		pendingBlockLocals = bl;
	},
	     

	// Vr setters
	setEndLoop = function (endLoop, loop) {
		vr.endLoopToLoop.set(endLoop, loop);
	},
	      registerLocal = function (local) {
		vr.localToInfo.set(local, _Vr.VrLocalInfo(isInDebug, [], []));
	},
	      setEntryIndex = function (listMapEntry, index) {
		vr.entryToIndex.set(listMapEntry, index);
	},
	      setListMapLength = function (returner, length) {
		vr.returnToLength.set(returner, length);
	};

	function verify(cx, e) {
		init(cx);
		e.verify();
		verifyLocalUse();
		const out = vr;
		uninit();
		return out;
	}

	const verifyLocalUse = function () {
		vr.localToInfo.forEach(function (info, local) {
			const noNonDebug = _UBag.isEmpty(info.nonDebugAccesses);
			if (noNonDebug && _UBag.isEmpty(info.debugAccesses)) cx.warnIf(!local.okToNotUse, local.loc, function () {
				return 'Unused local variable ' + _CompileError.code(local.name) + '.';
			});else if (info.isInDebug) cx.warnIf(!noNonDebug, function () {
				return _UBag.head(info.nonDebugAccesses).loc;
			}, function () {
				return 'Debug-only local ' + _CompileError.code(local.name) + ' used outside of debug.';
			});else cx.warnIf(!local.okToNotUse && noNonDebug, local.loc, function () {
				return 'Local ' + _CompileError.code(local.name) + ' used only in debug.';
			});
		});
	};

	_UUtil.implementMany(_Expression, 'verify', {
		Assign: function () {
			var _this = this;

			const doV = function () {
				_this.assignee.verify();
				_this.value.verify();
			};
			if (this.assignee.isLazy) withBlockLocals(doV);else doV();
		},
		BlockDo: function () {
			verifyLines(this.lines);
		},
		BlockVal: function () {
			var _this2 = this;

			var _verifyLines = verifyLines(this.lines);

			const newLocals = _verifyLines.newLocals;
			const listMapLength = _verifyLines.listMapLength;

			if (this.returned instanceof _Expression.ListReturn || this.returned instanceof _Expression.MapReturn) setListMapLength(this.returned, listMapLength);else _UUtil.assert(listMapLength === 0);
			plusLocals(newLocals, function () {
				return _this2.returned.verify();
			});
		},
		BlockWrap: function () {
			this.block.verify();
		},
		CaseDo: verifyCase,
		CaseVal: verifyCase,
		// Only reach here for in/out condition
		Debug: function () {
			verifyLines([this]);
		},
		EndLoop: function () {
			var _this3 = this;

			_UOp.ifElse(opLoop, function (loop) {
				return setEndLoop(_this3, loop);
			}, function () {
				return cx.fail(_this3.loc, 'Not in a loop.');
			});
		},
		Fun: function () {
			var _this4 = this;

			withBlockLocals(function () {
				cx.check(_UBag.isEmpty(_this4.opResDeclare) || _this4.block instanceof _Expression.BlockVal, _this4.loc, 'Function with return condition must return something.');
				_this4.args.forEach(function (arg) {
					return vm(arg.opType);
				});
				withInGenerator(_this4.isGenerator, function () {
					const allArgs = _this4.args.concat(_this4.opRestArg);
					allArgs.forEach(function (_) {
						return registerLocal(_);
					});
					plusLocals(allArgs, function () {
						vm(_this4.opIn);
						_this4.block.verify();
						_this4.opResDeclare.forEach(function (rd) {
							rd.verify();
							registerLocal(rd);
						});
						_this4.opOut.forEach(function (o) {
							return plusLocals(_this4.opResDeclare, function () {
								return o.verify();
							});
						});
					});
				});
			});
		},
		LocalAccess: function () {
			const local = locals.get(this.name);
			if (local !== undefined) {
				vr.accessToLocal.set(this, local);
				const info = vr.localToInfo.get(local);
				const accesses = isInDebug ? info.debugAccesses : info.nonDebugAccesses;
				accesses.push(this);
			} else cx.fail(this.loc, 'Could not find local or global ' + _CompileError.code(this.name) + '.\n' + 'Available locals are:\n' + ('' + _CompileError.code(_UUtil.mapKeys(locals).join(' ')) + '.'));
		},
		Loop: function () {
			var _this5 = this;

			withInLoop(this, function () {
				return _this5.block.verify();
			});
		},
		// Adding LocalDeclares to the available locals is done by Fun or lineNewLocals.
		LocalDeclare: function () {
			vm(this.opType);
		},
		MapEntry: function () {
			this.key.verify();
			this.val.verify();
		},
		// TODO: Just have lines, not block.lines
		Module: function () {
			var _this6 = this;

			const useLocals = verifyUses(this.uses, this.debugUses);
			plusLocals(useLocals, function () {
				var _verifyLines2 = verifyLines(_this6.block.lines);

				const listMapLength = _verifyLines2.listMapLength;

				// If we are returning a list, the ModuleDefaultExport will be the last line.
				const ex = _UBag.last(_this6.block.lines);
				if (ex instanceof _Expression.ModuleDefaultExport) {
					const ret = ex.value;
					if (ret instanceof _Expression.ListReturn || ret instanceof _Expression.MapReturn) setListMapLength(ret, listMapLength);
				}
			});
		},
		Yield: function () {
			cx.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yielded.verify();
		},
		YieldTo: function () {
			cx.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yieldedTo.verify();
		},

		// These ones just recurse to their children.
		AssignDestructure: function () {
			this.value.verify();
			vm(this.assignees);
		},
		Call: function () {
			this.called.verify();
			vm(this.args);
		},
		CaseDoPart: verifyCasePart,
		CaseValPart: verifyCasePart,
		GlobalAccess: function () {},
		ObjReturn: function () {
			vm(this.opObjed);
		},
		ObjSimple: function () {
			const keys = new Set();
			this.pairs.forEach(function (pair) {
				cx.check(!keys.has(pair.key), pair.loc, function () {
					return 'Duplicate key ' + pair.key;
				});
				keys.add(pair.key);
				pair.value.verify();
			});
		},
		Lazy: function () {
			var _this7 = this;

			withBlockLocals(function () {
				return _this7.value.verify();
			});
		},
		ListReturn: function () {},
		ListEntry: function () {
			this.value.verify();
		},
		ListSimple: function () {
			vm(this.parts);
		},
		NumberLiteral: function () {},
		MapReturn: function () {},
		Member: function () {
			this.object.verify();
		},
		ModuleDefaultExport: function () {
			this.value.verify();
		},
		Quote: function () {
			this.parts.forEach(function (_) {
				if (typeof _ !== 'string') _.verify();
			});
		},
		Special: function () {},
		Splat: function () {
			this.splatted.verify();
		}
	});

	function verifyCase() {
		var _this8 = this;

		const newLocals = [];
		this.opCased.forEach(function (cased) {
			registerLocal(cased.assignee);
			cased.verify();
			newLocals.push(cased.assignee);
		});
		plusLocals(newLocals, function () {
			vm(_this8.parts);
			vm(_this8.opElse);
		});
	}

	function verifyCasePart() {
		var _this9 = this;

		if (this.test instanceof _Expression.Pattern) {
			this.test.type.verify();
			this.test.patterned.verify();
			vm(this.test.locals);
			this.test.locals.forEach(registerLocal);
			plusLocals(this.test.locals, function () {
				return _this9.result.verify();
			});
		} else {
			this.test.verify();
			this.result.verify();
		}
	}

	const verifyUses = function (uses, debugUses) {
		const useLocals = [];
		const verifyUse = function (use) {
			use.used.forEach(useLocal);
			use.opUseDefault.forEach(useLocal);
		},
		      useLocal = function (_) {
			registerLocal(_);
			useLocals.push(_);
		};
		uses.forEach(function (use) {
			if (!(use instanceof _Expression.UseDo)) verifyUse(use);
		});
		withInDebug(true, function () {
			return debugUses.forEach(verifyUse);
		});
		return useLocals;
	},
	      verifyLines = function (lines) {
		const newLocals = [];
		// First, get locals for the whole block.
		const getLineLocals = function (line) {
			if (line instanceof _Expression.Debug) withInDebug(true, function () {
				return line.lines.forEach(getLineLocals);
			});else {
				const news = lineNewLocals(line);
				news.forEach(registerLocal);
				newLocals.push.apply(newLocals, _toConsumableArray(news));
			}
		};

		lines.forEach(getLineLocals);

		const thisBlockLocalNames = new Set();
		const shadowed = new Map();

		let listMapLength = 0;

		const verifyLine = function (line) {
			if (line instanceof _Expression.Debug)
				// TODO: Do anything in this situation?
				// cx.check(!inDebug, line.loc, 'Redundant `debug`.')
				withInDebug(true, function () {
					return line.lines.forEach(verifyLine);
				});else {
				verifyIsStatement(line);
				lineNewLocals(line).forEach(function (l) {
					const got = locals.get(l.name);
					if (got !== undefined) {
						cx.check(!thisBlockLocalNames.has(l.name), l.loc, function () {
							return 'A local ' + _CompileError.code(l.name) + ' is already in this block.';
						});
						shadowed.set(l.name, got);
					}
					locals.set(l.name, l);
					thisBlockLocalNames.add(l.name);
				});
				if (line instanceof _Expression.ListEntry || line instanceof _Expression.MapEntry) {
					setEntryIndex(line, listMapLength);
					listMapLength = listMapLength + 1;
				}
				line.verify();
			}
		};

		plusPendingBlockLocals(newLocals, function () {
			return lines.forEach(verifyLine);
		});

		newLocals.forEach(function (l) {
			//TODO:ifElse
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});

		return { newLocals: newLocals, listMapLength: listMapLength };
	},
	      verifyIsStatement = function (line) {
		switch (true) {
			case line instanceof _Expression.Do:
			// Some Vals are also conceptually Dos, but this was easier than multiple inheritance.
			case line instanceof _Expression.Call:
			case line instanceof _Expression.Yield:
			case line instanceof _Expression.YieldTo:
			case line instanceof _Expression.Special && line.k === 'debugger':
			// OK, used to mean `pass`
			case line instanceof _Expression.GlobalAccess && line.name === 'null':
				return;
			default:
				cx.fail(line.loc, 'Expression in statement position.');
		}
	},
	      lineNewLocals = function (line) {
		return line instanceof _Expression.Assign ? [line.assignee] : line instanceof _Expression.AssignDestructure ? line.assignees : [];
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3ZlcmlmeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7a0JBNEd3QixNQUFNOzs7Ozs7OztBQWxHOUIsT0FBTSxFQUFFLEdBQUcsVUFBQSxFQUFFO1NBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7VUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO0dBQUEsQ0FBQztFQUFBLENBQUE7O0FBRTVDLEtBQ0MsRUFBRSxFQUNGLE1BQU07OztBQUdOLG1CQUFrQixFQUNsQixTQUFTLEVBQ1QsYUFBYSxFQUNiLE1BQU0sRUFDTixFQUFFLENBQUE7O0FBRUgsT0FDQyxJQUFJLEdBQUcsVUFBQSxHQUFHLEVBQUk7QUFDYixJQUFFLEdBQUcsR0FBRyxDQUFBO0FBQ1IsUUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7QUFDbEIsb0JBQWtCLEdBQUcsRUFBRSxDQUFBO0FBQ3ZCLFdBQVMsR0FBRyxLQUFLLENBQUE7QUFDakIsZUFBYSxHQUFHLEtBQUssQ0FBQTtBQUNyQixRQUFNLEdBQUcsRUFBRSxDQUFBO0FBQ1gsSUFBRSxHQUFHLFVBQVEsQ0FBQTtFQUNiOzs7QUFFRCxPQUFNLEdBQUcsWUFBTTtBQUNkLFFBQU0sR0FBRyxrQkFBa0IsR0FBRyxNQUFNLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQTtFQUNyRDtPQUVELGVBQWUsR0FBRyxVQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUs7QUFDMUMsUUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFBO0FBQ3ZCLGVBQWEsR0FBRyxjQUFjLENBQUE7QUFDOUIsS0FBRyxFQUFFLENBQUE7QUFDTCxlQUFhLEdBQUcsQ0FBQyxDQUFBO0VBQ2pCO09BRUQsVUFBVSxHQUFHLFVBQUMsV0FBVyxFQUFFLEdBQUcsRUFBSztBQUNsQyxRQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0FBQzFCLGFBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLEVBQUk7QUFDeEIsU0FB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STtBQUNYLFFBQUssSUFBSSx3QkFsWCtDLEVBQUUsQUFrWG5DLENBQUM7O0FBRXhCLFFBQUssSUFBSSx3QkFwWGtDLElBQUksQUFvWHRCLENBQUM7QUFDMUIsUUFBSyxJQUFJLHdCQW5YbUMsS0FBSyxBQW1YdkIsQ0FBQztBQUMzQixRQUFLLElBQUksd0JBcFgwQyxPQUFPLEFBb1g5QixDQUFDO0FBQzdCLFFBQUssSUFBSSx3QkFyWG1CLE9BQU8sQUFxWFAsSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQzs7QUFFdEQsUUFBSyxJQUFJLHdCQXpYbUQsWUFBWSxBQXlYdkMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU07QUFDeEQsV0FBTTtBQUFBLEFBQ1A7QUFDQyxNQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsbUNBQW1DLENBQUMsQ0FBQTtBQUFBLEdBQ3ZEO0VBQ0Q7T0FFRCxhQUFhLEdBQUcsVUFBQSxJQUFJO1NBQ25CLElBQUksd0JBallHLE1BQU0sQUFpWVMsR0FDckIsQ0FBRSxJQUFJLENBQUMsUUFBUSxDQUFFLEdBQ2pCLElBQUksd0JBbllVLGlCQUFpQixBQW1ZRSxHQUNqQyxJQUFJLENBQUMsU0FBUyxHQUNkLEVBQUc7RUFBQSxDQUFBIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL3ZlcmlmeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZGUgfSBmcm9tICcuLi9Db21waWxlRXJyb3InXG5pbXBvcnQgKiBhcyBFRXhwb3J0cyBmcm9tICcuLi9FeHByZXNzaW9uJ1xuaW1wb3J0IHsgQXNzaWduLCBBc3NpZ25EZXN0cnVjdHVyZSwgQmxvY2tWYWwsIENhbGwsIERlYnVnLCBEbywgR2xvYmFsQWNjZXNzLFxuXHRMaXN0RW50cnksIExpc3RSZXR1cm4sIE1hcEVudHJ5LCBNYXBSZXR1cm4sXG5cdE1vZHVsZURlZmF1bHRFeHBvcnQsIFBhdHRlcm4sIFNwZWNpYWwsIFVzZURvLCBZaWVsZCwgWWllbGRUbyB9IGZyb20gJy4uL0V4cHJlc3Npb24nXG5pbXBvcnQgeyBoZWFkLCBpc0VtcHR5LCBsYXN0IH0gZnJvbSAnLi9VL0JhZydcbmltcG9ydCB7IGlmRWxzZSwgc29tZSB9IGZyb20gJy4vVS9PcCdcbmltcG9ydCB7IGFzc2VydCwgaW1wbGVtZW50TWFueSwgbWFwS2V5cyB9IGZyb20gJy4vVS91dGlsJ1xuaW1wb3J0IFZyLCB7IFZyTG9jYWxJbmZvIH0gZnJvbSAnLi9WcidcblxuY29uc3Qgdm0gPSBlcyA9PiBlcy5mb3JFYWNoKGUgPT4gZS52ZXJpZnkoKSlcblxubGV0XG5cdGN4LFxuXHRsb2NhbHMsXG5cdC8vIExvY2FscyBmb3IgdGhpcyBibG9jay5cblx0Ly8gUmVwbGFjZXMgYGxvY2Fsc2Agd2hlbiBlbnRlcmluZyBpbnRvIHN1Yi1mdW5jdGlvbi5cblx0cGVuZGluZ0Jsb2NrTG9jYWxzLFxuXHRpc0luRGVidWcsXG5cdGlzSW5HZW5lcmF0b3IsXG5cdG9wTG9vcCxcblx0dnJcblxuY29uc3Rcblx0aW5pdCA9IF9jeCA9PiB7XG5cdFx0Y3ggPSBfY3hcblx0XHRsb2NhbHMgPSBuZXcgTWFwKClcblx0XHRwZW5kaW5nQmxvY2tMb2NhbHMgPSBbXVxuXHRcdGlzSW5EZWJ1ZyA9IGZhbHNlXG5cdFx0aXNJbkdlbmVyYXRvciA9IGZhbHNlXG5cdFx0b3BMb29wID0gW11cblx0XHR2ciA9IG5ldyBWcigpXG5cdH0sXG5cdC8vIFJlbGVhc2UgZm9yIGdhcmJhZ2UgY29sbGVjdGlvblxuXHR1bmluaXQgPSAoKSA9PiB7XG5cdFx0bG9jYWxzID0gcGVuZGluZ0Jsb2NrTG9jYWxzID0gb3BMb29wID0gdnIgPSB1bmRlZmluZWRcblx0fSxcblxuXHR3aXRoSW5HZW5lcmF0b3IgPSAoX2lzSW5HZW5lcmF0b3IsIGZ1bikgPT4ge1xuXHRcdGNvbnN0IGcgPSBpc0luR2VuZXJhdG9yXG5cdFx0aXNJbkdlbmVyYXRvciA9IF9pc0luR2VuZXJhdG9yXG5cdFx0ZnVuKClcblx0XHRpc0luR2VuZXJhdG9yID0gZ1xuXHR9LFxuXG5cdHBsdXNMb2NhbHMgPSAoYWRkZWRMb2NhbHMsIGZ1bikgPT4ge1xuXHRcdGNvbnN0IHNoYWRvd2VkID0gbmV3IE1hcCgpXG5cdFx0YWRkZWRMb2NhbHMuZm9yRWFjaChsID0+IHtcblx0XHRcdGNvbnN0IGdvdCA9IGxvY2Fscy5nZXQobC5uYW1lKVxuXHRcdFx0aWYgKGdvdCAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRzaGFkb3dlZC5zZXQobC5uYW1lLCBnb3QpXG5cdFx0XHRsb2NhbHMuc2V0KGwubmFtZSwgbClcblx0XHR9KVxuXHRcdGZ1bigpXG5cdFx0YWRkZWRMb2NhbHMuZm9yRWFjaChsID0+IHtcblx0XHRcdGNvbnN0IHMgPSBzaGFkb3dlZC5nZXQobC5uYW1lKVxuXHRcdFx0aWYgKHMgPT09IHVuZGVmaW5lZClcblx0XHRcdFx0bG9jYWxzLmRlbGV0ZShsLm5hbWUpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGxvY2Fscy5zZXQobC5uYW1lLCBzKVxuXHRcdH0pXG5cdH0sXG5cblx0cGx1c1BlbmRpbmdCbG9ja0xvY2FscyA9IChwZW5kaW5nLCBmdW4pID0+IHtcblx0XHRjb25zdCBvbGRMZW5ndGggPSBwZW5kaW5nQmxvY2tMb2NhbHMubGVuZ3RoXG5cdFx0cGVuZGluZ0Jsb2NrTG9jYWxzLnB1c2goLi4ucGVuZGluZylcblx0XHRmdW4oKVxuXHRcdHdoaWxlIChwZW5kaW5nQmxvY2tMb2NhbHMubGVuZ3RoID4gb2xkTGVuZ3RoKVxuXHRcdFx0cGVuZGluZ0Jsb2NrTG9jYWxzLnBvcCgpXG5cdH0sXG5cblx0d2l0aEluTG9vcCA9IChsb29wLCBmdW4pID0+IHtcblx0XHRjb25zdCBsID0gb3BMb29wXG5cdFx0b3BMb29wID0gc29tZShsb29wKVxuXHRcdGZ1bigpXG5cdFx0b3BMb29wID0gbFxuXHR9LFxuXG5cdHdpdGhJbkRlYnVnID0gKF9pc0luRGVidWcsIGZ1bikgPT4ge1xuXHRcdGNvbnN0IGQgPSBpc0luRGVidWdcblx0XHRpc0luRGVidWcgPSBfaXNJbkRlYnVnXG5cdFx0ZnVuKClcblx0XHRpc0luRGVidWcgPSBkXG5cdH0sXG5cblx0d2l0aEJsb2NrTG9jYWxzID0gZnVuID0+IHtcblx0XHRjb25zdCBibCA9IHBlbmRpbmdCbG9ja0xvY2Fsc1xuXHRcdHBlbmRpbmdCbG9ja0xvY2FscyA9IFtdXG5cdFx0cGx1c0xvY2FscyhibCwgZnVuKVxuXHRcdHBlbmRpbmdCbG9ja0xvY2FscyA9IGJsXG5cdH0sXG5cblx0Ly8gVnIgc2V0dGVyc1xuXHRzZXRFbmRMb29wID0gKGVuZExvb3AsIGxvb3ApID0+IHtcblx0XHR2ci5lbmRMb29wVG9Mb29wLnNldChlbmRMb29wLCBsb29wKVxuXHR9LFxuXG5cdHJlZ2lzdGVyTG9jYWwgPSBsb2NhbCA9PiB7XG5cdFx0dnIubG9jYWxUb0luZm8uc2V0KGxvY2FsLCBWckxvY2FsSW5mbyhcdGlzSW5EZWJ1ZywgW10sIFtdKSlcblx0fSxcblxuXHRzZXRFbnRyeUluZGV4ID0gKGxpc3RNYXBFbnRyeSwgaW5kZXgpID0+IHtcblx0XHR2ci5lbnRyeVRvSW5kZXguc2V0KGxpc3RNYXBFbnRyeSwgaW5kZXgpXG5cdH0sXG5cdHNldExpc3RNYXBMZW5ndGggPSAocmV0dXJuZXIsIGxlbmd0aCkgPT4ge1xuXHRcdHZyLnJldHVyblRvTGVuZ3RoLnNldChyZXR1cm5lciwgbGVuZ3RoKVxuXHR9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeShjeCwgZSkge1xuXHRpbml0KGN4KVxuXHRlLnZlcmlmeSgpXG5cdHZlcmlmeUxvY2FsVXNlKClcblx0Y29uc3Qgb3V0ID0gdnJcblx0dW5pbml0KClcblx0cmV0dXJuIG91dFxufVxuXG5jb25zdCB2ZXJpZnlMb2NhbFVzZSA9ICgpID0+IHtcblx0dnIubG9jYWxUb0luZm8uZm9yRWFjaCgoaW5mbywgbG9jYWwpID0+IHtcblx0XHRjb25zdCBub05vbkRlYnVnID0gaXNFbXB0eShpbmZvLm5vbkRlYnVnQWNjZXNzZXMpXG5cdFx0aWYgKG5vTm9uRGVidWcgJiYgaXNFbXB0eShpbmZvLmRlYnVnQWNjZXNzZXMpKVxuXHRcdFx0Y3gud2FybklmKCFsb2NhbC5va1RvTm90VXNlLCBsb2NhbC5sb2MsICgpID0+XG5cdFx0XHRcdGBVbnVzZWQgbG9jYWwgdmFyaWFibGUgJHtjb2RlKGxvY2FsLm5hbWUpfS5gKVxuXHRcdGVsc2UgaWYgKGluZm8uaXNJbkRlYnVnKVxuXHRcdFx0Y3gud2FybklmKCFub05vbkRlYnVnLCAoKSA9PiBoZWFkKGluZm8ubm9uRGVidWdBY2Nlc3NlcykubG9jLCAoKSA9PlxuXHRcdFx0XHRgRGVidWctb25seSBsb2NhbCAke2NvZGUobG9jYWwubmFtZSl9IHVzZWQgb3V0c2lkZSBvZiBkZWJ1Zy5gKVxuXHRcdGVsc2Vcblx0XHRcdGN4Lndhcm5JZighbG9jYWwub2tUb05vdFVzZSAmJiBub05vbkRlYnVnLCBsb2NhbC5sb2MsICgpID0+XG5cdFx0XHRcdGBMb2NhbCAke2NvZGUobG9jYWwubmFtZSl9IHVzZWQgb25seSBpbiBkZWJ1Zy5gKVxuXHR9KVxufVxuXG5pbXBsZW1lbnRNYW55KEVFeHBvcnRzLCAndmVyaWZ5Jywge1xuXHRBc3NpZ24oKSB7XG5cdFx0Y29uc3QgZG9WID0gKCkgPT4ge1xuXHRcdFx0dGhpcy5hc3NpZ25lZS52ZXJpZnkoKVxuXHRcdFx0dGhpcy52YWx1ZS52ZXJpZnkoKVxuXHRcdH1cblx0XHRpZiAodGhpcy5hc3NpZ25lZS5pc0xhenkpXG5cdFx0XHR3aXRoQmxvY2tMb2NhbHMoZG9WKVxuXHRcdGVsc2Vcblx0XHRcdGRvVigpXG5cdH0sXG5cdEJsb2NrRG8oKSB7IHZlcmlmeUxpbmVzKHRoaXMubGluZXMpIH0sXG5cdEJsb2NrVmFsKCkge1xuXHRcdGNvbnN0IHsgbmV3TG9jYWxzLCBsaXN0TWFwTGVuZ3RoIH0gPSB2ZXJpZnlMaW5lcyh0aGlzLmxpbmVzKVxuXHRcdGlmICh0aGlzLnJldHVybmVkIGluc3RhbmNlb2YgTGlzdFJldHVybiB8fCB0aGlzLnJldHVybmVkIGluc3RhbmNlb2YgTWFwUmV0dXJuKVxuXHRcdFx0c2V0TGlzdE1hcExlbmd0aCh0aGlzLnJldHVybmVkLCBsaXN0TWFwTGVuZ3RoKVxuXHRcdGVsc2Vcblx0XHRcdGFzc2VydChsaXN0TWFwTGVuZ3RoID09PSAwKVxuXHRcdHBsdXNMb2NhbHMobmV3TG9jYWxzLCAoKSA9PiB0aGlzLnJldHVybmVkLnZlcmlmeSgpKVxuXHR9LFxuXHRCbG9ja1dyYXAoKSB7XG5cdFx0dGhpcy5ibG9jay52ZXJpZnkoKVxuXHR9LFxuXHRDYXNlRG86IHZlcmlmeUNhc2UsXG5cdENhc2VWYWw6IHZlcmlmeUNhc2UsXG5cdC8vIE9ubHkgcmVhY2ggaGVyZSBmb3IgaW4vb3V0IGNvbmRpdGlvblxuXHREZWJ1ZygpIHsgdmVyaWZ5TGluZXMoWyB0aGlzIF0pIH0sXG5cdEVuZExvb3AoKSB7XG5cdFx0aWZFbHNlKG9wTG9vcCxcblx0XHRcdGxvb3AgPT4gc2V0RW5kTG9vcCh0aGlzLCBsb29wKSxcblx0XHRcdCgpID0+IGN4LmZhaWwodGhpcy5sb2MsICdOb3QgaW4gYSBsb29wLicpKVxuXHR9LFxuXHRGdW4oKSB7XG5cdFx0d2l0aEJsb2NrTG9jYWxzKCgpID0+IHtcblx0XHRcdGN4LmNoZWNrKGlzRW1wdHkodGhpcy5vcFJlc0RlY2xhcmUpIHx8IHRoaXMuYmxvY2sgaW5zdGFuY2VvZiBCbG9ja1ZhbCwgdGhpcy5sb2MsXG5cdFx0XHRcdCdGdW5jdGlvbiB3aXRoIHJldHVybiBjb25kaXRpb24gbXVzdCByZXR1cm4gc29tZXRoaW5nLicpXG5cdFx0XHR0aGlzLmFyZ3MuZm9yRWFjaChhcmcgPT4gdm0oYXJnLm9wVHlwZSkpXG5cdFx0XHR3aXRoSW5HZW5lcmF0b3IodGhpcy5pc0dlbmVyYXRvciwgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBhbGxBcmdzID0gdGhpcy5hcmdzLmNvbmNhdCh0aGlzLm9wUmVzdEFyZylcblx0XHRcdFx0YWxsQXJncy5mb3JFYWNoKF8gPT4gcmVnaXN0ZXJMb2NhbChfKSlcblx0XHRcdFx0cGx1c0xvY2FscyhhbGxBcmdzLCAoKSA9PiB7XG5cdFx0XHRcdFx0dm0odGhpcy5vcEluKVxuXHRcdFx0XHRcdHRoaXMuYmxvY2sudmVyaWZ5KClcblx0XHRcdFx0XHR0aGlzLm9wUmVzRGVjbGFyZS5mb3JFYWNoKHJkID0+IHtcblx0XHRcdFx0XHRcdHJkLnZlcmlmeSgpXG5cdFx0XHRcdFx0XHRyZWdpc3RlckxvY2FsKHJkKVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0dGhpcy5vcE91dC5mb3JFYWNoKG8gPT4gcGx1c0xvY2Fscyh0aGlzLm9wUmVzRGVjbGFyZSwgKCkgPT4gby52ZXJpZnkoKSkpXG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHRcdH0pXG5cdH0sXG5cdExvY2FsQWNjZXNzKCkge1xuXHRcdGNvbnN0IGxvY2FsID0gbG9jYWxzLmdldCh0aGlzLm5hbWUpXG5cdFx0aWYgKGxvY2FsICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHZyLmFjY2Vzc1RvTG9jYWwuc2V0KHRoaXMsIGxvY2FsKVxuXHRcdFx0Y29uc3QgaW5mbyA9IHZyLmxvY2FsVG9JbmZvLmdldChsb2NhbClcblx0XHRcdGNvbnN0IGFjY2Vzc2VzID0gaXNJbkRlYnVnID8gaW5mby5kZWJ1Z0FjY2Vzc2VzIDogaW5mby5ub25EZWJ1Z0FjY2Vzc2VzXG5cdFx0XHRhY2Nlc3Nlcy5wdXNoKHRoaXMpXG5cdFx0fSBlbHNlXG5cdFx0XHRjeC5mYWlsKHRoaXMubG9jLFxuXHRcdFx0XHRgQ291bGQgbm90IGZpbmQgbG9jYWwgb3IgZ2xvYmFsICR7Y29kZSh0aGlzLm5hbWUpfS5cXG5gICtcblx0XHRcdFx0J0F2YWlsYWJsZSBsb2NhbHMgYXJlOlxcbicgK1xuXHRcdFx0XHRgJHtjb2RlKG1hcEtleXMobG9jYWxzKS5qb2luKCcgJykpfS5gKVxuXHR9LFxuXHRMb29wKCkgeyB3aXRoSW5Mb29wKHRoaXMsICgpID0+IHRoaXMuYmxvY2sudmVyaWZ5KCkpIH0sXG5cdC8vIEFkZGluZyBMb2NhbERlY2xhcmVzIHRvIHRoZSBhdmFpbGFibGUgbG9jYWxzIGlzIGRvbmUgYnkgRnVuIG9yIGxpbmVOZXdMb2NhbHMuXG5cdExvY2FsRGVjbGFyZSgpIHsgdm0odGhpcy5vcFR5cGUpIH0sXG5cdE1hcEVudHJ5KCkge1xuXHRcdHRoaXMua2V5LnZlcmlmeSgpXG5cdFx0dGhpcy52YWwudmVyaWZ5KClcblx0fSxcblx0Ly8gVE9ETzogSnVzdCBoYXZlIGxpbmVzLCBub3QgYmxvY2subGluZXNcblx0TW9kdWxlKCkge1xuXHRcdGNvbnN0IHVzZUxvY2FscyA9IHZlcmlmeVVzZXModGhpcy51c2VzLCB0aGlzLmRlYnVnVXNlcylcblx0XHRwbHVzTG9jYWxzKHVzZUxvY2FscywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgeyBsaXN0TWFwTGVuZ3RoIH0gPSB2ZXJpZnlMaW5lcyh0aGlzLmJsb2NrLmxpbmVzKVxuXHRcdFx0Ly8gSWYgd2UgYXJlIHJldHVybmluZyBhIGxpc3QsIHRoZSBNb2R1bGVEZWZhdWx0RXhwb3J0IHdpbGwgYmUgdGhlIGxhc3QgbGluZS5cblx0XHRcdGNvbnN0IGV4ID0gbGFzdCh0aGlzLmJsb2NrLmxpbmVzKVxuXHRcdFx0aWYgKGV4IGluc3RhbmNlb2YgTW9kdWxlRGVmYXVsdEV4cG9ydCkge1xuXHRcdFx0XHRjb25zdCByZXQgPSBleC52YWx1ZVxuXHRcdFx0XHRpZiAocmV0IGluc3RhbmNlb2YgTGlzdFJldHVybiB8fCByZXQgaW5zdGFuY2VvZiBNYXBSZXR1cm4pXG5cdFx0XHRcdFx0c2V0TGlzdE1hcExlbmd0aChyZXQsIGxpc3RNYXBMZW5ndGgpXG5cdFx0XHR9XG5cdFx0fSlcblx0fSxcblx0WWllbGQoKSB7XG5cdFx0Y3guY2hlY2soaXNJbkdlbmVyYXRvciwgdGhpcy5sb2MsICdDYW5ub3QgeWllbGQgb3V0c2lkZSBvZiBnZW5lcmF0b3IgY29udGV4dCcpXG5cdFx0dGhpcy55aWVsZGVkLnZlcmlmeSgpXG5cdH0sXG5cdFlpZWxkVG8oKSB7XG5cdFx0Y3guY2hlY2soaXNJbkdlbmVyYXRvciwgdGhpcy5sb2MsICdDYW5ub3QgeWllbGQgb3V0c2lkZSBvZiBnZW5lcmF0b3IgY29udGV4dCcpXG5cdFx0dGhpcy55aWVsZGVkVG8udmVyaWZ5KClcblx0fSxcblxuXHQvLyBUaGVzZSBvbmVzIGp1c3QgcmVjdXJzZSB0byB0aGVpciBjaGlsZHJlbi5cblx0QXNzaWduRGVzdHJ1Y3R1cmUoKSB7XG5cdFx0dGhpcy52YWx1ZS52ZXJpZnkoKVxuXHRcdHZtKHRoaXMuYXNzaWduZWVzKVxuXHR9LFxuXHRDYWxsKCkge1xuXHRcdHRoaXMuY2FsbGVkLnZlcmlmeSgpXG5cdFx0dm0odGhpcy5hcmdzKVxuXHR9LFxuXHRDYXNlRG9QYXJ0OiB2ZXJpZnlDYXNlUGFydCxcblx0Q2FzZVZhbFBhcnQ6IHZlcmlmeUNhc2VQYXJ0LFxuXHRHbG9iYWxBY2Nlc3MoKSB7IH0sXG5cdE9ialJldHVybigpIHsgdm0odGhpcy5vcE9iamVkKSB9LFxuXHRPYmpTaW1wbGUoKSB7XG5cdFx0Y29uc3Qga2V5cyA9IG5ldyBTZXQoKVxuXHRcdHRoaXMucGFpcnMuZm9yRWFjaChwYWlyID0+IHtcblx0XHRcdGN4LmNoZWNrKCFrZXlzLmhhcyhwYWlyLmtleSksIHBhaXIubG9jLCAoKSA9PiBgRHVwbGljYXRlIGtleSAke3BhaXIua2V5fWApXG5cdFx0XHRrZXlzLmFkZChwYWlyLmtleSlcblx0XHRcdHBhaXIudmFsdWUudmVyaWZ5KClcblx0XHR9KVxuXHR9LFxuXHRMYXp5KCkgeyB3aXRoQmxvY2tMb2NhbHMoKCkgPT4gdGhpcy52YWx1ZS52ZXJpZnkoKSkgfSxcblx0TGlzdFJldHVybigpIHsgfSxcblx0TGlzdEVudHJ5KCkgeyB0aGlzLnZhbHVlLnZlcmlmeSgpIH0sXG5cdExpc3RTaW1wbGUoKSB7IHZtKHRoaXMucGFydHMpIH0sXG5cdE51bWJlckxpdGVyYWwoKSB7IH0sXG5cdE1hcFJldHVybigpIHsgfSxcblx0TWVtYmVyKCkgeyB0aGlzLm9iamVjdC52ZXJpZnkoKSB9LFxuXHRNb2R1bGVEZWZhdWx0RXhwb3J0KCkgeyB0aGlzLnZhbHVlLnZlcmlmeSgpIH0sXG5cdFF1b3RlKCkge1xuXHRcdHRoaXMucGFydHMuZm9yRWFjaChfID0+IHtcblx0XHRcdGlmICh0eXBlb2YgXyAhPT0gJ3N0cmluZycpXG5cdFx0XHRcdF8udmVyaWZ5KClcblx0XHR9KVxuXHR9LFxuXHRTcGVjaWFsKCkgeyB9LFxuXHRTcGxhdCgpIHsgdGhpcy5zcGxhdHRlZC52ZXJpZnkoKSB9XG59KVxuXG5mdW5jdGlvbiB2ZXJpZnlDYXNlKCkge1xuXHRjb25zdCBuZXdMb2NhbHMgPSBbXVxuXHR0aGlzLm9wQ2FzZWQuZm9yRWFjaChjYXNlZCA9PiB7XG5cdFx0cmVnaXN0ZXJMb2NhbChjYXNlZC5hc3NpZ25lZSlcblx0XHRjYXNlZC52ZXJpZnkoKVxuXHRcdG5ld0xvY2Fscy5wdXNoKGNhc2VkLmFzc2lnbmVlKVxuXHR9KVxuXHRwbHVzTG9jYWxzKG5ld0xvY2FscywgKCkgPT4ge1xuXHRcdHZtKHRoaXMucGFydHMpXG5cdFx0dm0odGhpcy5vcEVsc2UpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIHZlcmlmeUNhc2VQYXJ0KCkge1xuXHRpZiAodGhpcy50ZXN0IGluc3RhbmNlb2YgUGF0dGVybikge1xuXHRcdHRoaXMudGVzdC50eXBlLnZlcmlmeSgpXG5cdFx0dGhpcy50ZXN0LnBhdHRlcm5lZC52ZXJpZnkoKVxuXHRcdHZtKHRoaXMudGVzdC5sb2NhbHMpXG5cdFx0dGhpcy50ZXN0LmxvY2Fscy5mb3JFYWNoKHJlZ2lzdGVyTG9jYWwpXG5cdFx0cGx1c0xvY2Fscyh0aGlzLnRlc3QubG9jYWxzLCAoKSA9PiB0aGlzLnJlc3VsdC52ZXJpZnkoKSlcblx0fSBlbHNlIHtcblx0XHR0aGlzLnRlc3QudmVyaWZ5KClcblx0XHR0aGlzLnJlc3VsdC52ZXJpZnkoKVxuXHR9XG59XG5cbmNvbnN0XG5cdHZlcmlmeVVzZXMgPSAodXNlcywgZGVidWdVc2VzKSA9PiB7XG5cdFx0Y29uc3QgdXNlTG9jYWxzID0gW11cblx0XHRjb25zdFxuXHRcdFx0dmVyaWZ5VXNlID0gdXNlID0+IHtcblx0XHRcdFx0dXNlLnVzZWQuZm9yRWFjaCh1c2VMb2NhbClcblx0XHRcdFx0dXNlLm9wVXNlRGVmYXVsdC5mb3JFYWNoKHVzZUxvY2FsKVxuXHRcdFx0fSxcblx0XHRcdHVzZUxvY2FsID0gXyA9PiB7XG5cdFx0XHRcdHJlZ2lzdGVyTG9jYWwoXylcblx0XHRcdFx0dXNlTG9jYWxzLnB1c2goXylcblx0XHRcdH1cblx0XHR1c2VzLmZvckVhY2godXNlID0+IHtcblx0XHRcdGlmICghKHVzZSBpbnN0YW5jZW9mIFVzZURvKSkgdmVyaWZ5VXNlKHVzZSlcblx0XHR9KVxuXHRcdHdpdGhJbkRlYnVnKHRydWUsICgpID0+IGRlYnVnVXNlcy5mb3JFYWNoKHZlcmlmeVVzZSkpXG5cdFx0cmV0dXJuIHVzZUxvY2Fsc1xuXHR9LFxuXG5cdHZlcmlmeUxpbmVzID0gbGluZXMgPT4ge1xuXHRcdGNvbnN0IG5ld0xvY2FscyA9IFsgXVxuXHRcdC8vIEZpcnN0LCBnZXQgbG9jYWxzIGZvciB0aGUgd2hvbGUgYmxvY2suXG5cdFx0Y29uc3QgZ2V0TGluZUxvY2FscyA9IGxpbmUgPT4ge1xuXHRcdFx0aWYgKGxpbmUgaW5zdGFuY2VvZiBEZWJ1Zylcblx0XHRcdFx0d2l0aEluRGVidWcodHJ1ZSwgKCkgPT4gbGluZS5saW5lcy5mb3JFYWNoKGdldExpbmVMb2NhbHMpKVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGNvbnN0IG5ld3MgPSBsaW5lTmV3TG9jYWxzKGxpbmUpXG5cdFx0XHRcdG5ld3MuZm9yRWFjaChyZWdpc3RlckxvY2FsKVxuXHRcdFx0XHRuZXdMb2NhbHMucHVzaCguLi5uZXdzKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGxpbmVzLmZvckVhY2goZ2V0TGluZUxvY2FscylcblxuXHRcdGNvbnN0IHRoaXNCbG9ja0xvY2FsTmFtZXMgPSBuZXcgU2V0KClcblx0XHRjb25zdCBzaGFkb3dlZCA9IG5ldyBNYXAoKVxuXG5cdFx0bGV0IGxpc3RNYXBMZW5ndGggPSAwXG5cblx0XHRjb25zdCB2ZXJpZnlMaW5lID0gbGluZSA9PiB7XG5cdFx0XHRpZiAobGluZSBpbnN0YW5jZW9mIERlYnVnKVxuXHRcdFx0XHQvLyBUT0RPOiBEbyBhbnl0aGluZyBpbiB0aGlzIHNpdHVhdGlvbj9cblx0XHRcdFx0Ly8gY3guY2hlY2soIWluRGVidWcsIGxpbmUubG9jLCAnUmVkdW5kYW50IGBkZWJ1Z2AuJylcblx0XHRcdFx0d2l0aEluRGVidWcodHJ1ZSwgKCkgPT4gbGluZS5saW5lcy5mb3JFYWNoKHZlcmlmeUxpbmUpKVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHZlcmlmeUlzU3RhdGVtZW50KGxpbmUpXG5cdFx0XHRcdGxpbmVOZXdMb2NhbHMobGluZSkuZm9yRWFjaChsID0+IHtcblx0XHRcdFx0XHRjb25zdCBnb3QgPSBsb2NhbHMuZ2V0KGwubmFtZSlcblx0XHRcdFx0XHRpZiAoZ290ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGN4LmNoZWNrKCF0aGlzQmxvY2tMb2NhbE5hbWVzLmhhcyhsLm5hbWUpLCBsLmxvYyxcblx0XHRcdFx0XHRcdFx0KCkgPT4gYEEgbG9jYWwgJHtjb2RlKGwubmFtZSl9IGlzIGFscmVhZHkgaW4gdGhpcyBibG9jay5gKVxuXHRcdFx0XHRcdFx0c2hhZG93ZWQuc2V0KGwubmFtZSwgZ290KVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsb2NhbHMuc2V0KGwubmFtZSwgbClcblx0XHRcdFx0XHR0aGlzQmxvY2tMb2NhbE5hbWVzLmFkZChsLm5hbWUpXG5cdFx0XHRcdH0pXG5cdFx0XHRcdGlmIChsaW5lIGluc3RhbmNlb2YgTGlzdEVudHJ5IHx8IGxpbmUgaW5zdGFuY2VvZiBNYXBFbnRyeSkge1xuXHRcdFx0XHRcdHNldEVudHJ5SW5kZXgobGluZSwgbGlzdE1hcExlbmd0aClcblx0XHRcdFx0XHRsaXN0TWFwTGVuZ3RoID0gbGlzdE1hcExlbmd0aCArIDFcblx0XHRcdFx0fVxuXHRcdFx0XHRsaW5lLnZlcmlmeSgpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cGx1c1BlbmRpbmdCbG9ja0xvY2FscyhuZXdMb2NhbHMsICgpID0+IGxpbmVzLmZvckVhY2godmVyaWZ5TGluZSkpXG5cblx0XHRuZXdMb2NhbHMuZm9yRWFjaChsID0+IHtcblx0XHRcdC8vVE9ETzppZkVsc2Vcblx0XHRcdGNvbnN0IHMgPSBzaGFkb3dlZC5nZXQobC5uYW1lKVxuXHRcdFx0aWYgKHMgPT09IHVuZGVmaW5lZClcblx0XHRcdFx0bG9jYWxzLmRlbGV0ZShsLm5hbWUpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGxvY2Fscy5zZXQobC5uYW1lLCBzKVxuXHRcdH0pXG5cblx0XHRyZXR1cm4geyBuZXdMb2NhbHMsIGxpc3RNYXBMZW5ndGggfVxuXHR9LFxuXG5cdHZlcmlmeUlzU3RhdGVtZW50ID0gbGluZSA9PiB7XG5cdFx0c3dpdGNoICh0cnVlKSB7XG5cdFx0XHRjYXNlIGxpbmUgaW5zdGFuY2VvZiBEbzpcblx0XHRcdC8vIFNvbWUgVmFscyBhcmUgYWxzbyBjb25jZXB0dWFsbHkgRG9zLCBidXQgdGhpcyB3YXMgZWFzaWVyIHRoYW4gbXVsdGlwbGUgaW5oZXJpdGFuY2UuXG5cdFx0XHRjYXNlIGxpbmUgaW5zdGFuY2VvZiBDYWxsOlxuXHRcdFx0Y2FzZSBsaW5lIGluc3RhbmNlb2YgWWllbGQ6XG5cdFx0XHRjYXNlIGxpbmUgaW5zdGFuY2VvZiBZaWVsZFRvOlxuXHRcdFx0Y2FzZSBsaW5lIGluc3RhbmNlb2YgU3BlY2lhbCAmJiBsaW5lLmsgPT09ICdkZWJ1Z2dlcic6XG5cdFx0XHQvLyBPSywgdXNlZCB0byBtZWFuIGBwYXNzYFxuXHRcdFx0Y2FzZSBsaW5lIGluc3RhbmNlb2YgR2xvYmFsQWNjZXNzICYmIGxpbmUubmFtZSA9PT0gJ251bGwnOlxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGN4LmZhaWwobGluZS5sb2MsICdFeHByZXNzaW9uIGluIHN0YXRlbWVudCBwb3NpdGlvbi4nKVxuXHRcdH1cblx0fSxcblxuXHRsaW5lTmV3TG9jYWxzID0gbGluZSA9PlxuXHRcdGxpbmUgaW5zdGFuY2VvZiBBc3NpZ24gP1xuXHRcdFx0WyBsaW5lLmFzc2lnbmVlIF0gOlxuXHRcdFx0bGluZSBpbnN0YW5jZW9mIEFzc2lnbkRlc3RydWN0dXJlID9cblx0XHRcdGxpbmUuYXNzaWduZWVzIDpcblx0XHRcdFsgXVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=