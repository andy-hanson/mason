if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', '../CompileError', '../MsAst', './util', './VerifyResults'], function (exports, module, _CompileError, _MsAst, _util, _VerifyResults) {
	'use strict';

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	var _VerifyResults2 = _interopRequire(_VerifyResults);

	const verifyEach = function (es) {
		return es.forEach(function (_) {
			return _.verify();
		});
	};
	const verifyOpEach = function (op) {
		return (0, _util.opEach)(op, function (_) {
			return _.verify();
		});
	};

	let context, locals,
	// Locals for this block.
	// Replaces `locals` when entering into sub-function.
	pendingBlockLocals, isInDebug, isInGenerator, opLoop, results;

	const withInGenerator = function (_isInGenerator, fun) {
		const g = isInGenerator;
		isInGenerator = _isInGenerator;
		fun();
		isInGenerator = g;
	},
	      plusLocal = function (addedLocal, fun) {
		const shadowed = locals.get(addedLocal.name);
		locals.set(addedLocal.name, addedLocal);
		fun();
		_removeLocal(addedLocal.name, shadowed);
	},
	      plusLocals = function (addedLocals, fun) {
		const shadowed = new Map();
		addedLocals.forEach(function (_) {
			const got = locals.get(_.name);
			if (got !== undefined) shadowed.set(_.name, got);
			locals.set(_.name, _);
		});
		fun();
		addedLocals.forEach(function (_) {
			return _removeLocal(_.name, shadowed.get(_.name));
		});
	},
	      _removeLocal = function (name, shadowed) {
		if (shadowed === undefined) locals.delete(name);else locals.set(name, shadowed);
	},
	      plusPendingBlockLocals = function (pending, fun) {
		const oldLength = pendingBlockLocals.length;
		pendingBlockLocals.push.apply(pendingBlockLocals, _toConsumableArray(pending));
		fun();
		while (pendingBlockLocals.length > oldLength) pendingBlockLocals.pop();
	},
	      withInLoop = function (loop, fun) {
		const l = opLoop;
		opLoop = loop;
		fun();
		opLoop = l;
	},
	      withInDebug = function (_isInDebug, fun) {
		const d = isInDebug;
		isInDebug = _isInDebug;
		fun();
		isInDebug = d;
	},
	      withBlockLocals = function (fun) {
		const bl = pendingBlockLocals;
		pendingBlockLocals = [];
		plusLocals(bl, fun);
		pendingBlockLocals = bl;
	},
	      accessLocal = function (declare, access, isDebugAccess) {
		return _addAccess(results.localToInfo.get(declare), access, isDebugAccess);
	},
	      accessLocalForReturn = function (declare, access) {
		const info = results.localToInfo.get(declare);
		_addAccess(info, access, info.isInDebug);
	},
	      _addAccess = function (localInfo, access, isDebugAccess) {
		return (isDebugAccess ? localInfo.debugAccesses : localInfo.nonDebugAccesses).push(access);
	},
	     

	// VerifyResults setters
	registerLocal = function (local) {
		return results.localToInfo.set(local, (0, _VerifyResults.LocalInfo)(isInDebug, [], []));
	},
	      setEntryIndex = function (listMapEntry, index) {
		return results.entryToIndex.set(listMapEntry, index);
	};

	module.exports = function (_context, ast) {
		context = _context;
		locals = new Map();
		pendingBlockLocals = [];
		isInDebug = false;
		isInGenerator = false;
		opLoop = null;
		results = new _VerifyResults2();

		ast.verify();
		verifyLocalUse();
		const out = results;

		// Release for garbage collection.
		locals = pendingBlockLocals = opLoop = results = undefined;

		return out;
	};

	const verifyLocalUse = function () {
		return results.localToInfo.forEach(function (info, local) {
			if (!(local instanceof _MsAst.LocalDeclareRes)) {
				const noNonDebug = (0, _util.isEmpty)(info.nonDebugAccesses);
				if (noNonDebug && (0, _util.isEmpty)(info.debugAccesses)) context.warn(local.loc, function () {
					return 'Unused local variable ' + (0, _CompileError.code)(local.name) + '.';
				});else if (info.isInDebug) context.warnIf(!noNonDebug, function () {
					return (0, _util.head)(info.nonDebugAccesses).loc;
				}, function () {
					return 'Debug-only local ' + (0, _CompileError.code)(local.name) + ' used outside of debug.';
				});else context.warnIf(noNonDebug, local.loc, function () {
					return 'Local ' + (0, _CompileError.code)(local.name) + ' used only in debug.';
				});
			}
		});
	};

	(0, _util.implementMany)(_MsAst, 'verify', {
		Assign: function () {
			var _this = this;

			const doV = function () {
				_this.assignee.verify();
				_this.value.verify();
			};
			if (this.assignee.isLazy()) withBlockLocals(doV);else doV();
		},

		AssignDestructure: function () {
			this.value.verify();
			verifyEach(this.assignees);
		},

		AssignMutate: function () {
			var _this2 = this;

			const declare = getLocalDeclare(this.name, this.loc);
			context.check(declare.isMutable(), this.loc, function () {
				return '' + (0, _CompileError.code)(_this2.name) + ' is not mutable.';
			});
			// TODO: Track assignments. Mutable local must be mutated somewhere.
			this.value.verify();
		},

		BagEntry: function () {
			this.value.verify();
		},

		BagSimple: function () {
			verifyEach(this.parts);
		},

		BlockDo: function () {
			verifyLines(this.lines);
		},

		BlockWithReturn: function () {
			var _this3 = this;

			var _verifyLines = verifyLines(this.lines);

			const newLocals = _verifyLines.newLocals;

			plusLocals(newLocals, function () {
				return _this3.returned.verify();
			});
		},

		BlockObj: function () {
			var _this4 = this;

			var _verifyLines2 = verifyLines(this.lines);

			const newLocals = _verifyLines2.newLocals;

			this.keys.forEach(function (_) {
				return accessLocalForReturn(_, _this4);
			});
			(0, _util.opEach)(this.opObjed, function (_) {
				return plusLocals(newLocals, function () {
					return _.verify();
				});
			});
		},

		BlockBag: blockBagOrMap,
		BlockMap: blockBagOrMap,

		BlockWrap: function () {
			this.block.verify();
		},

		BreakDo: function () {
			if (opLoop === null) context.fail(this.loc, 'Not in a loop.');
		},

		Call: function () {
			this.called.verify();
			verifyEach(this.args);
		},

		CaseDo: verifyCase,
		CaseDoPart: verifyCasePart,
		CaseVal: verifyCase,
		CaseValPart: verifyCasePart,

		// Only reach here for in/out condition
		Debug: function () {
			verifyLines([this]);
		},

		ForDoPlain: function () {
			var _this5 = this;

			withInLoop(this, function () {
				return _this5.block.verify();
			});
		},

		ForDoWithBag: function () {
			var _this6 = this;

			registerLocal(this.element);
			this.element.verify();
			this.bag.verify();
			plusLocal(this.element, function () {
				return withInLoop(_this6, function () {
					return _this6.block.verify();
				});
			});
		},

		Fun: function () {
			var _this7 = this;

			withBlockLocals(function () {
				context.check(_this7.opResDeclare === null || _this7.block instanceof _MsAst.BlockVal, _this7.loc, 'Function with return condition must return something.');
				_this7.args.forEach(function (arg) {
					return verifyOpEach(arg.opType);
				});
				withInGenerator(_this7.isGenerator, function () {
					const allArgs = (0, _util.cat)(_this7.args, _this7.opRestArg);
					allArgs.forEach(function (_) {
						return registerLocal(_);
					});
					plusLocals(allArgs, function () {
						verifyOpEach(_this7.opIn);
						_this7.block.verify();
						(0, _util.opEach)(_this7.opResDeclare, function (_) {
							_.verify();
							registerLocal(_);
						});
						const verifyOut = function () {
							return (0, _util.opEach)(_this7.opOut, function (_) {
								return _.verify();
							});
						};
						(0, _util.ifElse)(_this7.opResDeclare, function (rd) {
							return plusLocals([rd], verifyOut);
						}, verifyOut);
					});
				});
			});
		},

		GlobalAccess: function () {},

		IfDo: ifOrUnlessDo,

		Lazy: function () {
			var _this8 = this;

			withBlockLocals(function () {
				return _this8.value.verify();
			});
		},

		LocalAccess: function () {
			const declare = getLocalDeclare(this.name, this.loc);
			results.accessToLocal.set(this, declare);
			accessLocal(declare, this, isInDebug);
		},

		// Adding LocalDeclares to the available locals is done by Fun or lineNewLocals.
		LocalDeclare: function () {
			verifyOpEach(this.opType);
		},

		NumberLiteral: function () {},

		MapEntry: function () {
			this.key.verify();
			this.val.verify();
		},

		Member: function () {
			this.object.verify();
		},

		Module: function () {
			var _this9 = this;

			// No need to verify this.doUses.
			const useLocals = verifyUses(this.uses, this.debugUses);
			plusLocals(useLocals, function () {
				var _verifyLines3 = verifyLines(_this9.lines);

				const newLocals = _verifyLines3.newLocals;

				_this9.exports.forEach(function (ex) {
					return accessLocalForReturn(ex, _this9);
				});
				(0, _util.opEach)(_this9.opDefaultExport, function (_) {
					return plusLocals(newLocals, function () {
						return _.verify();
					});
				});
			});

			const exports = (0, _util.newSet)(this.exports);
			const markExportLines = function (line) {
				if (line instanceof _MsAst.Assign && exports.has(line.assignee) || line instanceof _MsAst.AssignDestructure && line.assignees.some(function (_) {
					return exports.has(_);
				})) results.exportAssigns.add(line);else if (line instanceof _MsAst.Debug) line.lines.forEach(markExportLines);
			};
			this.lines.forEach(markExportLines);
		},

		ObjSimple: function () {
			const keys = new Set();
			this.pairs.forEach(function (pair) {
				context.check(!keys.has(pair.key), pair.loc, function () {
					return 'Duplicate key ' + pair.key;
				});
				keys.add(pair.key);
				pair.value.verify();
			});
		},

		Quote: function () {
			this.parts.forEach(function (_) {
				if (typeof _ !== 'string') _.verify();
			});
		},

		SpecialDo: function () {},

		SpecialVal: function () {},

		Splat: function () {
			this.splatted.verify();
		},

		UnlessDo: ifOrUnlessDo,

		Yield: function () {
			context.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yielded.verify();
		},

		YieldTo: function () {
			context.check(isInGenerator, this.loc, 'Cannot yield outside of generator context');
			this.yieldedTo.verify();
		}
	});

	function blockBagOrMap() {
		var _verifyLines4 = verifyLines(this.lines);

		const listMapLength = _verifyLines4.listMapLength;

		results.blockToLength.set(this, listMapLength);
	}

	function ifOrUnlessDo() {
		this.test.verify();
		this.result.verify();
	}

	function verifyCase() {
		var _this10 = this;

		const doit = function () {
			verifyEach(_this10.parts);
			verifyOpEach(_this10.opElse);
		};
		(0, _util.ifElse)(this.opCased, function (_) {
			_.verify();
			registerLocal(_.assignee);
			plusLocal(_.assignee, doit);
		}, doit);
	}

	function verifyCasePart() {
		var _this11 = this;

		if (this.test instanceof _MsAst.Pattern) {
			this.test.type.verify();
			this.test.patterned.verify();
			verifyEach(this.test.locals);
			this.test.locals.forEach(registerLocal);
			plusLocals(this.test.locals, function () {
				return _this11.result.verify();
			});
		} else {
			this.test.verify();
			this.result.verify();
		}
	}

	const getLocalDeclare = function (name, accessLoc) {
		const declare = locals.get(name);
		context.check(declare !== undefined, accessLoc, function () {
			return 'No such local ' + (0, _CompileError.code)(name) + '.\nLocals are:\n' + (0, _CompileError.code)((0, _util.mapKeys)(locals).join(' ')) + '.';
		});
		return declare;
	},
	      lineNewLocals = function (line) {
		return line instanceof _MsAst.Assign ? [line.assignee] : line instanceof _MsAst.AssignDestructure ? line.assignees : [];
	},
	      verifyUses = function (uses, debugUses) {
		const useLocals = [];
		const verifyUse = function (use) {
			use.used.forEach(useLocal);
			(0, _util.opEach)(use.opUseDefault, useLocal);
		},
		      useLocal = function (_) {
			registerLocal(_);
			useLocals.push(_);
		};
		uses.forEach(verifyUse);
		withInDebug(true, function () {
			return debugUses.forEach(verifyUse);
		});
		return useLocals;
	},
	      verifyLines = function (lines) {
		const newLocals = [];
		// First, get locals for the whole block.
		const getLineLocals = function (line) {
			if (line instanceof _MsAst.Debug) withInDebug(true, function () {
				return line.lines.forEach(getLineLocals);
			});else {
				const news = lineNewLocals(line);
				news.forEach(registerLocal);
				newLocals.push.apply(newLocals, _toConsumableArray(news));
			}
		};

		lines.forEach(getLineLocals);

		const thisBlockLocalNames = new Set();
		const shadowed = new Map();

		let listMapLength = 0;

		const verifyLine = function (line) {
			if (line instanceof _MsAst.Debug)
				// TODO: Do anything in this situation?
				// context.check(!inDebug, line.loc, 'Redundant `debug`.')
				withInDebug(true, function () {
					return line.lines.forEach(verifyLine);
				});else {
				verifyIsStatement(line);
				lineNewLocals(line).forEach(function (l) {
					const got = locals.get(l.name);
					if (got !== undefined) {
						context.check(!thisBlockLocalNames.has(l.name), l.loc, function () {
							return 'A local ' + (0, _CompileError.code)(l.name) + ' is already in this block.';
						});
						shadowed.set(l.name, got);
					}
					locals.set(l.name, l);
					thisBlockLocalNames.add(l.name);
				});
				if (line instanceof _MsAst.BagEntry || line instanceof _MsAst.MapEntry) {
					setEntryIndex(line, listMapLength);
					listMapLength = listMapLength + 1;
				}
				line.verify();
			}
		};

		plusPendingBlockLocals(newLocals, function () {
			return lines.forEach(verifyLine);
		});

		newLocals.forEach(function (l) {
			const s = shadowed.get(l.name);
			if (s === undefined) locals.delete(l.name);else locals.set(l.name, s);
		});

		return { newLocals: newLocals, listMapLength: listMapLength };
	},
	      verifyIsStatement = function (line) {
		const isStatement = line instanceof _MsAst.Do || line instanceof _MsAst.Call || line instanceof _MsAst.Yield || line instanceof _MsAst.YieldTo || line instanceof _MsAst.BagEntry || line instanceof _MsAst.MapEntry || line instanceof _MsAst.SpecialDo;
		context.check(isStatement, line.loc, 'Expression in statement position.');
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3ZlcmlmeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFPQSxPQUFNLFVBQVUsR0FBRyxVQUFBLEVBQUU7U0FBSSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztVQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUU7R0FBQSxDQUFDO0VBQUEsQ0FBQTtBQUNwRCxPQUFNLFlBQVksR0FBRyxVQUFBLEVBQUU7U0FBSSxVQUowQyxNQUFNLEVBSXpDLEVBQUUsRUFBRSxVQUFBLENBQUM7VUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO0dBQUEsQ0FBQztFQUFBLENBQUE7O0FBRXRELEtBQ0MsT0FBTyxFQUNQLE1BQU07OztBQUdOLG1CQUFrQixFQUNsQixTQUFTLEVBQ1QsYUFBYSxFQUNiLE1BQU0sRUFDTixPQUFPLENBQUE7O0FBRVIsT0FDQyxlQUFlLEdBQUcsVUFBQyxjQUFjLEVBQUUsR0FBRyxFQUFLO0FBQzFDLFFBQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQTtBQUN2QixlQUFhLEdBQUcsY0FBYyxDQUFBO0FBQzlCLEtBQUcsRUFBRSxDQUFBO0FBQ0wsZUFBYSxHQUFHLENBQUMsQ0FBQTtFQUNqQjtPQUVELFNBQVMsR0FBRyxVQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUs7QUFDaEMsUUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDNUMsUUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0FBQ3ZDLEtBQUcsRUFBRSxDQUFBO0FBQ0wsY0FBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUE7RUFDdkM7T0FFRCxVQUFVLEdBQUcsVUFBQyxXQUFXLEVBQUUsR0FBRyxFQUFLO0FBQ2xDLFFBQU0sUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7QUFDMUIsYUFBVyxDQUFD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M0IsUUFBTSxXQUFXLEdBQ2hCLElBQUksbUJBdGJvRCxFQUFFLEFBc2J4QyxJQUNsQixJQUFJLG1CQXZidUMsSUFBSSxBQXViM0IsSUFDcEIsSUFBSSxtQkF2YnlDLEtBQUssQUF1YjdCLElBQ3JCLElBQUksbUJBeGJnRCxPQUFPLEFBd2JwQyxJQUN2QixJQUFJLG1CQTFid0QsUUFBUSxBQTBiNUMsSUFDeEIsSUFBSSxtQkExYlcsUUFBUSxBQTBiQyxJQUN4QixJQUFJLG1CQTNiOEIsU0FBUyxBQTJibEIsQ0FBQTtBQUMxQixTQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLG1DQUFtQyxDQUFDLENBQUE7RUFDekUsQ0FBQSIsImZpbGUiOiJtZXRhL2NvbXBpbGUvcHJpdmF0ZS92ZXJpZnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2RlIH0gZnJvbSAnLi4vQ29tcGlsZUVycm9yJ1xuaW1wb3J0ICogYXMgTXNBc3RUeXBlcyBmcm9tICcuLi9Nc0FzdCdcbmltcG9ydCB7IEFzc2lnbiwgQXNzaWduRGVzdHJ1Y3R1cmUsIEJsb2NrVmFsLCBDYWxsLCBEZWJ1ZywgRG8sIEJhZ0VudHJ5LFxuXHRMb2NhbERlY2xhcmVSZXMsIE1hcEVudHJ5LCBQYXR0ZXJuLCBTcGVjaWFsRG8sIFlpZWxkLCBZaWVsZFRvIH0gZnJvbSAnLi4vTXNBc3QnXG5pbXBvcnQgeyBjYXQsIGhlYWQsIGlmRWxzZSwgaW1wbGVtZW50TWFueSwgaXNFbXB0eSwgbWFwS2V5cywgbmV3U2V0LCBvcEVhY2ggfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgVmVyaWZ5UmVzdWx0cywgeyBMb2NhbEluZm8gfSBmcm9tICcuL1ZlcmlmeVJlc3VsdHMnXG5cbmNvbnN0IHZlcmlmeUVhY2ggPSBlcyA9PiBlcy5mb3JFYWNoKF8gPT4gXy52ZXJpZnkoKSlcbmNvbnN0IHZlcmlmeU9wRWFjaCA9IG9wID0+IG9wRWFjaChvcCwgXyA9PiBfLnZlcmlmeSgpKVxuXG5sZXRcblx0Y29udGV4dCxcblx0bG9jYWxzLFxuXHQvLyBMb2NhbHMgZm9yIHRoaXMgYmxvY2suXG5cdC8vIFJlcGxhY2VzIGBsb2NhbHNgIHdoZW4gZW50ZXJpbmcgaW50byBzdWItZnVuY3Rpb24uXG5cdHBlbmRpbmdCbG9ja0xvY2Fscyxcblx0aXNJbkRlYnVnLFxuXHRpc0luR2VuZXJhdG9yLFxuXHRvcExvb3AsXG5cdHJlc3VsdHNcblxuY29uc3Rcblx0d2l0aEluR2VuZXJhdG9yID0gKF9pc0luR2VuZXJhdG9yLCBmdW4pID0+IHtcblx0XHRjb25zdCBnID0gaXNJbkdlbmVyYXRvclxuXHRcdGlzSW5HZW5lcmF0b3IgPSBfaXNJbkdlbmVyYXRvclxuXHRcdGZ1bigpXG5cdFx0aXNJbkdlbmVyYXRvciA9IGdcblx0fSxcblxuXHRwbHVzTG9jYWwgPSAoYWRkZWRMb2NhbCwgZnVuKSA9PiB7XG5cdFx0Y29uc3Qgc2hhZG93ZWQgPSBsb2NhbHMuZ2V0KGFkZGVkTG9jYWwubmFtZSlcblx0XHRsb2NhbHMuc2V0KGFkZGVkTG9jYWwubmFtZSwgYWRkZWRMb2NhbClcblx0XHRmdW4oKVxuXHRcdF9yZW1vdmVMb2NhbChhZGRlZExvY2FsLm5hbWUsIHNoYWRvd2VkKVxuXHR9LFxuXG5cdHBsdXNMb2NhbHMgPSAoYWRkZWRMb2NhbHMsIGZ1bikgPT4ge1xuXHRcdGNvbnN0IHNoYWRvd2VkID0gbmV3IE1hcCgpXG5cdFx0YWRkZWRMb2NhbHMuZm9yRWFjaChfID0+IHtcblx0XHRcdGNvbnN0IGdvdCA9IGxvY2Fscy5nZXQoXy5uYW1lKVxuXHRcdFx0aWYgKGdvdCAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRzaGFkb3dlZC5zZXQoXy5uYW1lLCBnb3QpXG5cdFx0XHRsb2NhbHMuc2V0KF8ubmFtZSwgXylcblx0XHR9KVxuXHRcdGZ1bigpXG5cdFx0YWRkZWRMb2NhbHMuZm9yRWFjaChfID0+IF9yZW1vdmVMb2NhbChfLm5hbWUsIHNoYWRvd2VkLmdldChfLm5hbWUpKSlcblx0fSxcblxuXHRfcmVtb3ZlTG9jYWwgPSAobmFtZSwgc2hhZG93ZWQpID0+IHtcblx0XHRpZiAoc2hhZG93ZWQgPT09IHVuZGVmaW5lZClcblx0XHRcdGxvY2Fscy5kZWxldGUobmFtZSlcblx0XHRlbHNlXG5cdFx0XHRsb2NhbHMuc2V0KG5hbWUsIHNoYWRvd2VkKVxuXHR9LFxuXG5cdHBsdXNQZW5kaW5nQmxvY2tMb2NhbHMgPSAocGVuZGluZywgZnVuKSA9PiB7XG5cdFx0Y29uc3Qgb2xkTGVuZ3RoID0gcGVuZGluZ0Jsb2NrTG9jYWxzLmxlbmd0aFxuXHRcdHBlbmRpbmdCbG9ja0xvY2Fscy5wdXNoKC4uLnBlbmRpbmcpXG5cdFx0ZnVuKClcblx0XHR3aGlsZSAocGVuZGluZ0Jsb2NrTG9jYWxzLmxlbmd0aCA+IG9sZExlbmd0aClcblx0XHRcdHBlbmRpbmdCbG9ja0xvY2Fscy5wb3AoKVxuXHR9LFxuXG5cdHdpdGhJbkxvb3AgPSAobG9vcCwgZnVuKSA9PiB7XG5cdFx0Y29uc3QgbCA9IG9wTG9vcFxuXHRcdG9wTG9vcCA9IGxvb3Bcblx0XHRmdW4oKVxuXHRcdG9wTG9vcCA9IGxcblx0fSxcblxuXHR3aXRoSW5EZWJ1ZyA9IChfaXNJbkRlYnVnLCBmdW4pID0+IHtcblx0XHRjb25zdCBkID0gaXNJbkRlYnVnXG5cdFx0aXNJbkRlYnVnID0gX2lzSW5EZWJ1Z1xuXHRcdGZ1bigpXG5cdFx0aXNJbkRlYnVnID0gZFxuXHR9LFxuXG5cdHdpdGhCbG9ja0xvY2FscyA9IGZ1biA9PiB7XG5cdFx0Y29uc3QgYmwgPSBwZW5kaW5nQmxvY2tMb2NhbHNcblx0XHRwZW5kaW5nQmxvY2tMb2NhbHMgPSBbXVxuXHRcdHBsdXNMb2NhbHMoYmwsIGZ1bilcblx0XHRwZW5kaW5nQmxvY2tMb2NhbHMgPSBibFxuXHR9LFxuXG5cdGFjY2Vzc0xvY2FsID0gKGRlY2xhcmUsIGFjY2VzcywgaXNEZWJ1Z0FjY2VzcykgPT5cblx0XHRfYWRkQWNjZXNzKHJlc3VsdHMubG9jYWxUb0luZm8uZ2V0KGRlY2xhcmUpLCBhY2Nlc3MsIGlzRGVidWdBY2Nlc3MpLFxuXHRhY2Nlc3NMb2NhbEZvclJldHVybiA9IChkZWNsYXJlLCBhY2Nlc3MpID0+IHtcblx0XHRjb25zdCBpbmZvID0gcmVzdWx0cy5sb2NhbFRvSW5mby5nZXQoZGVjbGFyZSlcblx0XHRfYWRkQWNjZXNzKGluZm8sIGFjY2VzcywgaW5mby5pc0luRGVidWcpXG5cdH0sXG5cdF9hZGRBY2Nlc3MgPSAobG9jYWxJbmZvLCBhY2Nlc3MsIGlzRGVidWdBY2Nlc3MpID0+XG5cdFx0KGlzRGVidWdBY2Nlc3MgPyBsb2NhbEluZm8uZGVidWdBY2Nlc3NlcyA6IGxvY2FsSW5mby5ub25EZWJ1Z0FjY2Vzc2VzKS5wdXNoKGFjY2VzcyksXG5cblx0Ly8gVmVyaWZ5UmVzdWx0cyBzZXR0ZXJzXG5cdHJlZ2lzdGVyTG9jYWwgPSBsb2NhbCA9PlxuXHRcdHJlc3VsdHMubG9jYWxUb0luZm8uc2V0KGxvY2FsLCBMb2NhbEluZm8oaXNJbkRlYnVnLCBbXSwgW10pKSxcblxuXHRzZXRFbnRyeUluZGV4ID0gKGxpc3RNYXBFbnRyeSwgaW5kZXgpID0+XG5cdFx0cmVzdWx0cy5lbnRyeVRvSW5kZXguc2V0KGxpc3RNYXBFbnRyeSwgaW5kZXgpXG5cbmV4cG9ydCBkZWZhdWx0IChfY29udGV4dCwgYXN0KSA9PiB7XG5cdGNvbnRleHQgPSBfY29udGV4dFxuXHRsb2NhbHMgPSBuZXcgTWFwKClcblx0cGVuZGluZ0Jsb2NrTG9jYWxzID0gW11cblx0aXNJbkRlYnVnID0gZmFsc2Vcblx0aXNJbkdlbmVyYXRvciA9IGZhbHNlXG5cdG9wTG9vcCA9IG51bGxcblx0cmVzdWx0cyA9IG5ldyBWZXJpZnlSZXN1bHRzKClcblxuXHRhc3QudmVyaWZ5KClcblx0dmVyaWZ5TG9jYWxVc2UoKVxuXHRjb25zdCBvdXQgPSByZXN1bHRzXG5cblx0Ly8gUmVsZWFzZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuXHRsb2NhbHMgPSBwZW5kaW5nQmxvY2tMb2NhbHMgPSBvcExvb3AgPSByZXN1bHRzID0gdW5kZWZpbmVkXG5cblx0cmV0dXJuIG91dFxufVxuXG5jb25zdCB2ZXJpZnlMb2NhbFVzZSA9ICgpID0+XG5cdHJlc3VsdHMubG9jYWxUb0luZm8uZm9yRWFjaCgoaW5mbywgbG9jYWwpID0+IHtcblx0XHRpZiAoIShsb2NhbCBpbnN0YW5jZW9mIExvY2FsRGVjbGFyZVJlcykpIHtcblx0XHRcdGNvbnN0IG5vTm9uRGVidWcgPSBpc0VtcHR5KGluZm8ubm9uRGVidWdBY2Nlc3Nlcylcblx0XHRcdGlmIChub05vbkRlYnVnICYmIGlzRW1wdHkoaW5mby5kZWJ1Z0FjY2Vzc2VzKSlcblx0XHRcdFx0Y29udGV4dC53YXJuKGxvY2FsLmxvYywgKCkgPT4gYFVudXNlZCBsb2NhbCB2YXJpYWJsZSAke2NvZGUobG9jYWwubmFtZSl9LmApXG5cdFx0XHRlbHNlIGlmIChpbmZvLmlzSW5EZWJ1Zylcblx0XHRcdFx0Y29udGV4dC53YXJuSWYoIW5vTm9uRGVidWcsICgpID0+IGhlYWQoaW5mby5ub25EZWJ1Z0FjY2Vzc2VzKS5sb2MsICgpID0+XG5cdFx0XHRcdFx0YERlYnVnLW9ubHkgbG9jYWwgJHtjb2RlKGxvY2FsLm5hbWUpfSB1c2VkIG91dHNpZGUgb2YgZGVidWcuYClcblx0XHRcdGVsc2Vcblx0XHRcdFx0Y29udGV4dC53YXJuSWYobm9Ob25EZWJ1ZywgbG9jYWwubG9jLCAoKSA9PlxuXHRcdFx0XHRcdGBMb2NhbCAke2NvZGUobG9jYWwubmFtZSl9IHVzZWQgb25seSBpbiBkZWJ1Zy5gKVxuXHRcdH1cblx0fSlcblxuaW1wbGVtZW50TWFueShNc0FzdFR5cGVzLCAndmVyaWZ5Jywge1xuXHRBc3NpZ24oKSB7XG5cdFx0Y29uc3QgZG9WID0gKCkgPT4ge1xuXHRcdFx0dGhpcy5hc3NpZ25lZS52ZXJpZnkoKVxuXHRcdFx0dGhpcy52YWx1ZS52ZXJpZnkoKVxuXHRcdH1cblx0XHRpZiAodGhpcy5hc3NpZ25lZS5pc0xhenkoKSlcblx0XHRcdHdpdGhCbG9ja0xvY2Fscyhkb1YpXG5cdFx0ZWxzZVxuXHRcdFx0ZG9WKClcblx0fSxcblxuXHRBc3NpZ25EZXN0cnVjdHVyZSgpIHtcblx0XHR0aGlzLnZhbHVlLnZlcmlmeSgpXG5cdFx0dmVyaWZ5RWFjaCh0aGlzLmFzc2lnbmVlcylcblx0fSxcblxuXHRBc3NpZ25NdXRhdGUoKSB7XG5cdFx0Y29uc3QgZGVjbGFyZSA9IGdldExvY2FsRGVjbGFyZSh0aGlzLm5hbWUsIHRoaXMubG9jKVxuXHRcdGNvbnRleHQuY2hlY2soZGVjbGFyZS5pc011dGFibGUoKSwgdGhpcy5sb2MsICgpID0+IGAke2NvZGUodGhpcy5uYW1lKX0gaXMgbm90IG11dGFibGUuYClcblx0XHQvLyBUT0RPOiBUcmFjayBhc3NpZ25tZW50cy4gTXV0YWJsZSBsb2NhbCBtdXN0IGJlIG11dGF0ZWQgc29tZXdoZXJlLlxuXHRcdHRoaXMudmFsdWUudmVyaWZ5KClcblx0fSxcblxuXHRCYWdFbnRyeSgpIHsgdGhpcy52YWx1ZS52ZXJpZnkoKSB9LFxuXG5cdEJhZ1NpbXBsZSgpIHsgdmVyaWZ5RWFjaCh0aGlzLnBhcnRzKSB9LFxuXG5cdEJsb2NrRG8oKSB7IHZlcmlmeUxpbmVzKHRoaXMubGluZXMpIH0sXG5cblx0QmxvY2tXaXRoUmV0dXJuKCkge1xuXHRcdGNvbnN0IHsgbmV3TG9jYWxzIH0gPSB2ZXJpZnlMaW5lcyh0aGlzLmxpbmVzKVxuXHRcdHBsdXNMb2NhbHMobmV3TG9jYWxzLCAoKSA9PiB0aGlzLnJldHVybmVkLnZlcmlmeSgpKVxuXHR9LFxuXG5cdEJsb2NrT2JqKCkge1xuXHRcdGNvbnN0IHsgbmV3TG9jYWxzIH0gPSB2ZXJpZnlMaW5lcyh0aGlzLmxpbmVzKVxuXHRcdHRoaXMua2V5cy5mb3JFYWNoKF8gPT4gYWNjZXNzTG9jYWxGb3JSZXR1cm4oXywgdGhpcykpXG5cdFx0b3BFYWNoKHRoaXMub3BPYmplZCwgXyA9PiBwbHVzTG9jYWxzKG5ld0xvY2FscywgKCkgPT4gXy52ZXJpZnkoKSkpXG5cdH0sXG5cblx0QmxvY2tCYWc6IGJsb2NrQmFnT3JNYXAsXG5cdEJsb2NrTWFwOiBibG9ja0JhZ09yTWFwLFxuXG5cdEJsb2NrV3JhcCgpIHtcblx0XHR0aGlzLmJsb2NrLnZlcmlmeSgpXG5cdH0sXG5cblx0QnJlYWtEbygpIHtcblx0XHRpZiAob3BMb29wID09PSBudWxsKVxuXHRcdFx0Y29udGV4dC5mYWlsKHRoaXMubG9jLCAnTm90IGluIGEgbG9vcC4nKVxuXHR9LFxuXG5cdENhbGwoKSB7XG5cdFx0dGhpcy5jYWxsZWQudmVyaWZ5KClcblx0XHR2ZXJpZnlFYWNoKHRoaXMuYXJncylcblx0fSxcblxuXHRDYXNlRG86IHZlcmlmeUNhc2UsXG5cdENhc2VEb1BhcnQ6IHZlcmlmeUNhc2VQYXJ0LFxuXHRDYXNlVmFsOiB2ZXJpZnlDYXNlLFxuXHRDYXNlVmFsUGFydDogdmVyaWZ5Q2FzZVBhcnQsXG5cblx0Ly8gT25seSByZWFjaCBoZXJlIGZvciBpbi9vdXQgY29uZGl0aW9uXG5cdERlYnVnKCkgeyB2ZXJpZnlMaW5lcyhbIHRoaXMgXSkgfSxcblxuXHRGb3JEb1BsYWluKCkge1xuXHRcdHdpdGhJbkxvb3AodGhpcywgKCkgPT4gdGhpcy5ibG9jay52ZXJpZnkoKSlcblx0fSxcblxuXHRGb3JEb1dpdGhCYWcoKSB7XG5cdFx0cmVnaXN0ZXJMb2NhbCh0aGlzLmVsZW1lbnQpXG5cdFx0dGhpcy5lbGVtZW50LnZlcmlmeSgpXG5cdFx0dGhpcy5iYWcudmVyaWZ5KClcblx0XHRwbHVzTG9jYWwodGhpcy5lbGVtZW50LCAoKSA9PiB3aXRoSW5Mb29wKHRoaXMsICgpID0+IHRoaXMuYmxvY2sudmVyaWZ5KCkpKVxuXHR9LFxuXG5cdEZ1bigpIHtcblx0XHR3aXRoQmxvY2tMb2NhbHMoKCkgPT4ge1xuXHRcdFx0Y29udGV4dC5jaGVjayh0aGlzLm9wUmVzRGVjbGFyZSA9PT0gbnVsbCB8fCB0aGlzLmJsb2NrIGluc3RhbmNlb2YgQmxvY2tWYWwsIHRoaXMubG9jLFxuXHRcdFx0XHQnRnVuY3Rpb24gd2l0aCByZXR1cm4gY29uZGl0aW9uIG11c3QgcmV0dXJuIHNvbWV0aGluZy4nKVxuXHRcdFx0dGhpcy5hcmdzLmZvckVhY2goYXJnID0+IHZlcmlmeU9wRWFjaChhcmcub3BUeXBlKSlcblx0XHRcdHdpdGhJbkdlbmVyYXRvcih0aGlzLmlzR2VuZXJhdG9yLCAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGFsbEFyZ3MgPSBjYXQodGhpcy5hcmdzLCB0aGlzLm9wUmVzdEFyZylcblx0XHRcdFx0YWxsQXJncy5mb3JFYWNoKF8gPT4gcmVnaXN0ZXJMb2NhbChfKSlcblx0XHRcdFx0cGx1c0xvY2FscyhhbGxBcmdzLCAoKSA9PiB7XG5cdFx0XHRcdFx0dmVyaWZ5T3BFYWNoKHRoaXMub3BJbilcblx0XHRcdFx0XHR0aGlzLmJsb2NrLnZlcmlmeSgpXG5cdFx0XHRcdFx0b3BFYWNoKHRoaXMub3BSZXNEZWNsYXJlLCBfID0+IHtcblx0XHRcdFx0XHRcdF8udmVyaWZ5KClcblx0XHRcdFx0XHRcdHJlZ2lzdGVyTG9jYWwoXylcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdGNvbnN0IHZlcmlmeU91dCA9ICgpID0+IG9wRWFjaCh0aGlzLm9wT3V0LCBfID0+IF8udmVyaWZ5KCkpXG5cdFx0XHRcdFx0aWZFbHNlKHRoaXMub3BSZXNEZWNsYXJlLCByZCA9PiBwbHVzTG9jYWxzKFsgcmQgXSwgdmVyaWZ5T3V0KSwgdmVyaWZ5T3V0KVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0XHR9KVxuXHR9LFxuXG5cdEdsb2JhbEFjY2VzcygpIHsgfSxcblxuXHRJZkRvOiBpZk9yVW5sZXNzRG8sXG5cblx0TGF6eSgpIHsgd2l0aEJsb2NrTG9jYWxzKCgpID0+IHRoaXMudmFsdWUudmVyaWZ5KCkpIH0sXG5cblx0TG9jYWxBY2Nlc3MoKSB7XG5cdFx0Y29uc3QgZGVjbGFyZSA9IGdldExvY2FsRGVjbGFyZSh0aGlzLm5hbWUsIHRoaXMubG9jKVxuXHRcdHJlc3VsdHMuYWNjZXNzVG9Mb2NhbC5zZXQodGhpcywgZGVjbGFyZSlcblx0XHRhY2Nlc3NMb2NhbChkZWNsYXJlLCB0aGlzLCBpc0luRGVidWcpXG5cdH0sXG5cblx0Ly8gQWRkaW5nIExvY2FsRGVjbGFyZXMgdG8gdGhlIGF2YWlsYWJsZSBsb2NhbHMgaXMgZG9uZSBieSBGdW4gb3IgbGluZU5ld0xvY2Fscy5cblx0TG9jYWxEZWNsYXJlKCkgeyB2ZXJpZnlPcEVhY2godGhpcy5vcFR5cGUpIH0sXG5cblx0TnVtYmVyTGl0ZXJhbCgpIHsgfSxcblxuXHRNYXBFbnRyeSgpIHtcblx0XHR0aGlzLmtleS52ZXJpZnkoKVxuXHRcdHRoaXMudmFsLnZlcmlmeSgpXG5cdH0sXG5cblx0TWVtYmVyKCkgeyB0aGlzLm9iamVjdC52ZXJpZnkoKSB9LFxuXG5cdE1vZHVsZSgpIHtcblx0XHQvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGlzLmRvVXNlcy5cblx0XHRjb25zdCB1c2VMb2NhbHMgPSB2ZXJpZnlVc2VzKHRoaXMudXNlcywgdGhpcy5kZWJ1Z1VzZXMpXG5cdFx0cGx1c0xvY2Fscyh1c2VMb2NhbHMsICgpID0+IHtcblx0XHRcdGNvbnN0IHsgbmV3TG9jYWxzIH0gPSB2ZXJpZnlMaW5lcyh0aGlzLmxpbmVzKVxuXHRcdFx0dGhpcy5leHBvcnRzLmZvckVhY2goZXggPT4gYWNjZXNzTG9jYWxGb3JSZXR1cm4oZXgsIHRoaXMpKVxuXHRcdFx0b3BFYWNoKHRoaXMub3BEZWZhdWx0RXhwb3J0LCBfID0+IHBsdXNMb2NhbHMobmV3TG9jYWxzLCAoKSA9PiBfLnZlcmlmeSgpKSlcblx0XHR9KVxuXG5cdFx0Y29uc3QgZXhwb3J0cyA9IG5ld1NldCh0aGlzLmV4cG9ydHMpXG5cdFx0Y29uc3QgbWFya0V4cG9ydExpbmVzID0gbGluZSA9PiB7XG5cdFx0XHRpZiAobGluZSBpbnN0YW5jZW9mIEFzc2lnbiAmJiBleHBvcnRzLmhhcyhsaW5lLmFzc2lnbmVlKSB8fFxuXHRcdFx0XHRsaW5lIGluc3RhbmNlb2YgQXNzaWduRGVzdHJ1Y3R1cmUgJiYgbGluZS5hc3NpZ25lZXMuc29tZShfID0+IGV4cG9ydHMuaGFzKF8pKSlcblx0XHRcdFx0cmVzdWx0cy5leHBvcnRBc3NpZ25zLmFkZChsaW5lKVxuXHRcdFx0ZWxzZSBpZiAobGluZSBpbnN0YW5jZW9mIERlYnVnKVxuXHRcdFx0XHRsaW5lLmxpbmVzLmZvckVhY2gobWFya0V4cG9ydExpbmVzKVxuXHRcdH1cblx0XHR0aGlzLmxpbmVzLmZvckVhY2gobWFya0V4cG9ydExpbmVzKVxuXHR9LFxuXG5cdE9ialNpbXBsZSgpIHtcblx0XHRjb25zdCBrZXlzID0gbmV3IFNldCgpXG5cdFx0dGhpcy5wYWlycy5mb3JFYWNoKHBhaXIgPT4ge1xuXHRcdFx0Y29udGV4dC5jaGVjaygha2V5cy5oYXMocGFpci5rZXkpLCBwYWlyLmxvYywgKCkgPT4gYER1cGxpY2F0ZSBrZXkgJHtwYWlyLmtleX1gKVxuXHRcdFx0a2V5cy5hZGQocGFpci5rZXkpXG5cdFx0XHRwYWlyLnZhbHVlLnZlcmlmeSgpXG5cdFx0fSlcblx0fSxcblxuXHRRdW90ZSgpIHtcblx0XHR0aGlzLnBhcnRzLmZvckVhY2goXyA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIF8gIT09ICdzdHJpbmcnKVxuXHRcdFx0XHRfLnZlcmlmeSgpXG5cdFx0fSlcblx0fSxcblxuXHRTcGVjaWFsRG8oKSB7IH0sXG5cblx0U3BlY2lhbFZhbCgpIHsgfSxcblxuXHRTcGxhdCgpIHsgdGhpcy5zcGxhdHRlZC52ZXJpZnkoKSB9LFxuXG5cdFVubGVzc0RvOiBpZk9yVW5sZXNzRG8sXG5cblx0WWllbGQoKSB7XG5cdFx0Y29udGV4dC5jaGVjayhpc0luR2VuZXJhdG9yLCB0aGlzLmxvYywgJ0Nhbm5vdCB5aWVsZCBvdXRzaWRlIG9mIGdlbmVyYXRvciBjb250ZXh0Jylcblx0XHR0aGlzLnlpZWxkZWQudmVyaWZ5KClcblx0fSxcblxuXHRZaWVsZFRvKCkge1xuXHRcdGNvbnRleHQuY2hlY2soaXNJbkdlbmVyYXRvciwgdGhpcy5sb2MsICdDYW5ub3QgeWllbGQgb3V0c2lkZSBvZiBnZW5lcmF0b3IgY29udGV4dCcpXG5cdFx0dGhpcy55aWVsZGVkVG8udmVyaWZ5KClcblx0fVxufSlcblxuZnVuY3Rpb24gYmxvY2tCYWdPck1hcCgpIHtcblx0Y29uc3QgeyBsaXN0TWFwTGVuZ3RoIH0gPSB2ZXJpZnlMaW5lcyh0aGlzLmxpbmVzKVxuXHRyZXN1bHRzLmJsb2NrVG9MZW5ndGguc2V0KHRoaXMsIGxpc3RNYXBMZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGlmT3JVbmxlc3NEbygpIHtcblx0dGhpcy50ZXN0LnZlcmlmeSgpXG5cdHRoaXMucmVzdWx0LnZlcmlmeSgpXG59XG5cbmZ1bmN0aW9uIHZlcmlmeUNhc2UoKSB7XG5cdGNvbnN0IGRvaXQgPSAoKSA9PiB7XG5cdFx0dmVyaWZ5RWFjaCh0aGlzLnBhcnRzKVxuXHRcdHZlcmlmeU9wRWFjaCh0aGlzLm9wRWxzZSlcblx0fVxuXHRpZkVsc2UodGhpcy5vcENhc2VkLFxuXHRcdF8gPT4ge1xuXHRcdFx0Xy52ZXJpZnkoKVxuXHRcdFx0cmVnaXN0ZXJMb2NhbChfLmFzc2lnbmVlKVxuXHRcdFx0cGx1c0xvY2FsKF8uYXNzaWduZWUsIGRvaXQpXG5cdFx0fSxcblx0XHRkb2l0KVxufVxuXG5mdW5jdGlvbiB2ZXJpZnlDYXNlUGFydCgpIHtcblx0aWYgKHRoaXMudGVzdCBpbnN0YW5jZW9mIFBhdHRlcm4pIHtcblx0XHR0aGlzLnRlc3QudHlwZS52ZXJpZnkoKVxuXHRcdHRoaXMudGVzdC5wYXR0ZXJuZWQudmVyaWZ5KClcblx0XHR2ZXJpZnlFYWNoKHRoaXMudGVzdC5sb2NhbHMpXG5cdFx0dGhpcy50ZXN0LmxvY2Fscy5mb3JFYWNoKHJlZ2lzdGVyTG9jYWwpXG5cdFx0cGx1c0xvY2Fscyh0aGlzLnRlc3QubG9jYWxzLCAoKSA9PiB0aGlzLnJlc3VsdC52ZXJpZnkoKSlcblx0fSBlbHNlIHtcblx0XHR0aGlzLnRlc3QudmVyaWZ5KClcblx0XHR0aGlzLnJlc3VsdC52ZXJpZnkoKVxuXHR9XG59XG5cbmNvbnN0XG5cdGdldExvY2FsRGVjbGFyZSA9IChuYW1lLCBhY2Nlc3NMb2MpID0+IHtcblx0XHRjb25zdCBkZWNsYXJlID0gbG9jYWxzLmdldChuYW1lKVxuXHRcdGNvbnRleHQuY2hlY2soZGVjbGFyZSAhPT0gdW5kZWZpbmVkLCBhY2Nlc3NMb2MsICgpID0+XG5cdFx0XHRgTm8gc3VjaCBsb2NhbCAke2NvZGUobmFtZSl9LlxcbkxvY2FscyBhcmU6XFxuJHtjb2RlKG1hcEtleXMobG9jYWxzKS5qb2luKCcgJykpfS5gKVxuXHRcdHJldHVybiBkZWNsYXJlXG5cdH0sXG5cblx0bGluZU5ld0xvY2FscyA9IGxpbmUgPT5cblx0XHRsaW5lIGluc3RhbmNlb2YgQXNzaWduID9cblx0XHRcdFsgbGluZS5hc3NpZ25lZSBdIDpcblx0XHRcdGxpbmUgaW5zdGFuY2VvZiBBc3NpZ25EZXN0cnVjdHVyZSA/XG5cdFx0XHRsaW5lLmFzc2lnbmVlcyA6XG5cdFx0XHRbIF0sXG5cblx0dmVyaWZ5VXNlcyA9ICh1c2VzLCBkZWJ1Z1VzZXMpID0+IHtcblx0XHRjb25zdCB1c2VMb2NhbHMgPSBbXVxuXHRcdGNvbnN0XG5cdFx0XHR2ZXJpZnlVc2UgPSB1c2UgPT4ge1xuXHRcdFx0XHR1c2UudXNlZC5mb3JFYWNoKHVzZUxvY2FsKVxuXHRcdFx0XHRvcEVhY2godXNlLm9wVXNlRGVmYXVsdCwgdXNlTG9jYWwpXG5cdFx0XHR9LFxuXHRcdFx0dXNlTG9jYWwgPSBfID0+IHtcblx0XHRcdFx0cmVnaXN0ZXJMb2NhbChfKVxuXHRcdFx0XHR1c2VMb2NhbHMucHVzaChfKVxuXHRcdFx0fVxuXHRcdHVzZXMuZm9yRWFjaCh2ZXJpZnlVc2UpXG5cdFx0d2l0aEluRGVidWcodHJ1ZSwgKCkgPT4gZGVidWdVc2VzLmZvckVhY2godmVyaWZ5VXNlKSlcblx0XHRyZXR1cm4gdXNlTG9jYWxzXG5cdH0sXG5cblx0dmVyaWZ5TGluZXMgPSBsaW5lcyA9PiB7XG5cdFx0Y29uc3QgbmV3TG9jYWxzID0gWyBdXG5cdFx0Ly8gRmlyc3QsIGdldCBsb2NhbHMgZm9yIHRoZSB3aG9sZSBibG9jay5cblx0XHRjb25zdCBnZXRMaW5lTG9jYWxzID0gbGluZSA9PiB7XG5cdFx0XHRpZiAobGluZSBpbnN0YW5jZW9mIERlYnVnKVxuXHRcdFx0XHR3aXRoSW5EZWJ1Zyh0cnVlLCAoKSA9PiBsaW5lLmxpbmVzLmZvckVhY2goZ2V0TGluZUxvY2FscykpXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y29uc3QgbmV3cyA9IGxpbmVOZXdMb2NhbHMobGluZSlcblx0XHRcdFx0bmV3cy5mb3JFYWNoKHJlZ2lzdGVyTG9jYWwpXG5cdFx0XHRcdG5ld0xvY2Fscy5wdXNoKC4uLm5ld3MpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGluZXMuZm9yRWFjaChnZXRMaW5lTG9jYWxzKVxuXG5cdFx0Y29uc3QgdGhpc0Jsb2NrTG9jYWxOYW1lcyA9IG5ldyBTZXQoKVxuXHRcdGNvbnN0IHNoYWRvd2VkID0gbmV3IE1hcCgpXG5cblx0XHRsZXQgbGlzdE1hcExlbmd0aCA9IDBcblxuXHRcdGNvbnN0IHZlcmlmeUxpbmUgPSBsaW5lID0+IHtcblx0XHRcdGlmIChsaW5lIGluc3RhbmNlb2YgRGVidWcpXG5cdFx0XHRcdC8vIFRPRE86IERvIGFueXRoaW5nIGluIHRoaXMgc2l0dWF0aW9uP1xuXHRcdFx0XHQvLyBjb250ZXh0LmNoZWNrKCFpbkRlYnVnLCBsaW5lLmxvYywgJ1JlZHVuZGFudCBgZGVidWdgLicpXG5cdFx0XHRcdHdpdGhJbkRlYnVnKHRydWUsICgpID0+IGxpbmUubGluZXMuZm9yRWFjaCh2ZXJpZnlMaW5lKSlcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR2ZXJpZnlJc1N0YXRlbWVudChsaW5lKVxuXHRcdFx0XHRsaW5lTmV3TG9jYWxzKGxpbmUpLmZvckVhY2gobCA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgZ290ID0gbG9jYWxzLmdldChsLm5hbWUpXG5cdFx0XHRcdFx0aWYgKGdvdCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LmNoZWNrKCF0aGlzQmxvY2tMb2NhbE5hbWVzLmhhcyhsLm5hbWUpLCBsLmxvYyxcblx0XHRcdFx0XHRcdFx0KCkgPT4gYEEgbG9jYWwgJHtjb2RlKGwubmFtZSl9IGlzIGFscmVhZHkgaW4gdGhpcyBibG9jay5gKVxuXHRcdFx0XHRcdFx0c2hhZG93ZWQuc2V0KGwubmFtZSwgZ290KVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsb2NhbHMuc2V0KGwubmFtZSwgbClcblx0XHRcdFx0XHR0aGlzQmxvY2tMb2NhbE5hbWVzLmFkZChsLm5hbWUpXG5cdFx0XHRcdH0pXG5cdFx0XHRcdGlmIChsaW5lIGluc3RhbmNlb2YgQmFnRW50cnkgfHwgbGluZSBpbnN0YW5jZW9mIE1hcEVudHJ5KSB7XG5cdFx0XHRcdFx0c2V0RW50cnlJbmRleChsaW5lLCBsaXN0TWFwTGVuZ3RoKVxuXHRcdFx0XHRcdGxpc3RNYXBMZW5ndGggPSBsaXN0TWFwTGVuZ3RoICsgMVxuXHRcdFx0XHR9XG5cdFx0XHRcdGxpbmUudmVyaWZ5KClcblx0XHRcdH1cblx0XHR9XG5cblx0XHRwbHVzUGVuZGluZ0Jsb2NrTG9jYWxzKG5ld0xvY2FscywgKCkgPT4gbGluZXMuZm9yRWFjaCh2ZXJpZnlMaW5lKSlcblxuXHRcdG5ld0xvY2Fscy5mb3JFYWNoKGwgPT4ge1xuXHRcdFx0Y29uc3QgcyA9IHNoYWRvd2VkLmdldChsLm5hbWUpXG5cdFx0XHRpZiAocyA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRsb2NhbHMuZGVsZXRlKGwubmFtZSlcblx0XHRcdGVsc2Vcblx0XHRcdFx0bG9jYWxzLnNldChsLm5hbWUsIHMpXG5cdFx0fSlcblxuXHRcdHJldHVybiB7IG5ld0xvY2FscywgbGlzdE1hcExlbmd0aCB9XG5cdH0sXG5cblx0dmVyaWZ5SXNTdGF0ZW1lbnQgPSBsaW5lID0+IHtcblx0XHRjb25zdCBpc1N0YXRlbWVudCA9XG5cdFx0XHRsaW5lIGluc3RhbmNlb2YgRG8gfHxcblx0XHRcdGxpbmUgaW5zdGFuY2VvZiBDYWxsIHx8XG5cdFx0XHRsaW5lIGluc3RhbmNlb2YgWWllbGQgfHxcblx0XHRcdGxpbmUgaW5zdGFuY2VvZiBZaWVsZFRvIHx8XG5cdFx0XHRsaW5lIGluc3RhbmNlb2YgQmFnRW50cnkgfHxcblx0XHRcdGxpbmUgaW5zdGFuY2VvZiBNYXBFbnRyeSB8fFxuXHRcdFx0bGluZSBpbnN0YW5jZW9mIFNwZWNpYWxEb1xuXHRcdGNvbnRleHQuY2hlY2soaXNTdGF0ZW1lbnQsIGxpbmUubG9jLCAnRXhwcmVzc2lvbiBpbiBzdGF0ZW1lbnQgcG9zaXRpb24uJylcblx0fVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=