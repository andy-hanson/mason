{"version":3,"sources":["meta/compile/private/Opts.js"],"names":[],"mappings":"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","file":"meta/compile/private/Opts.js","sourcesContent":["import { last } from './U/Bag'\nimport type from './U/type'\nimport { ObjType } from './U/types'\n\n\n/*\nOpts object\nmandatory:\n\tinFile: String\n\t\tpath to input file.\n\t\tOptional if not includeSourceMap.\n\noptional:\n\tchecks: Boolean\n\t\tWhether to include assertions.\n\t\tCall also be { use, type, inout, case } for specific types of assertions.\n\tincludeSourceMap: Boolean\n\tuseStrict: Boolean\n*/\nexport const OptsFromObject = obj => {\n\tconst defaults = {\n\t\tchecks: true,\n\t\tincludeAmdefine: true,\n\t\tincludeSourceMap: true,\n\t\tincludeModuleDisplayName: true,\n\t\tforceNonLazyModule: false\n\t}\n\tconst opts = Object.assign({}, defaults, obj)\n\tif (!opts.inFile) {\n\t\tif (opts.includeSourceMap)\n\t\t\tthrow new Error('Either supply `inFile` option or make `includeSourceMap` false.')\n\t\tif (opts.includeModuleDisplayName)\n\t\t\tthrow new Error(\n\t\t\t\t'Either supply `inFile` option or make `includeModuleDisplayName` false.')\n\t}\n\treturn new Opts(opts)\n}\n\nconst Opts = ObjType('Opts', Object, {\n\tinFile: String,\n\tchecks: Boolean,\n\tincludeAmdefine: Boolean,\n\tincludeSourceMap: Boolean,\n\tincludeModuleDisplayName: Boolean,\n\tforceNonLazyModule: Boolean\n})\nexport default Opts\nObject.assign(Opts.prototype, {\n\tmoduleName() { return noExt(basename(this.inFile)) },\n\tjsBaseName() { return `${this.moduleName()}.js` },\n\tmodulePath() { return this.inFile },\n\n\t_check(name) {\n\t\tif (typeof this.checks === 'boolean')\n\t\t\treturn this.checks\n\t\telse {\n\t\t\ttype(this.checks, Object)\n\t\t\ttype(this.checks[name], 'boolean')\n\t\t\treturn this.checks[name]\n\t\t}\n\t},\n\tincludeUseChecks() { return this._check('use') },\n\tincludeTypeChecks() { return this._check('type') },\n\tincludeInoutChecks() { return this._check('inout') },\n\tincludeCaseChecks() { return this._check('case') },\n\n\tamdefine() { return this.includeAmdefine },\n\tsourceMap() { return this.includeSourceMap },\n\tmoduleDisplayName() { return this.includeModuleDisplayName },\n\tlazyModule() { return !this.forceNonLazyModule }\n})\n\nconst basename = path =>\n\tlast(path.split('/'))\nconst extname = path =>\n\tlast(path.split('.'))\nconst noExt = path =>\n\t// - 1 for the '.'\n\tpath.substring(0, path.length - 1 - extname(path).length)\n"],"sourceRoot":"/src"}