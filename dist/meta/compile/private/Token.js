if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/Loc', 'tupl/dist/tupl', '../CompileError', '../Expression', './util'], function (exports, _esastDistLoc, _tuplDistTupl, _CompileError, _Expression, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Loc = _interopRequire(_esastDistLoc);

	var _tupl = _interopRequire(_tuplDistTupl);

	const Token = (0, _tuplDistTupl.abstract)('Token', Object, 'TODO:doc');
	exports.default = Token;

	const tt = function (name, namesTypes, props) {
		return (0, _tupl)(name, Token, 'doc', ['loc', _Loc].concat(namesTypes), {}, props);
	};

	// Don't use `0` because we want to use negative nmbers to represent GroupPre closers.
	const G_Paren = 1,
	      G_Bracket = 2,
	      G_Block = 3,
	      G_Quote = 4,
	      G_Line = 5,
	      G_Space = 6;

	exports.G_Paren = G_Paren;
	exports.G_Bracket = G_Bracket;
	exports.G_Block = G_Block;
	exports.G_Quote = G_Quote;
	exports.G_Line = G_Line;
	exports.G_Space = G_Space;
	let nextId = 0;
	const nameToK = new Map();
	const kToName = new Map();
	const kw = function (name) {
		const k = kwNotName(name);
		nameToK.set(name, k);
		return k;
	};
	const kwNotName = function (debugName) {
		const k = nextId;
		kToName.set(k, debugName);
		nextId = nextId + 1;
		return k;
	};

	const KW_Assign = kw('='),
	      KW_AssignMutable = kw('::='),
	      KW_AssignMutate = kw(':='),
	      KW_BreakDo = kw('break!'),
	      KW_Case = kw('case'),
	      KW_CaseDo = kw('case!'),
	      KW_Debug = kw('debug'),
	      KW_Debugger = kw('debugger'),
	      KW_Else = kw('else'),
	      KW_False = kw('false'),
	      KW_Focus = kwNotName('_'),
	      KW_ForDo = kw('for!'),
	      KW_Fun = kw('|'),
	      KW_GenFun = kw('~|'),
	      KW_IfDo = kw('if!'),
	      KW_In = kw('in'),
	      KW_Lazy = kwNotName('~'),
	      KW_MapEntry = kw('->'),
	      KW_Null = kw('null'),
	      KW_ObjAssign = kw('. '),
	      KW_Out = kw('out'),
	      KW_Pass = kw('pass'),
	      KW_Region = kw('region'),
	      KW_This = kw('this'),
	      KW_ThisModuleDirectory = kw('this-module-directory'),
	      KW_True = kw('true'),
	      KW_Type = kwNotName(':'),
	      KW_Undefined = kw('undefined'),
	      KW_UnlessDo = kw('unless!'),
	      KW_Use = kw('use'),
	      KW_UseDebug = kw('use-debug'),
	      KW_UseDo = kw('use!'),
	      KW_UseLazy = kw('use~'),
	      KW_Yield = kw('<~'),
	      KW_YieldTo = kw('<~~');

	exports.KW_Assign = KW_Assign;
	exports.KW_AssignMutable = KW_AssignMutable;
	exports.KW_AssignMutate = KW_AssignMutate;
	exports.KW_BreakDo = KW_BreakDo;
	exports.KW_Case = KW_Case;
	exports.KW_CaseDo = KW_CaseDo;
	exports.KW_Debug = KW_Debug;
	exports.KW_Debugger = KW_Debugger;
	exports.KW_Else = KW_Else;
	exports.KW_False = KW_False;
	exports.KW_Focus = KW_Focus;
	exports.KW_ForDo = KW_ForDo;
	exports.KW_Fun = KW_Fun;
	exports.KW_GenFun = KW_GenFun;
	exports.KW_IfDo = KW_IfDo;
	exports.KW_In = KW_In;
	exports.KW_Lazy = KW_Lazy;
	exports.KW_MapEntry = KW_MapEntry;
	exports.KW_Null = KW_Null;
	exports.KW_ObjAssign = KW_ObjAssign;
	exports.KW_Out = KW_Out;
	exports.KW_Pass = KW_Pass;
	exports.KW_Region = KW_Region;
	exports.KW_This = KW_This;
	exports.KW_ThisModuleDirectory = KW_ThisModuleDirectory;
	exports.KW_True = KW_True;
	exports.KW_Type = KW_Type;
	exports.KW_Undefined = KW_Undefined;
	exports.KW_UnlessDo = KW_UnlessDo;
	exports.KW_Use = KW_Use;
	exports.KW_UseDebug = KW_UseDebug;
	exports.KW_UseDo = KW_UseDo;
	exports.KW_UseLazy = KW_UseLazy;
	exports.KW_Yield = KW_Yield;
	exports.KW_YieldTo = KW_YieldTo;
	const keywordKFromName = function (name) {
		return nameToK.get(name);
	},
	      opKWtoSV = function (kw) {
		switch (kw) {
			case KW_False:
				return _Expression.SV_False;
			case KW_Null:
				return _Expression.SV_Null;
			case KW_This:
				return _Expression.SV_This;
			case KW_ThisModuleDirectory:
				return _Expression.SV_ThisModuleDirectory;
			case KW_True:
				return _Expression.SV_True;
			case KW_Undefined:
				return _Expression.SV_Undefined;
			default:
				return null;
		}
	};

	exports.keywordKFromName = keywordKFromName;
	exports.opKWtoSV = opKWtoSV;
	const CallOnFocus = tt('CallOnFocus', ['name', String]),
	      DotName = tt('DotName', ['nDots', Number, 'name', String]),
	      Group = tt('Group', ['tokens', [Token], 'kind', Number]),
	      Keyword = tt('Keyword', ['kind', Number]),
	      Name = tt('Name', ['name', String]),
	      TokenNumberLiteral = tt('TokenNumberLiteral', ['value', Number]);

	exports.CallOnFocus = CallOnFocus;
	exports.DotName = DotName;
	exports.Group = Group;
	exports.Keyword = Keyword;
	exports.Name = Name;
	exports.TokenNumberLiteral = TokenNumberLiteral;
	const isGroup = function (groupKind, token) {
		return token instanceof Group && token.kind === groupKind;
	},
	      isKeyword = function (keywordKind, token) {
		return token instanceof Keyword && token.kind === keywordKind;
	};

	exports.isGroup = isGroup;
	exports.isKeyword = isKeyword;
	// toString is used by some parsing errors. Use U.inspect for a more detailed view.
	(0, _util.implementMany)({ CallOnFocus: CallOnFocus, DotName: DotName, Group: Group, Keyword: Keyword, Name: Name, TokenNumberLiteral: TokenNumberLiteral }, 'show', {
		CallOnFocus: function () {
			return '' + this.name + '_';
		},
		DotName: function () {
			return '' + '.'.repeat(this.nDots) + '' + this.name;
		},
		// TODO: better representation of k
		Group: function () {
			return 'group(k=' + this.kind + ')';
		},
		// TODO: better representation of k
		Keyword: function () {
			return (0, _CompileError.code)(kToName.get(this.kind));
		},
		Name: function () {
			return this.name;
		},
		TokenNumberLiteral: function () {
			return this.value;
		}
	});

	//TODO:KILL
	Keyword.prototype.toString = Keyword.prototype.show;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL1Rva2VuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFPQSxPQUFNLEtBQUssR0FBRyxrQkFOQyxRQUFRLEVBTUEsT0FBTyxFQUFFLE1BQU0sRUFDckMsVUFBVSxDQUFDLENBQUE7bUJBQ0csS0FBSzs7QUFFcEIsT0FBTSxFQUFFLEdBQUcsVUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUs7U0FDbEMsV0FBSyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFFLEtBQUssT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFHLEVBQUUsS0FBSyxDQUFDO0VBQUEsQ0FBQTs7O0FBR2pFLE9BQ04sT0FBTyxHQUFHLENBQUM7T0FDWCxTQUFTLEdBQUcsQ0FBQztPQUNiLE9BQU8sR0FBRyxDQUFDO09BQ1gsT0FBTyxHQUFHLENBQUM7T0FDWCxNQUFNLEdBQUcsQ0FBQztPQUNWLE9BQU8sR0FBRyxDQUFDLENBQUE7O1NBTFgsT0FBTyxHQUFQLE9BQU87U0FDUCxTQUFTLEdBQVQsU0FBUztTQUNULE9BQU8sR0FBUCxPQUFPO1NBQ1AsT0FBTyxHQUFQLE9BQU87U0FDUCxNQUFNLEdBQU4sTUFBTTtTQUNOLE9BQU8sR0FBUCxPQUFPO0FBRVIsS0FBSSxNQUFNLEdBQUcsQ0FBQyxDQUFBO0FBQ2QsT0FBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtBQUN6QixPQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0FBQ3pCLE9BQU0sRUFBRSxHQUFHLFVBQUEsSUFBSSxFQUFJO0FBQ2xCLFFBQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN6QixTQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNwQixTQUFPLENBQUMsQ0FBQTtFQUNSLENBQUE7QUFDRCxPQUFNLFNBQVMsR0FBRyxVQUFBLFNB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a0IsRUFBRSxFQUFFLE1BQU0sRUFBRTtBQUN6RixhQUFXLEVBQUEsWUFBRztBQUFFLGVBQVUsSUFBSSxDQUFDLElBQUksT0FBRztHQUFFO0FBQ3hDLFNBQU8sRUFBQSxZQUFHO0FBQUUsZUFBVSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBRyxJQUFJLENBQUMsSUFBSSxDQUFFO0dBQUU7O0FBRTVELE9BQUssRUFBQSxZQUFHO0FBQUUsdUJBQWtCLElBQUksQ0FBQyxJQUFJLE9BQUc7R0FBRTs7QUFFMUMsU0FBTyxFQUFBLFlBQUc7QUFBRSxVQUFPLGtCQTdHWCxJQUFJLEVBNkdZLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7R0FBRTtBQUNqRCxNQUFJLEVBQUEsWUFBRztBQUFFLFVBQU8sSUFBSSxDQUFDLElBQUksQ0FBQTtHQUFFO0FBQzNCLG9CQUFrQixFQUFBLFlBQUc7QUFBRSxVQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7R0FBRTtFQUMxQyxDQUFDLENBQUE7OztBQUdGLFFBQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFBIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL1Rva2VuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvYyBmcm9tICdlc2FzdC9kaXN0L0xvYydcbmltcG9ydCB0dXBsLCB7IGFic3RyYWN0IH0gZnJvbSAndHVwbC9kaXN0L3R1cGwnXG5pbXBvcnQgeyBjb2RlIH0gZnJvbSAnLi4vQ29tcGlsZUVycm9yJ1xuaW1wb3J0IHsgU1ZfRmFsc2UsIFNWX051bGwsIFNWX1RoaXMsIFNWX1RoaXNNb2R1bGVEaXJlY3RvcnksIFNWX1RydWUsIFNWX1VuZGVmaW5lZFxuXHR9IGZyb20gJy4uL0V4cHJlc3Npb24nXG5pbXBvcnQgeyBpbXBsZW1lbnRNYW55IH0gZnJvbSAnLi91dGlsJ1xuXG5jb25zdCBUb2tlbiA9IGFic3RyYWN0KCdUb2tlbicsIE9iamVjdCxcblx0J1RPRE86ZG9jJylcbmV4cG9ydCBkZWZhdWx0IFRva2VuXG5cbmNvbnN0IHR0ID0gKG5hbWUsIG5hbWVzVHlwZXMsIHByb3BzKSA9PlxuXHR0dXBsKG5hbWUsIFRva2VuLCAnZG9jJywgWyAnbG9jJywgTG9jIF0uY29uY2F0KG5hbWVzVHlwZXMpLCB7IH0sIHByb3BzKVxuXG4vLyBEb24ndCB1c2UgYDBgIGJlY2F1c2Ugd2Ugd2FudCB0byB1c2UgbmVnYXRpdmUgbm1iZXJzIHRvIHJlcHJlc2VudCBHcm91cFByZSBjbG9zZXJzLlxuZXhwb3J0IGNvbnN0XG5cdEdfUGFyZW4gPSAxLFxuXHRHX0JyYWNrZXQgPSAyLFxuXHRHX0Jsb2NrID0gMyxcblx0R19RdW90ZSA9IDQsXG5cdEdfTGluZSA9IDUsXG5cdEdfU3BhY2UgPSA2XG5cbmxldCBuZXh0SWQgPSAwXG5jb25zdCBuYW1lVG9LID0gbmV3IE1hcCgpXG5jb25zdCBrVG9OYW1lID0gbmV3IE1hcCgpXG5jb25zdCBrdyA9IG5hbWUgPT4ge1xuXHRjb25zdCBrID0ga3dOb3ROYW1lKG5hbWUpXG5cdG5hbWVUb0suc2V0KG5hbWUsIGspXG5cdHJldHVybiBrXG59XG5jb25zdCBrd05vdE5hbWUgPSBkZWJ1Z05hbWUgPT4ge1xuXHRjb25zdCBrID0gbmV4dElkXG5cdGtUb05hbWUuc2V0KGssIGRlYnVnTmFtZSlcblx0bmV4dElkID0gbmV4dElkICsgMVxuXHRyZXR1cm4ga1xufVxuXG5leHBvcnQgY29uc3Rcblx0S1dfQXNzaWduID0ga3coJz0nKSxcblx0S1dfQXNzaWduTXV0YWJsZSA9IGt3KCc6Oj0nKSxcblx0S1dfQXNzaWduTXV0YXRlID0ga3coJzo9JyksXG5cdEtXX0JyZWFrRG8gPSBrdygnYnJlYWshJyksXG5cdEtXX0Nhc2UgPSBrdygnY2FzZScpLFxuXHRLV19DYXNlRG8gPSBrdygnY2FzZSEnKSxcblx0S1dfRGVidWcgPSBrdygnZGVidWcnKSxcblx0S1dfRGVidWdnZXIgPSBrdygnZGVidWdnZXInKSxcblx0S1dfRWxzZSA9IGt3KCdlbHNlJyksXG5cdEtXX0ZhbHNlID0ga3coJ2ZhbHNlJyksXG5cdEtXX0ZvY3VzID0ga3dOb3ROYW1lKCdfJyksXG5cdEtXX0ZvckRvID0ga3coJ2ZvciEnKSxcblx0S1dfRnVuID0ga3coJ3wnKSxcblx0S1dfR2VuRnVuID0ga3coJ358JyksXG5cdEtXX0lmRG8gPSBrdygnaWYhJyksXG5cdEtXX0luID0ga3coJ2luJyksXG5cdEtXX0xhenkgPSBrd05vdE5hbWUoJ34nKSxcblx0S1dfTWFwRW50cnkgPSBrdygnLT4nKSxcblx0S1dfTnVsbCA9IGt3KCdudWxsJyksXG5cdEtXX09iakFzc2lnbiA9IGt3KCcuICcpLFxuXHRLV19PdXQgPSBrdygnb3V0JyksXG5cdEtXX1Bhc3MgPSBrdygncGFzcycpLFxuXHRLV19SZWdpb24gPSBrdygncmVnaW9uJyksXG5cdEtXX1RoaXMgPSBrdygndGhpcycpLFxuXHRLV19UaGlzTW9kdWxlRGlyZWN0b3J5ID0ga3coJ3RoaXMtbW9kdWxlLWRpcmVjdG9yeScpLFxuXHRLV19UcnVlID0ga3coJ3RydWUnKSxcblx0S1dfVHlwZSA9IGt3Tm90TmFtZSgnOicpLFxuXHRLV19VbmRlZmluZWQgPSBrdygndW5kZWZpbmVkJyksXG5cdEtXX1VubGVzc0RvID0ga3coJ3VubGVzcyEnKSxcblx0S1dfVXNlID0ga3coJ3VzZScpLFxuXHRLV19Vc2VEZWJ1ZyA9IGt3KCd1c2UtZGVidWcnKSxcblx0S1dfVXNlRG8gPSBrdygndXNlIScpLFxuXHRLV19Vc2VMYXp5ID0ga3coJ3VzZX4nKSxcblx0S1dfWWllbGQgPSBrdygnPH4nKSxcblx0S1dfWWllbGRUbyA9IGt3KCc8fn4nKVxuXG5leHBvcnQgY29uc3Rcblx0a2V5d29yZEtGcm9tTmFtZSA9IG5hbWUgPT4gbmFtZVRvSy5nZXQobmFtZSksXG5cdG9wS1d0b1NWID0ga3cgPT4ge1xuXHRcdHN3aXRjaCAoa3cpIHtcblx0XHRcdGNhc2UgS1dfRmFsc2U6IHJldHVybiBTVl9GYWxzZVxuXHRcdFx0Y2FzZSBLV19OdWxsOiByZXR1cm4gU1ZfTnVsbFxuXHRcdFx0Y2FzZSBLV19UaGlzOiByZXR1cm4gU1ZfVGhpc1xuXHRcdFx0Y2FzZSBLV19UaGlzTW9kdWxlRGlyZWN0b3J5OiByZXR1cm4gU1ZfVGhpc01vZHVsZURpcmVjdG9yeVxuXHRcdFx0Y2FzZSBLV19UcnVlOiByZXR1cm4gU1ZfVHJ1ZVxuXHRcdFx0Y2FzZSBLV19VbmRlZmluZWQ6IHJldHVybiBTVl9VbmRlZmluZWRcblx0XHRcdGRlZmF1bHQ6IHJldHVybiBudWxsXG5cdFx0fVxuXHR9XG5cbmV4cG9ydCBjb25zdFxuXHRDYWxsT25Gb2N1cyA9IHR0KCdDYWxsT25Gb2N1cycsIFsgJ25hbWUnLCBTdHJpbmcgXSksXG5cdERvdE5hbWUgPSB0dCgnRG90TmFtZScsIFsgJ25Eb3RzJywgTnVtYmVyLCAnbmFtZScsIFN0cmluZyBdKSxcblx0R3JvdXAgPSB0dCgnR3JvdXAnLFxuXHRcdFsgJ3Rva2VucycsIFtUb2tlbl0sICdraW5kJywgTnVtYmVyIF0pLFxuXHRLZXl3b3JkID0gdHQoJ0tleXdvcmQnLCBbICdraW5kJywgTnVtYmVyIF0pLFxuXHROYW1lID0gdHQoJ05hbWUnLCBbICduYW1lJywgU3RyaW5nIF0pLFxuXHRUb2tlbk51bWJlckxpdGVyYWwgPSB0dCgnVG9rZW5OdW1iZXJMaXRlcmFsJywgWyAndmFsdWUnLCBOdW1iZXIgXSlcblxuZXhwb3J0IGNvbnN0XG5cdGlzR3JvdXAgPSAoZ3JvdXBLaW5kLCB0b2tlbikgPT5cblx0XHR0b2tlbiBpbnN0YW5jZW9mIEdyb3VwICYmIHRva2VuLmtpbmQgPT09IGdyb3VwS2luZCxcblx0aXNLZXl3b3JkID0gKGtleXdvcmRLaW5kLCB0b2tlbikgPT5cblx0XHR0b2tlbiBpbnN0YW5jZW9mIEtleXdvcmQgJiYgdG9rZW4ua2luZCA9PT0ga2V5d29yZEtpbmRcblxuLy8gdG9TdHJpbmcgaXMgdXNlZCBieSBzb21lIHBhcnNpbmcgZXJyb3JzLiBVc2UgVS5pbnNwZWN0IGZvciBhIG1vcmUgZGV0YWlsZWQgdmlldy5cbmltcGxlbWVudE1hbnkoeyBDYWxsT25Gb2N1cywgRG90TmFtZSwgR3JvdXAsIEtleXdvcmQsIE5hbWUsIFRva2VuTnVtYmVyTGl0ZXJhbCB9LCAnc2hvdycsIHtcblx0Q2FsbE9uRm9jdXMoKSB7IHJldHVybiBgJHt0aGlzLm5hbWV9X2AgfSxcblx0RG90TmFtZSgpIHsgcmV0dXJuIGAkeycuJy5yZXBlYXQodGhpcy5uRG90cyl9JHt0aGlzLm5hbWV9YCB9LFxuXHQvLyBUT0RPOiBiZXR0ZXIgcmVwcmVzZW50YXRpb24gb2Yga1xuXHRHcm91cCgpIHsgcmV0dXJuIGBncm91cChrPSR7dGhpcy5raW5kfSlgIH0sXG5cdC8vIFRPRE86IGJldHRlciByZXByZXNlbnRhdGlvbiBvZiBrXG5cdEtleXdvcmQoKSB7IHJldHVybiBjb2RlKGtUb05hbWUuZ2V0KHRoaXMua2luZCkpIH0sXG5cdE5hbWUoKSB7IHJldHVybiB0aGlzLm5hbWUgfSxcblx0VG9rZW5OdW1iZXJMaXRlcmFsKCkgeyByZXR1cm4gdGhpcy52YWx1ZSB9XG59KVxuXG4vL1RPRE86S0lMTFxuS2V5d29yZC5wcm90b3R5cGUudG9TdHJpbmcgPSBLZXl3b3JkLnByb3RvdHlwZS5zaG93XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==