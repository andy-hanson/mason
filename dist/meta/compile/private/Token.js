if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/Loc', 'tupl/dist/tupl', '../CompileError', '../Expression', './U/util'], function (exports, _esastDistLoc, _tuplDistTupl, _CompileError, _Expression, _UUtil) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Loc = _interopRequire(_esastDistLoc);

	var _tupl = _interopRequire(_tuplDistTupl);

	const Token = (0, _tuplDistTupl.abstract)('Token', Object, 'TODO:doc', {
		toString: function () {
			return (0, _CompileError.code)(this.show());
		}
	});
	exports.default = Token;

	const tt = function (name, namesTypes, props) {
		return (0, _tupl)(name, Token, 'doc', ['loc', _Loc].concat(namesTypes), {}, props);
	};

	const gIs = function (k) {
		return function (t) {
			return t instanceof Group && t.kind === k;
		};
	};
	const kwIs = function (k) {
		return function (t) {
			return t instanceof Keyword && t.kind === k;
		};
	};

	// Don't use `0` because we want to use negative nmbers to represent GroupPre closers.
	const G_Paren = 1,
	      G_Bracket = 2,
	      G_Block = 3,
	      G_Quote = 4,
	      G_Line = 5,
	      G_Space = 6;

	exports.G_Paren = G_Paren;
	exports.G_Bracket = G_Bracket;
	exports.G_Block = G_Block;
	exports.G_Quote = G_Quote;
	exports.G_Line = G_Line;
	exports.G_Space = G_Space;
	let nextId = 0;
	const nameToK = new Map();
	const kToName = new Map();
	const kw = function (name) {
		const k = kwNotName(name);
		nameToK.set(name, k);
		return k;
	};
	const kwNotName = function (debugName) {
		const k = nextId;
		kToName.set(k, debugName);
		nextId = nextId + 1;
		return k;
	};

	const KW_Assign = kw('='),
	      KW_Case = kw('case'),
	      KW_CaseDo = kw('case!'),
	      KW_Debug = kw('debug'),
	      KW_Debugger = kw('debugger'),
	      KW_Else = kw('else'),
	      KW_EndLoop = kw('end-loop!'),
	      KW_False = kw('false'),
	      KW_Focus = kwNotName('_'),
	      KW_Fun = kw('|'),
	      KW_GenFun = kw('~|'),
	      KW_In = kw('in'),
	      KW_Lazy = kwNotName('~'),
	      KW_Loop = kw('loop!'),
	      KW_MapEntry = kw('->'),
	      KW_ObjAssign = kw('. '),
	      KW_Out = kw('out'),
	      KW_Region = kw('region'),
	      KW_This = kw('this'),
	      KW_ThisModuleDirectory = kw('this-module-directory'),
	      KW_True = kw('true'),
	      KW_Type = kwNotName(':'),
	      KW_Use = kw('use'),
	      KW_UseDebug = kw('use-debug'),
	      KW_UseDo = kw('use!'),
	      KW_UseLazy = kw('use~'),
	      KW_Yield = kw('<~'),
	      KW_YieldTo = kw('<~~');

	exports.KW_Assign = KW_Assign;
	exports.KW_Case = KW_Case;
	exports.KW_CaseDo = KW_CaseDo;
	exports.KW_Debug = KW_Debug;
	exports.KW_Debugger = KW_Debugger;
	exports.KW_Else = KW_Else;
	exports.KW_EndLoop = KW_EndLoop;
	exports.KW_False = KW_False;
	exports.KW_Focus = KW_Focus;
	exports.KW_Fun = KW_Fun;
	exports.KW_GenFun = KW_GenFun;
	exports.KW_In = KW_In;
	exports.KW_Lazy = KW_Lazy;
	exports.KW_Loop = KW_Loop;
	exports.KW_MapEntry = KW_MapEntry;
	exports.KW_ObjAssign = KW_ObjAssign;
	exports.KW_Out = KW_Out;
	exports.KW_Region = KW_Region;
	exports.KW_This = KW_This;
	exports.KW_ThisModuleDirectory = KW_ThisModuleDirectory;
	exports.KW_True = KW_True;
	exports.KW_Type = KW_Type;
	exports.KW_Use = KW_Use;
	exports.KW_UseDebug = KW_UseDebug;
	exports.KW_UseDo = KW_UseDo;
	exports.KW_UseLazy = KW_UseLazy;
	exports.KW_Yield = KW_Yield;
	exports.KW_YieldTo = KW_YieldTo;
	const keywordKFromName = function (name) {
		return nameToK.get(name);
	},
	      opKWtoSP = function (kw) {
		switch (kw) {
			case KW_This:
				return _Expression.SP_This;
			case KW_ThisModuleDirectory:
				return _Expression.SP_ThisModuleDirectory;
			case KW_False:
				return _Expression.SP_False;
			case KW_True:
				return _Expression.SP_True;
			default:
				return null;
		}
	};

	exports.keywordKFromName = keywordKFromName;
	exports.opKWtoSP = opKWtoSP;
	const CallOnFocus = tt('CallOnFocus', ['name', String]),
	      DotName = tt('DotName', ['nDots', Number, 'name', String]),
	      Group = tt('Group', ['tokens', [Token], 'kind', Number], {
		isBlock: gIs(G_Block),
		isSpaced: gIs(G_Space)
	}),
	      Keyword = tt('Keyword', ['kind', Number], {
		is: kwIs,
		isType: kwIs(KW_Type),
		isFocus: kwIs(KW_Focus),
		isElse: kwIs(KW_Else),
		isLazy: kwIs(KW_Lazy),
		isLineSplit: function (t) {
			return t instanceof Keyword && (t.kind === KW_Assign || t.kind === KW_ObjAssign || t.kind === KW_Yield || t.kind === KW_YieldTo || t.kind === KW_MapEntry);
		},
		isObjAssign: kwIs(KW_ObjAssign)
	}),
	      Name = tt('Name', ['name', String]),
	      TokenNumberLiteral = tt('TokenNumberLiteral', ['value', Number]);

	exports.CallOnFocus = CallOnFocus;
	exports.DotName = DotName;
	exports.Group = Group;
	exports.Keyword = Keyword;
	exports.Name = Name;
	exports.TokenNumberLiteral = TokenNumberLiteral;
	// toString is used by some parsing errors. Use U.inspect for a more detailed view.
	(0, _UUtil.implementMany)({ CallOnFocus: CallOnFocus, DotName: DotName, Group: Group, Keyword: Keyword, Name: Name, TokenNumberLiteral: TokenNumberLiteral }, 'show', {
		CallOnFocus: function () {
			return '' + this.name + '_';
		},
		DotName: function () {
			return '' + '.'.repeat(this.nDots) + '' + this.name;
		},
		// TODO: better representation of k
		Group: function () {
			return 'group(k=' + this.kind + ')';
		},
		// TODO: better representation of k
		Keyword: function () {
			return 'keyword(k=' + kToName.get(this.kind) + ')';
		},
		Name: function () {
			return this.name;
		},
		TokenNumberLiteral: function () {
			return this.value;
		}
	});
});
//# sourceMappingURL=data:application/json;base64,