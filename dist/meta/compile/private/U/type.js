if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', './util'], function (exports, module, _util) {
	'use strict';

	module.exports = type;

	function type() {
		if (!global.DEBUG) return;
		for (let i = 0; i < arguments.length; i = i + 2) typePair(arguments[i], arguments[i + 1]);
	}

	function typePair(instance, itsType) {
		if (itsType instanceof Array) {
			_util.assert(itsType.length === 1);
			const emType = itsType[0];
			type(instance, Array);
			instance.forEach(function (em) {
				// console.log(type) // TODO: turning on this line causes a crash in node v0.11.15.
				type(em, emType);
			});
		}
		if (!isa(instance, itsType)) {
			if (instance === null) throw new Error('Value null');
			if (instance === undefined) throw new Error('Value undefined');
			const toArray = require('./Bag').toArray;
			const strType = itsType instanceof Array ? '[' + itsType[0].name + ']' : itsType instanceof Set ? '{' + toArray(itsType.values()) : itsType.displayName || itsType.name;
			throw new Error('' + instance + ' is not a ' + strType);
		}
	}

	function isa(instance, itsType) {
		switch (true) {
			case itsType.prototype !== undefined:
				return instance != null && itsType.prototype.isPrototypeOf(Object(instance));
			case itsType instanceof Array:
				{
					_util.assert(itsType.length === 1);
					const emType = itsType[0];
					return instance instanceof Array && instance.every(function (em) {
						return isa(em, emType);
					});
				}
			case itsType instanceof Set:
				return itsType.has(instance);
			default:
				throw new Error('Not a type: ' + itsType);
		}
	}
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL1UvdHlwZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7a0JBRXdCLElBQUk7O0FBQWIsVUFBUyxJQUFJLEdBQUc7QUFDOUIsTUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQ2hCLE9BQU07QUFDUCxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDOUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7RUFDekM7O0FBRUQsVUFBUyxRQUFRLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRTtBQUNwQyxNQUFJLE9BQU8sWUFBWSxLQUFLLEVBQUU7QUFDN0IsU0FYTyxNQUFNLENBV04sT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUM1QixTQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDekIsT0FBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUNyQixXQUFRLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRSxFQUFJOztBQUV0QixRQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ2hCLENBQUMsQ0FBQTtHQUNGO0FBQ0QsTUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUU7QUFDNUIsT0FBSSxRQUFRLEtBQUssSUFBSSxFQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDcEQsT0FBSSxRQUFRLEtBQUssU0FBUyxFQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUM5RCxTQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFBO0FBQ3hDLFNBQU0sT0FBTyxHQUNaLE9BQU8sWUFBWSxLQUFLLFNBQ3BCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQ25CLE9BQU8sWUFBWSxHQUFHLFNBQ2xCLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsR0FDNUIsT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsSUFBSSxBQUFDLENBQUE7QUFDdEMsU0FBTSxJQUFJLEtBQUssTUFBSSxRQUFRLGtCQUFhLE9BQU8sQ0FBRyxDQUFBO0dBQ2xEO0VBQ0Q7O0FBRUQsVUFBUyxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRTtBQUMvQixVQUFRLElBQUk7QUFDWCxRQUFLLE9BQU8sQ0FBQyxTQUFTLEtBQUssU0FBUztBQUNuQyxXQUFPLFFBQVEsSUFBSSxJQUFJLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7QUFBQSxBQUM3RSxRQUFLLE9BQU8sWUFBWSxLQUFLO0FBQUU7QUFDOUIsV0F0Q00sTUFBTSxDQXNDTCxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQzVCLFdBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6QixZQUFPLFFBQVEsWUFBWSxLQUFLLElBQy9CLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBQSxFQUFFO2FBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUM7TUFBQSxDQUFDLENBQUE7S0FDdEM7QUFBQSxBQUNELFFBQUssT0FBTyxZQUFZLEdBQUc7QUFDMUIsV0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQUEsQUFDN0I7QUFDQyxVQUFNLElBQUksS0FBSyxrQkFBZ0IsT0FBTyxDQUFHLENBQUE7QUFBQSxHQUMxQztFQUNEIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL1UvdHlwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHlwZSgpIHtcblx0aWYgKCFnbG9iYWwuREVCVUcpXG5cdFx0cmV0dXJuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSA9IGkgKyAyKVxuXHRcdHR5cGVQYWlyKGFyZ3VtZW50c1tpXSwgYXJndW1lbnRzW2kgKyAxXSlcbn1cblxuZnVuY3Rpb24gdHlwZVBhaXIoaW5zdGFuY2UsIGl0c1R5cGUpIHtcblx0aWYgKGl0c1R5cGUgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdGFzc2VydChpdHNUeXBlLmxlbmd0aCA9PT0gMSlcblx0XHRjb25zdCBlbVR5cGUgPSBpdHNUeXBlWzBdXG5cdFx0dHlwZShpbnN0YW5jZSwgQXJyYXkpXG5cdFx0aW5zdGFuY2UuZm9yRWFjaChlbSA9PiB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyh0eXBlKSAvLyBUT0RPOiB0dXJuaW5nIG9uIHRoaXMgbGluZSBjYXVzZXMgYSBjcmFzaCBpbiBub2RlIHYwLjExLjE1LlxuXHRcdFx0dHlwZShlbSwgZW1UeXBlKVxuXHRcdH0pXG5cdH1cblx0aWYgKCFpc2EoaW5zdGFuY2UsIGl0c1R5cGUpKSB7XG5cdFx0aWYgKGluc3RhbmNlID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIG51bGwnKVxuXHRcdGlmIChpbnN0YW5jZSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIHVuZGVmaW5lZCcpXG5cdFx0Y29uc3QgdG9BcnJheSA9IHJlcXVpcmUoJy4vQmFnJykudG9BcnJheVxuXHRcdGNvbnN0IHN0clR5cGUgPVxuXHRcdFx0aXRzVHlwZSBpbnN0YW5jZW9mIEFycmF5ID9cblx0XHRcdGBbJHtpdHNUeXBlWzBdLm5hbWV9XWAgOlxuXHRcdFx0aXRzVHlwZSBpbnN0YW5jZW9mIFNldCA/XG5cdFx0XHRgeyR7dG9BcnJheShpdHNUeXBlLnZhbHVlcygpKX1gIDpcblx0XHRcdChpdHNUeXBlLmRpc3BsYXlOYW1lIHx8IGl0c1R5cGUubmFtZSlcblx0XHR0aHJvdyBuZXcgRXJyb3IoYCR7aW5zdGFuY2V9IGlzIG5vdCBhICR7c3RyVHlwZX1gKVxuXHR9XG59XG5cbmZ1bmN0aW9uIGlzYShpbnN0YW5jZSwgaXRzVHlwZSkge1xuXHRzd2l0Y2ggKHRydWUpIHtcblx0XHRjYXNlIGl0c1R5cGUucHJvdG90eXBlICE9PSB1bmRlZmluZWQ6XG5cdFx0XHRyZXR1cm4gaW5zdGFuY2UgIT0gbnVsbCAmJiBpdHNUeXBlLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKE9iamVjdChpbnN0YW5jZSkpXG5cdFx0Y2FzZSBpdHNUeXBlIGluc3RhbmNlb2YgQXJyYXk6IHtcblx0XHRcdGFzc2VydChpdHNUeXBlLmxlbmd0aCA9PT0gMSlcblx0XHRcdGNvbnN0IGVtVHlwZSA9IGl0c1R5cGVbMF1cblx0XHRcdHJldHVybiBpbnN0YW5jZSBpbnN0YW5jZW9mIEFycmF5ICYmXG5cdFx0XHRcdGluc3RhbmNlLmV2ZXJ5KGVtID0+IGlzYShlbSwgZW1UeXBlKSlcblx0XHR9XG5cdFx0Y2FzZSBpdHNUeXBlIGluc3RhbmNlb2YgU2V0OlxuXHRcdFx0cmV0dXJuIGl0c1R5cGUuaGFzKGluc3RhbmNlKVxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE5vdCBhIHR5cGU6ICR7aXRzVHlwZX1gKVxuXHR9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==