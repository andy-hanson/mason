if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './util'], function (exports, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.ObjType = ObjType;

	function ObjType(name, superType, members) {
		(0, _util.type)(name, String, superType, Object, members, Object);
		const prototype = Object.create(superType.prototype);
		Object.keys(members).forEach(function (key) {
			return (0, _util.type)(members[key], Object);
		});

		let s = 'return function(props) { const _ = Object.create(prototype);';
		Object.keys(members).forEach(function (member) {
			s = s + ('_["' + member + '"] = props["' + member + '"];');
		});
		s = s + 'return _}';
		const theType = Function('prototype', s)(prototype);

		theType.displayName = name;
		theType.toString = function () {
			return name;
		};
		theType.prototype = prototype;
		Object.assign(theType.prototype, {
			constructor: theType,
			toString: function () {
				return inspect(this);
			}
		});

		return theType;
	}

	function inspect(_) {
		const indented = function (str) {
			return str.replace(/\n/g, '\n\t');
		};

		let s = (_.constructor.displayName || _.constructor.name) + ' {';
		Object.keys(_).forEach(function (key) {
			const val = _[key];
			const str = val instanceof Array ? val.join(',\n') : toStr(val);
			s = s + ('\n\t' + key + ': ' + indented(str));
		});
		return s + '\n}';
	}

	const toStr = function (_) {
		return _ === null ? 'null' : _ === undefined ? 'undefined' : _.toString();
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL1UvdHlwZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O1NBRWdCLE9BQU8sR0FBUCxPQUFPOztBQUFoQixVQUFTLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRTtBQUNqRCxZQUhRLElBQUksRUFHUCxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQ3RELFFBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3BELFFBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztVQUFJLFVBTDVCLElBQUksRUFLNkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQztHQUFBLENBQUMsQ0FBQTs7QUFFL0QsTUFBSSxDQUFDLEdBQUcsOERBQThELENBQUE7QUFDdEUsUUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDdEMsSUFBQyxHQUFHLENBQUMsWUFBUyxNQUFNLG9CQUFlLE1BQU0sU0FBSyxDQUFBO0dBQzlDLENBQUMsQ0FBQTtBQUNGLEdBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFBO0FBQ25CLFFBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7O0FBRW5ELFNBQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFBO0FBQzFCLFNBQU8sQ0FBQyxRQUFRLEdBQUc7VUFBTSxJQUFJO0dBQUEsQ0FBQTtBQUM3QixTQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtBQUM3QixRQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDaEMsY0FBVyxFQUFFLE9BQU87QUFDcEIsV0FBUSxFQUFBLFlBQUc7QUFBRSxXQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUFFO0dBQ25DLENBQUMsQ0FBQTs7QUFFRixTQUFPLE9BQU8sQ0FBQTtFQUNkOztBQUVELFVBQVMsT0FBTyxDQUFDLENBQUMsRUFBRTtBQUNuQixRQUFNLFFBQVEsR0FBRyxVQUFBLEdBQUc7VUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7R0FBQSxDQUFBOztBQUVsRCxNQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFBLEdBQUksSUFBSSxDQUFBO0FBQ2hFLFFBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxFQUFJO0FBQzdCLFNBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNsQixTQUFNLEdBQUcsR0FBRyxHQUFHLFlBQVksS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQy9ELElBQUMsR0FBRyxDQUFDLGFBQVUsR0FBRyxVQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFBO0dBQ3RDLENBQUMsQ0FBQTtBQUNGLFNBQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQTtFQUNoQjs7QUFFRCxPQUFNLEtBQUssR0FBRyxVQUFBLENBQUM7U0FDZCxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssU0FBUyxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFO0VBQUEsQ0FBQSIsImZpbGUiOiJtZXRhL2NvbXBpbGUvcHJpdmF0ZS9VL3R5cGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSB9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGZ1bmN0aW9uIE9ialR5cGUobmFtZSwgc3VwZXJUeXBlLCBtZW1iZXJzKSB7XG5cdHR5cGUobmFtZSwgU3RyaW5nLCBzdXBlclR5cGUsIE9iamVjdCwgbWVtYmVycywgT2JqZWN0KVxuXHRjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyVHlwZS5wcm90b3R5cGUpXG5cdE9iamVjdC5rZXlzKG1lbWJlcnMpLmZvckVhY2goa2V5ID0+IHR5cGUobWVtYmVyc1trZXldLCBPYmplY3QpKVxuXG5cdGxldCBzID0gJ3JldHVybiBmdW5jdGlvbihwcm9wcykgeyBjb25zdCBfID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpOydcblx0T2JqZWN0LmtleXMobWVtYmVycykuZm9yRWFjaChtZW1iZXIgPT4ge1xuXHRcdHMgPSBzICsgYF9bXCIke21lbWJlcn1cIl0gPSBwcm9wc1tcIiR7bWVtYmVyfVwiXTtgXG5cdH0pXG5cdHMgPSBzICsgJ3JldHVybiBffSdcblx0Y29uc3QgdGhlVHlwZSA9IEZ1bmN0aW9uKCdwcm90b3R5cGUnLCBzKShwcm90b3R5cGUpXG5cblx0dGhlVHlwZS5kaXNwbGF5TmFtZSA9IG5hbWVcblx0dGhlVHlwZS50b1N0cmluZyA9ICgpID0+IG5hbWVcblx0dGhlVHlwZS5wcm90b3R5cGUgPSBwcm90b3R5cGVcblx0T2JqZWN0LmFzc2lnbih0aGVUeXBlLnByb3RvdHlwZSwge1xuXHRcdGNvbnN0cnVjdG9yOiB0aGVUeXBlLFxuXHRcdHRvU3RyaW5nKCkgeyByZXR1cm4gaW5zcGVjdCh0aGlzKSB9XG5cdH0pXG5cblx0cmV0dXJuIHRoZVR5cGVcbn1cblxuZnVuY3Rpb24gaW5zcGVjdChfKSB7XG5cdGNvbnN0IGluZGVudGVkID0gc3RyID0+IHN0ci5yZXBsYWNlKC9cXG4vZywgJ1xcblxcdCcpXG5cblx0bGV0IHMgPSAoXy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCBfLmNvbnN0cnVjdG9yLm5hbWUpICsgJyB7J1xuXHRPYmplY3Qua2V5cyhfKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y29uc3QgdmFsID0gX1trZXldXG5cdFx0Y29uc3Qgc3RyID0gdmFsIGluc3RhbmNlb2YgQXJyYXkgPyB2YWwuam9pbignLFxcbicpIDogdG9TdHIodmFsKVxuXHRcdHMgPSBzICsgYFxcblxcdCR7a2V5fTogJHtpbmRlbnRlZChzdHIpfWBcblx0fSlcblx0cmV0dXJuIHMgKyAnXFxufSdcbn1cblxuY29uc3QgdG9TdHIgPSBfID0+XG5cdF8gPT09IG51bGwgPyAnbnVsbCcgOiBfID09PSB1bmRlZmluZWQgPyAndW5kZWZpbmVkJyA6IF8udG9TdHJpbmcoKVxuXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==