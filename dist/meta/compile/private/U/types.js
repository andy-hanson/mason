if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './type'], function (exports, _type) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.ObjType = ObjType;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _type2 = _interopRequire(_type);

	function ObjType(name, superType, members) {
		_type2(name, String, superType, Object, members, Object);
		const prototype = Object.create(superType.prototype);
		Object.keys(members).forEach(function (key) {
			return _type2(members[key], Object);
		});

		let s = 'return function(props) { const _ = Object.create(prototype);';
		Object.keys(members).forEach(function (member) {
			s = s + ('_["' + member + '"] = props["' + member + '"];');
		});
		s = s + 'return _}';
		const theType = Function('prototype', s)(prototype);

		theType.displayName = name;
		theType.toString = function () {
			return name;
		};
		theType.prototype = prototype;
		Object.assign(theType.prototype, {
			constructor: theType,
			toString: function () {
				return inspect(this);
			}
		});

		return theType;
	}

	function inspect(_) {
		const indented = function (str) {
			return str.replace(/\n/g, '\n\t');
		};

		let s = (_.constructor.displayName || _.constructor.name) + ' {';
		Object.keys(_).forEach(function (key) {
			const val = _[key];
			const str = val instanceof Array ? val.join(',\n') : toStr(val);
			s = s + ('\n\t' + key + ': ' + indented(str));
		});
		return s + '\n}';
	}

	const toStr = function (_) {
		return _ === null ? 'null' : _ === undefined ? 'undefined' : _.toString();
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL1UvdHlwZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O1NBRWdCLE9BQU8sR0FBUCxPQUFPOzs7Ozs7QUFBaEIsVUFBUyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUU7QUFDakQsU0FBSyxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQ3RELFFBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3BELFFBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztVQUFJLE9BQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQztHQUFBLENBQUMsQ0FBQTs7QUFFL0QsTUFBSSxDQUFDLEdBQUcsOERBQThELENBQUE7QUFDdEUsUUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDdEMsSUFBQyxHQUFHLENBQUMsWUFBUyxNQUFNLG9CQUFlLE1BQU0sU0FBSyxDQUFBO0dBQzlDLENBQUMsQ0FBQTtBQUNGLEdBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFBO0FBQ25CLFFBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7O0FBRW5ELFNBQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFBO0FBQzFCLFNBQU8sQ0FBQyxRQUFRLEdBQUc7VUFBTSxJQUFJO0dBQUEsQ0FBQTtBQUM3QixTQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtBQUM3QixRQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDaEMsY0FBVyxFQUFFLE9BQU87QUFDcEIsV0FBUSxFQUFBLFlBQUc7QUFBRSxXQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUFFO0dBQ25DLENBQUMsQ0FBQTs7QUFFRixTQUFPLE9BQU8sQ0FBQTtFQUNkOztBQUVELFVBQVMsT0FBTyxDQUFDLENBQUMsRUFBRTtBQUNuQixRQUFNLFFBQVEsR0FBRyxVQUFBLEdBQUc7VUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7R0FBQSxDQUFBOztBQUVsRCxNQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFBLEdBQUksSUFBSSxDQUFBO0FBQ2hFLFFBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxFQUFJO0FBQzdCLFNBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNsQixTQUFNLEdBQUcsR0FBRyxHQUFHLFlBQVksS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQy9ELElBQUMsR0FBRyxDQUFDLGFBQVUsR0FBRyxVQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFBO0dBQ3RDLENBQUMsQ0FBQTtBQUNGLFNBQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQTtFQUNoQjs7QUFFRCxPQUFNLEtBQUssR0FBRyxVQUFBLENBQUM7U0FDZCxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssU0FBUyxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFO0VBQUEsQ0FBQSIsImZpbGUiOiJtZXRhL2NvbXBpbGUvcHJpdmF0ZS9VL3R5cGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgZnJvbSAnLi90eXBlJ1xuXG5leHBvcnQgZnVuY3Rpb24gT2JqVHlwZShuYW1lLCBzdXBlclR5cGUsIG1lbWJlcnMpIHtcblx0dHlwZShuYW1lLCBTdHJpbmcsIHN1cGVyVHlwZSwgT2JqZWN0LCBtZW1iZXJzLCBPYmplY3QpXG5cdGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJUeXBlLnByb3RvdHlwZSlcblx0T2JqZWN0LmtleXMobWVtYmVycykuZm9yRWFjaChrZXkgPT4gdHlwZShtZW1iZXJzW2tleV0sIE9iamVjdCkpXG5cblx0bGV0IHMgPSAncmV0dXJuIGZ1bmN0aW9uKHByb3BzKSB7IGNvbnN0IF8gPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7J1xuXHRPYmplY3Qua2V5cyhtZW1iZXJzKS5mb3JFYWNoKG1lbWJlciA9PiB7XG5cdFx0cyA9IHMgKyBgX1tcIiR7bWVtYmVyfVwiXSA9IHByb3BzW1wiJHttZW1iZXJ9XCJdO2Bcblx0fSlcblx0cyA9IHMgKyAncmV0dXJuIF99J1xuXHRjb25zdCB0aGVUeXBlID0gRnVuY3Rpb24oJ3Byb3RvdHlwZScsIHMpKHByb3RvdHlwZSlcblxuXHR0aGVUeXBlLmRpc3BsYXlOYW1lID0gbmFtZVxuXHR0aGVUeXBlLnRvU3RyaW5nID0gKCkgPT4gbmFtZVxuXHR0aGVUeXBlLnByb3RvdHlwZSA9IHByb3RvdHlwZVxuXHRPYmplY3QuYXNzaWduKHRoZVR5cGUucHJvdG90eXBlLCB7XG5cdFx0Y29uc3RydWN0b3I6IHRoZVR5cGUsXG5cdFx0dG9TdHJpbmcoKSB7IHJldHVybiBpbnNwZWN0KHRoaXMpIH1cblx0fSlcblxuXHRyZXR1cm4gdGhlVHlwZVxufVxuXG5mdW5jdGlvbiBpbnNwZWN0KF8pIHtcblx0Y29uc3QgaW5kZW50ZWQgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1xcbi9nLCAnXFxuXFx0JylcblxuXHRsZXQgcyA9IChfLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IF8uY29uc3RydWN0b3IubmFtZSkgKyAnIHsnXG5cdE9iamVjdC5rZXlzKF8pLmZvckVhY2goa2V5ID0+IHtcblx0XHRjb25zdCB2YWwgPSBfW2tleV1cblx0XHRjb25zdCBzdHIgPSB2YWwgaW5zdGFuY2VvZiBBcnJheSA/IHZhbC5qb2luKCcsXFxuJykgOiB0b1N0cih2YWwpXG5cdFx0cyA9IHMgKyBgXFxuXFx0JHtrZXl9OiAke2luZGVudGVkKHN0cil9YFxuXHR9KVxuXHRyZXR1cm4gcyArICdcXG59J1xufVxuXG5jb25zdCB0b1N0ciA9IF8gPT5cblx0XyA9PT0gbnVsbCA/ICdudWxsJyA6IF8gPT09IHVuZGVmaW5lZCA/ICd1bmRlZmluZWQnIDogXy50b1N0cmluZygpXG5cbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9