if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './util'], function (exports, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	const head = function (arr) {
		_util.assert(!isEmpty(arr));
		return arr[0];
	},
	      last = function (arr) {
		_util.assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	      tail = function (arr) {
		_util.assert(!isEmpty(arr));
		return arr.slice(1);
	},
	      rtail = function (arr) {
		_util.assert(!isEmpty(arr));
		return arr.slice(0, arr.length - 1);
	},
	      toArray = function (iter) {
		const out = [];
		for (let em of iter) out.push(em);
		return out;
	},
	      repeat = function (em, n) {
		_util.assert(n >= 0);
		const out = [];
		for (let i = n; i > 0; i = i - 1) out.push(em);
		return out;
	},
	      isEmpty = function (arr) {
		return arr.length === 0;
	},
	      range = function (min, max) {
		_util.assert(min < max);
		const out = [];
		for (let i = min; i < max; i = i + 1) out.push(i);
		return out;
	},
	      flatMap = function (mapped, mapper) {
		const out = [];
		mapped.forEach(function (_, i) {
			return out.push.apply(out, _toConsumableArray(mapper(_, i)));
		});
		return out;
	},
	     

	// These are mutators for slight performance gain
	unshift = function (em, mutArr) {
		mutArr.unshift(em);
		return mutArr;
	},
	      push = function (mutArr, em) {
		mutArr.push(em);
		return mutArr;
	},
	      cat = function (mutArr, ems) {
		mutArr.push.apply(mutArr, _toConsumableArray(ems));
		return mutArr;
	};
	exports.head = head;
	exports.last = last;
	exports.tail = tail;
	exports.rtail = rtail;
	exports.toArray = toArray;
	exports.repeat = repeat;
	exports.isEmpty = isEmpty;
	exports.range = range;
	exports.flatMap = flatMap;
	exports.unshift = unshift;
	exports.push = push;
	exports.cat = cat;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL1UvQmFnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVPLE9BQ04sSUFBSSxHQUFHLFVBQUEsR0FBRyxFQUFJO0FBQ2IsUUFKTyxNQUFNLENBSU4sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixTQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtFQUNiO09BQ0QsSUFBSSxHQUFHLFVBQUEsR0FBRyxFQUFJO0FBQ2IsUUFSTyxNQUFNLENBUU4sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixTQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0VBQzFCO09BQ0QsSUFBSSxHQUFHLFVBQUEsR0FBRyxFQUFJO0FBQ2IsUUFaTyxNQUFNLENBWU4sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixTQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7RUFDbkI7T0FDRCxLQUFLLEdBQUcsVUFBQSxHQUFHLEVBQUk7QUFDZCxRQWhCTyxNQUFNLENBZ0JOLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDckIsU0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0VBQ25DO09BQ0QsT0FBTyxHQUFHLFVBQUEsSUFBSSxFQUFJO0FBQ2pCLFFBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtBQUNkLE9BQUssSUFBSSxFQUFFLElBQUksSUFBSSxFQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2IsU0FBTyxHQUFHLENBQUE7RUFDVjtPQUNELE1BQU0sR0FBRyxVQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUs7QUFDbkIsUUExQk8sTUFBTSxDQTBCTixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDZCxRQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDZCxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2IsU0FBTyxHQUFHLENBQUE7RUFDVjtPQUNELE9BQU8sR0FBRyxVQUFBLEdBQUcsRUFBSTtBQUNoQixTQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFBO0VBQ3ZCO09BQ0QsS0FBSyxHQUFHLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBSztBQUNyQixRQXBDTyxNQUFNLENBb0NOLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUNqQixRQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDZCxPQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1osU0FBTyxHQUFHLENBQUE7RUFDVjtPQUNELE9BQU8sR0FBRyxVQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUs7QUFDN0IsUUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0FBQ2QsUUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDO1VBQUssR0FBRyxDQUFDLElBQUksTUFBQSxDQUFSLEdBQUcscUJBQVMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQztHQUFBLENBQUMsQ0FBQTtBQUNuRCxTQUFPLEdBQUcsQ0FBQTtFQUNWOzs7O0FBR0QsUUFBTyxHQUFHLFVBQUMsRUFBRSxFQUFFLE1BQU0sRUFBSztBQUN6QixRQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2xCLFNBQU8sTUFBTSxDQUFBO0VBQ2I7T0FDRCxJQUFJLEdBQUcsVUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFLO0FBQ3RCLFFBQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDZixTQUFPLE1BQU0sQ0FBQTtFQUNiO09BQ0QsR0FBRyxHQUFHLFVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBSztBQUN0QixRQUFNLENBQUMsSUFBSSxNQUFBLENBQVgsTUFBTSxxQkFBUyxHQUFHLEVBQUMsQ0FBQTtBQUNuQixTQUFPLE1BQU0sQ0FBQTtFQUNiLENBQUE7U0F6REQsSUFBSSxHQUFKLElBQUk7U0FJSixJQUFJLEdBQUosSUFBSTtTQUlKLElBQUksR0FBSixJQUFJO1NBSUosS0FBSyxHQUFMLEtBQUs7U0FJTCxPQUFPLEdBQVAsT0FBTztTQU1QLE1BQU0sR0FBTixNQUFNO1NBT04sT0FBTyxHQUFQLE9BQU87U0FHUCxLQUFLLEdBQUwsS0FBSztTQU9MLE9BQU8sR0FBUCxPQUFPO1NBT1AsT0FBTyxHQUFQLE9BQU87U0FJUCxJQUFJLEdBQUosSUFBSTtTQUlKLEdBQUcsR0FBSCxHQUFHIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL1UvQmFnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgY29uc3Rcblx0aGVhZCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyclswXVxuXHR9LFxuXHRsYXN0ID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXVxuXHR9LFxuXHR0YWlsID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyLnNsaWNlKDEpXG5cdH0sXG5cdHJ0YWlsID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyLnNsaWNlKDAsIGFyci5sZW5ndGggLSAxKVxuXHR9LFxuXHR0b0FycmF5ID0gaXRlciA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRmb3IgKGxldCBlbSBvZiBpdGVyKVxuXHRcdFx0b3V0LnB1c2goZW0pXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXHRyZXBlYXQgPSAoZW0sIG4pID0+IHtcblx0XHRhc3NlcnQobiA+PSAwKVxuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IG47IGkgPiAwOyBpID0gaSAtIDEpXG5cdFx0XHRvdXQucHVzaChlbSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cdGlzRW1wdHkgPSBhcnIgPT4ge1xuXHRcdHJldHVybiBhcnIubGVuZ3RoID09PSAwXG5cdH0sXG5cdHJhbmdlID0gKG1pbiwgbWF4KSA9PiB7XG5cdFx0YXNzZXJ0KG1pbiA8IG1heClcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdGZvciAobGV0IGkgPSBtaW47IGkgPCBtYXg7IGkgPSBpICsgMSlcblx0XHRcdG91dC5wdXNoKGkpXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXHRmbGF0TWFwID0gKG1hcHBlZCwgbWFwcGVyKSA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRtYXBwZWQuZm9yRWFjaCgoXywgaSkgPT4gb3V0LnB1c2goLi4ubWFwcGVyKF8sIGkpKSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0Ly8gVGhlc2UgYXJlIG11dGF0b3JzIGZvciBzbGlnaHQgcGVyZm9ybWFuY2UgZ2FpblxuXHR1bnNoaWZ0ID0gKGVtLCBtdXRBcnIpID0+IHtcblx0XHRtdXRBcnIudW5zaGlmdChlbSlcblx0XHRyZXR1cm4gbXV0QXJyXG5cdH0sXG5cdHB1c2ggPSAobXV0QXJyLCBlbSkgPT4ge1xuXHRcdG11dEFyci5wdXNoKGVtKVxuXHRcdHJldHVybiBtdXRBcnJcblx0fSxcblx0Y2F0ID0gKG11dEFyciwgZW1zKSA9PiB7XG5cdFx0bXV0QXJyLnB1c2goLi4uZW1zKVxuXHRcdHJldHVybiBtdXRBcnJcblx0fVxuXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==