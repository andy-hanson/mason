if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './util'], function (exports, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	const cat = function () {
		for (var _len = arguments.length, parts = Array(_len), _key = 0; _key < _len; _key++) {
			parts[_key] = arguments[_key];
		}

		const out = [];
		parts.forEach(function (_) {
			if (_ instanceof Array) out.push.apply(out, _toConsumableArray(_));else if (_ !== null) out.push(_);
		});
		return out;
	},
	      head = function (arr) {
		(0, _util.assert)(!isEmpty(arr));
		return arr[0];
	},
	      last = function (arr) {
		(0, _util.assert)(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	      tail = function (arr) {
		(0, _util.assert)(!isEmpty(arr));
		return arr.slice(1);
	},
	      rtail = function (arr) {
		(0, _util.assert)(!isEmpty(arr));
		return arr.slice(0, arr.length - 1);
	},
	      toArray = function (iter) {
		const out = [];
		for (let em of iter) out.push(em);
		return out;
	},
	      repeat = function (em, n) {
		(0, _util.assert)(n >= 0);
		const out = [];
		for (let i = n; i > 0; i = i - 1) out.push(em);
		return out;
	},
	      isEmpty = function (arr) {
		return arr.length === 0;
	},
	      range = function (min, max) {
		(0, _util.assert)(min < max);
		const out = [];
		for (let i = min; i < max; i = i + 1) out.push(i);
		return out;
	},
	      flatMap = function (mapped, mapper) {
		const out = [];
		mapped.forEach(function (_, i) {
			return out.push.apply(out, _toConsumableArray(mapper(_, i)));
		});
		return out;
	},
	     

	// These are mutators for slight performance gain
	unshift = function (em, mutArr) {
		mutArr.unshift(em);
		return mutArr;
	},
	      push = function (mutArr, em) {
		mutArr.push(em);
		return mutArr;
	};
	exports.cat = cat;
	exports.head = head;
	exports.last = last;
	exports.tail = tail;
	exports.rtail = rtail;
	exports.toArray = toArray;
	exports.repeat = repeat;
	exports.isEmpty = isEmpty;
	exports.range = range;
	exports.flatMap = flatMap;
	exports.unshift = unshift;
	exports.push = push;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL1UvQmFnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVPLE9BQ04sR0FBRyxHQUFHLFlBQWM7b0NBQVYsS0FBSztBQUFMLFFBQUs7OztBQUNkLFFBQU0sR0FBRyxHQUFHLEVBQUcsQ0FBQTtBQUNmLE9BQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLEVBQUk7QUFDbEIsT0FBSSxDQUFDLFlBQVksS0FBSyxFQUNyQixHQUFHLENBQUMsSUFBSSxNQUFBLENBQVIsR0FBRyxxQkFBUyxDQUFDLEVBQUMsQ0FBQSxLQUNWLElBQUksQ0FBQyxLQUFLLElBQUksRUFDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUNaLENBQUMsQ0FBQTtBQUNGLFNBQU8sR0FBRyxDQUFBO0VBQ1Y7T0FDRCxJQUFJLEdBQUcsVUFBQSxHQUFHLEVBQUk7QUFDYixZQWRPLE1BQU0sRUFjTixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3JCLFNBQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0VBQ2I7T0FDRCxJQUFJLEdBQUcsVUFBQSxHQUFHLEVBQUk7QUFDYixZQWxCTyxNQUFNLEVBa0JOLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDckIsU0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQTtFQUMxQjtPQUNELElBQUksR0FBRyxVQUFBLEdBQUcsRUFBSTtBQUNiLFlBdEJPLE1BQU0sRUFzQk4sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixTQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7RUFDbkI7T0FDRCxLQUFLLEdBQUcsVUFBQSxHQUFHLEVBQUk7QUFDZCxZQTFCTyxNQUFNLEVBMEJOLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDckIsU0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0VBQ25DO09BQ0QsT0FBTyxHQUFHLFVBQUEsSUFBSSxFQUFJO0FBQ2pCLFFBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtBQUNkLE9BQUssSUFBSSxFQUFFLElBQUksSUFBSSxFQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2IsU0FBTyxHQUFHLENBQUE7RUFDVjtPQUNELE1BQU0sR0FBRyxVQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUs7QUFDbkIsWUFwQ08sTUFBTSxFQW9DTixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDZCxRQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDZCxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2IsU0FBTyxHQUFHLENBQUE7RUFDVjtPQUNELE9BQU8sR0FBRyxVQUFBLEdBQUcsRUFBSTtBQUNoQixTQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFBO0VBQ3ZCO09BQ0QsS0FBSyxHQUFHLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBSztBQUNyQixZQTlDTyxNQUFNLEVBOENOLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUNqQixRQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDZCxPQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1osU0FBTyxHQUFHLENBQUE7RUFDVjtPQUNELE9BQU8sR0FBRyxVQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUs7QUFDN0IsUUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0FBQ2QsUUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDO1VBQUssR0FBRyxDQUFDLElBQUksTUFBQSxDQUFSLEdBQUcscUJBQVMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQztHQUFBLENBQUMsQ0FBQTtBQUNuRCxTQUFPLEdBQUcsQ0FBQTtFQUNWOzs7O0FBR0QsUUFBTyxHQUFHLFVBQUMsRUFBRSxFQUFFLE1BQU0sRUFBSztBQUN6QixRQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2xCLFNBQU8sTUFBTSxDQUFBO0VBQ2I7T0FDRCxJQUFJLEdBQUcsVUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFLO0FBQ3RCLFFBQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDZixTQUFPLE1BQU0sQ0FBQTtFQUNiLENBQUE7U0EvREQsR0FBRyxHQUFILEdBQUc7U0FVSCxJQUFJLEdBQUosSUFBSTtTQUlKLElBQUksR0FBSixJQUFJO1NBSUosSUFBSSxHQUFKLElBQUk7U0FJSixLQUFLLEdBQUwsS0FBSztTQUlMLE9BQU8sR0FBUCxPQUFPO1NBTVAsTUFBTSxHQUFOLE1BQU07U0FPTixPQUFPLEdBQVAsT0FBTztTQUdQLEtBQUssR0FBTCxLQUFLO1NBT0wsT0FBTyxHQUFQLE9BQU87U0FPUCxPQUFPLEdBQVAsT0FBTztTQUlQLElBQUksR0FBSixJQUFJIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL1UvQmFnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgY29uc3Rcblx0Y2F0ID0gKC4uLnBhcnRzKSA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gWyBdXG5cdFx0cGFydHMuZm9yRWFjaChfID0+IHtcblx0XHRcdGlmIChfIGluc3RhbmNlb2YgQXJyYXkpXG5cdFx0XHRcdG91dC5wdXNoKC4uLl8pXG5cdFx0XHRlbHNlIGlmIChfICE9PSBudWxsKVxuXHRcdFx0XHRvdXQucHVzaChfKVxuXHRcdH0pXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXHRoZWFkID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyWzBdXG5cdH0sXG5cdGxhc3QgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdXG5cdH0sXG5cdHRhaWwgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnIuc2xpY2UoMSlcblx0fSxcblx0cnRhaWwgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnIuc2xpY2UoMCwgYXJyLmxlbmd0aCAtIDEpXG5cdH0sXG5cdHRvQXJyYXkgPSBpdGVyID0+IHtcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdGZvciAobGV0IGVtIG9mIGl0ZXIpXG5cdFx0XHRvdXQucHVzaChlbSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cdHJlcGVhdCA9IChlbSwgbikgPT4ge1xuXHRcdGFzc2VydChuID49IDApXG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRmb3IgKGxldCBpID0gbjsgaSA+IDA7IGkgPSBpIC0gMSlcblx0XHRcdG91dC5wdXNoKGVtKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblx0aXNFbXB0eSA9IGFyciA9PiB7XG5cdFx0cmV0dXJuIGFyci5sZW5ndGggPT09IDBcblx0fSxcblx0cmFuZ2UgPSAobWluLCBtYXgpID0+IHtcblx0XHRhc3NlcnQobWluIDwgbWF4KVxuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IG1pbjsgaSA8IG1heDsgaSA9IGkgKyAxKVxuXHRcdFx0b3V0LnB1c2goaSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cdGZsYXRNYXAgPSAobWFwcGVkLCBtYXBwZXIpID0+IHtcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdG1hcHBlZC5mb3JFYWNoKChfLCBpKSA9PiBvdXQucHVzaCguLi5tYXBwZXIoXywgaSkpKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHQvLyBUaGVzZSBhcmUgbXV0YXRvcnMgZm9yIHNsaWdodCBwZXJmb3JtYW5jZSBnYWluXG5cdHVuc2hpZnQgPSAoZW0sIG11dEFycikgPT4ge1xuXHRcdG11dEFyci51bnNoaWZ0KGVtKVxuXHRcdHJldHVybiBtdXRBcnJcblx0fSxcblx0cHVzaCA9IChtdXRBcnIsIGVtKSA9PiB7XG5cdFx0bXV0QXJyLnB1c2goZW0pXG5cdFx0cmV0dXJuIG11dEFyclxuXHR9XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==