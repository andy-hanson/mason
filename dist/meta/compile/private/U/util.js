if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const assert = function (cond) {
		if (!cond) throw new Error('Assertion failed.');
	},
	     

	// -0 is negative
	isPositive = function (n) {
		return n >= 0 && 1 / n !== -Infinity;
	},
	      implementMany = function (holder, methodName, nameToImpl) {
		Object.keys(nameToImpl).forEach(function (name) {
			holder[name].prototype[methodName] = nameToImpl[name];
		});
		return function (target) {
			return target[methodName].apply(null, arguments);
		};
	},
	     

	// TODO:ES6 Just use `new Set`
	newSet = function () {
		const set = new Set();
		for (let i = 0; i < arguments.length; i = i + 1) arguments[i].forEach(function (_) {
			return set.add(_);
		});
		return set;
	},
	     

	// TODO:ES6 map.keys()
	mapKeys = function (map) {
		const res = [];
		map.forEach(function (value, key) {
			return res.push(key);
		});
		return res;
	};
	exports.assert = assert;
	exports.isPositive = isPositive;
	exports.implementMany = implementMany;
	exports.newSet = newSet;
	exports.mapKeys = mapKeys;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL1UvdXRpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxPQUNOLE1BQU0sR0FBRyxVQUFBLElBQUksRUFBSTtBQUNoQixNQUFJLENBQUMsSUFBSSxFQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtFQUNyQzs7OztBQUdELFdBQVUsR0FBRyxVQUFBLENBQUM7U0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRO0VBQUE7T0FFL0MsYUFBYSxHQUFHLFVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUs7QUFDbkQsUUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJLEVBQUk7QUFDdkMsU0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7R0FDckQsQ0FBQyxDQUFBO0FBQ0YsU0FBTyxVQUFTLE1BQU0sRUFBRTtBQUFFLFVBQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUE7R0FBRSxDQUFBO0VBQzVFOzs7O0FBR0QsT0FBTSxHQUFHLFlBQVc7QUFDbkIsUUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtBQUNyQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDOUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7VUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUFBLENBQUMsQ0FBQTtBQUN0QyxTQUFPLEdBQUcsQ0FBQTtFQUNWOzs7O0FBR0QsUUFBTyxHQUFHLFVBQUEsR0FBRyxFQUFJO0FBQ2hCLFFBQU0sR0FBRyxHQUFHLEVBQUcsQ0FBQTtBQUNmLEtBQUcsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUUsR0FBRztVQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0dBQUEsQ0FBQyxDQUFBO0FBQzFDLFNBQU8sR0FBRyxDQUFBO0VBQ1YsQ0FBQTtTQTVCRCxNQUFNLEdBQU4sTUFBTTtTQU1OLFVBQVUsR0FBVixVQUFVO1NBRVYsYUFBYSxHQUFiLGFBQWE7U0FRYixNQUFNLEdBQU4sTUFBTTtTQVFOLE9BQU8sR0FBUCxPQUFPIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL1UvdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdFxuXHRhc3NlcnQgPSBjb25kID0+IHtcblx0XHRpZiAoIWNvbmQpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQuJylcblx0fSxcblxuXHQvLyAtMCBpcyBuZWdhdGl2ZVxuXHRpc1Bvc2l0aXZlID0gbiA9PiBuID49IDAgJiYgMSAvIG4gIT09IC1JbmZpbml0eSxcblxuXHRpbXBsZW1lbnRNYW55ID0gKGhvbGRlciwgbWV0aG9kTmFtZSwgbmFtZVRvSW1wbCkgPT4ge1xuXHRcdE9iamVjdC5rZXlzKG5hbWVUb0ltcGwpLmZvckVhY2gobmFtZSA9PiB7XG5cdFx0XHRob2xkZXJbbmFtZV0ucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbmFtZVRvSW1wbFtuYW1lXVxuXHRcdH0pXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgfVxuXHR9LFxuXG5cdC8vIFRPRE86RVM2IEp1c3QgdXNlIGBuZXcgU2V0YFxuXHRuZXdTZXQgPSBmdW5jdGlvbigpIHtcblx0XHRjb25zdCBzZXQgPSBuZXcgU2V0KClcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgPSBpICsgMSlcblx0XHRcdGFyZ3VtZW50c1tpXS5mb3JFYWNoKF8gPT4gc2V0LmFkZChfKSlcblx0XHRyZXR1cm4gc2V0XG5cdH0sXG5cblx0Ly8gVE9ETzpFUzYgbWFwLmtleXMoKVxuXHRtYXBLZXlzID0gbWFwID0+IHtcblx0XHRjb25zdCByZXMgPSBbIF1cblx0XHRtYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gcmVzLnB1c2goa2V5KSlcblx0XHRyZXR1cm4gcmVzXG5cdH1cbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9