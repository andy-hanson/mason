if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const assert = cond => {
		if (!cond) throw new Error('Assertion failed.');
	},
	      cat = function () {
		// TODO:ES6 Splat
		const parts = Array.prototype.slice.call(arguments);
		const out = [];
		for (const _ of parts) if (_ instanceof Array) out.push(..._);else if (_ !== null) out.push(_);
		return out;
	},
	      eachReverse = (array, action) => {
		for (let i = array.length - 1; i >= 0; i = i - 1) action(array[i]);
	},
	      flatMap = (mapped, mapper) => {
		const out = [];
		for (let i = 0; i < mapped.length; i = i + 1) out.push(...mapper(mapped[i], i));
		return out;
	},
	     

	// flatMap where opMapper returns optionals instead of arrays.
	flatOpMap = (arr, opMapper) => {
		const out = [];
		for (const em of arr) opEach(opMapper(em), _ => out.push(_));
		return out;
	},
	      head = arr => {
		assert(!isEmpty(arr));
		return arr[0];
	},
	      ifElse = (op, ifSome, ifNone) => op === null ? ifNone() : ifSome(op),
	      implementMany = (holder, methodName, nameToImpl) => {
		for (const name in nameToImpl) holder[name].prototype[methodName] = nameToImpl[name];
	},
	      isEmpty = arr => arr.length === 0,
	     

	// -0 is negative
	isPositive = n => n >= 0 && 1 / n !== -Infinity,
	      iteratorToArray = iter => {
		const out = [];
		for (let em of iter) out.push(em);
		return out;
	},
	      last = arr => {
		assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	      opEach = (op, mapper) => op === null ? null : mapper(op),
	      opIf = (cond, makeOp) => cond ? makeOp() : null,
	      opMap = opEach,
	      push = (mutArr, em) => {
		mutArr.push(em);
		return mutArr;
	},
	      repeat = (em, n) => {
		assert(n >= 0);
		const out = [];
		for (let i = n; i > 0; i = i - 1) out.push(em);
		return out;
	},
	      rtail = arr => {
		assert(!isEmpty(arr));
		return arr.slice(0, arr.length - 1);
	},
	      tail = arr => {
		assert(!isEmpty(arr));
		return arr.slice(1);
	},
	      type = (instance, itsType) => {
		if (!(Object(instance) instanceof itsType)) throw new Error(`${ instance } is not a ${ itsType.name }`);
	},
	      unshift = (em, mutArr) => {
		mutArr.unshift(em);
		return mutArr;
	};
	exports.assert = assert;
	exports.cat = cat;
	exports.eachReverse = eachReverse;
	exports.flatMap = flatMap;
	exports.flatOpMap = flatOpMap;
	exports.head = head;
	exports.ifElse = ifElse;
	exports.implementMany = implementMany;
	exports.isEmpty = isEmpty;
	exports.isPositive = isPositive;
	exports.iteratorToArray = iteratorToArray;
	exports.last = last;
	exports.opEach = opEach;
	exports.opIf = opIf;
	exports.opMap = opMap;
	exports.push = push;
	exports.repeat = repeat;
	exports.rtail = rtail;
	exports.tail = tail;
	exports.type = type;
	exports.unshift = unshift;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sT0FDTixNQUFNLEdBQUcsSUFBSSxJQUFJO0FBQ2hCLE1BQUksQ0FBQyxJQUFJLEVBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0VBQ3JDO09BRUQsR0FBRyxHQUFHLFlBQVc7O0FBRWhCLFFBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUNuRCxRQUFNLEdBQUcsR0FBRyxFQUFHLENBQUE7QUFDZixPQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFDcEIsSUFBSSxDQUFDLFlBQVksS0FBSyxFQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUEsS0FDVixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQ2xCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDYixTQUFPLEdBQUcsQ0FBQTtFQUNWO09BRUQsV0FBVyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sS0FBSztBQUNoQyxPQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQy9DLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtFQUNqQjtPQUVELE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEtBQUs7QUFDN0IsUUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0FBQ2QsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQzNDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbEMsU0FBTyxHQUFHLENBQUE7RUFDVjs7OztBQUdELFVBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLEtBQUs7QUFDOUIsUUFBTSxHQUFHLEdBQUcsRUFBRyxDQUFBO0FBQ2YsT0FBSyxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2QyxTQUFPLEdBQUcsQ0FBQTtFQUNWO09BRUQsSUFBSSxHQUFHLEdBQUcsSUFBSTtBQUNiLFFBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3JCLFNBQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0VBQ2I7T0FFRCxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sS0FDM0IsRUFBRSxLQUFLLElBQUksR0FBRyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO09BRXBDLGFBQWEsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxLQUFLO0FBQ25ELE9BQUssTUFBTSxJQUFJLElBQUksVUFBVSxFQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtFQUN0RDtPQUVELE9BQU8sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDOzs7O0FBR2pDLFdBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUTtPQUUvQyxlQUFlLEdBQUcsSUFBSSxJQUFJO0FBQ3pCLFFBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtBQUNkLE9BQUssSUFBSSxFQUFFLElBQUksSUFBSSxFQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2IsU0FBTyxHQUFHLENBQUE7RUFDVjtPQUVELElBQUksR0FBRyxHQUFHLElBQUk7QUFDYixRQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixTQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0VBQzFCO09BRUQsTUFBTSxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sS0FDbkIsRUFBRSxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztPQUVoQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxLQUNuQixJQUFJLEdBQUcsTUFBTSxFQUFFLEdBQUcsSUFBSTtPQUV2QixLQUFLLEdBQUcsTUFBTTtPQUVkLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUs7QUFDdEIsUUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNmLFNBQU8sTUFBTSxDQUFBO0VBQ2I7T0FFRCxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLO0FBQ25CLFFBQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDZCxRQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDZCxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2IsU0FBTyxHQUFHLENBQUE7RUFDVjtPQUVELEtBQUssR0FBRyxHQUFHLElBQUk7QUFDZCxRQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixTQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7RUFDbkM7T0FFRCxJQUFJLEdBQUcsR0FBRyxJQUFJO0FBQ2IsUUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDckIsU0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0VBQ25CO09BRUQsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sS0FBSztBQUM3QixNQUFJLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLE9BQU8sQ0FBQSxBQUFDLEVBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFFLFFBQVEsRUFBQyxVQUFVLEdBQUUsT0FBTyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQTtFQUN4RDtPQUVELE9BQU8sR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLEtBQUs7QUFDekIsUUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNsQixTQUFPLE1BQU0sQ0FBQTtFQUNiLENBQUEiLCJmaWxlIjoibWV0YS9jb21waWxlL3ByaXZhdGUvdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdFxuXHRhc3NlcnQgPSBjb25kID0+IHtcblx0XHRpZiAoIWNvbmQpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQuJylcblx0fSxcblxuXHRjYXQgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBUT0RPOkVTNiBTcGxhdFxuXHRcdGNvbnN0IHBhcnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuXHRcdGNvbnN0IG91dCA9IFsgXVxuXHRcdGZvciAoY29uc3QgXyBvZiBwYXJ0cylcblx0XHRcdGlmIChfIGluc3RhbmNlb2YgQXJyYXkpXG5cdFx0XHRcdG91dC5wdXNoKC4uLl8pXG5cdFx0XHRlbHNlIGlmIChfICE9PSBudWxsKVxuXHRcdFx0XHRvdXQucHVzaChfKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHRlYWNoUmV2ZXJzZSA9IChhcnJheSwgYWN0aW9uKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaSA9IGkgLSAxKVxuXHRcdFx0YWN0aW9uKGFycmF5W2ldKVxuXHR9LFxuXG5cdGZsYXRNYXAgPSAobWFwcGVkLCBtYXBwZXIpID0+IHtcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbWFwcGVkLmxlbmd0aDsgaSA9IGkgKyAxKVxuXHRcdFx0b3V0LnB1c2goLi4ubWFwcGVyKG1hcHBlZFtpXSwgaSkpXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXG5cdC8vIGZsYXRNYXAgd2hlcmUgb3BNYXBwZXIgcmV0dXJucyBvcHRpb25hbHMgaW5zdGVhZCBvZiBhcnJheXMuXG5cdGZsYXRPcE1hcCA9IChhcnIsIG9wTWFwcGVyKSA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gWyBdXG5cdFx0Zm9yIChjb25zdCBlbSBvZiBhcnIpXG5cdFx0XHRvcEVhY2gob3BNYXBwZXIoZW0pLCBfID0+IG91dC5wdXNoKF8pKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHRoZWFkID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyWzBdXG5cdH0sXG5cblx0aWZFbHNlID0gKG9wLCBpZlNvbWUsIGlmTm9uZSkgPT5cblx0XHRvcCA9PT0gbnVsbCA/IGlmTm9uZSgpIDogaWZTb21lKG9wKSxcblxuXHRpbXBsZW1lbnRNYW55ID0gKGhvbGRlciwgbWV0aG9kTmFtZSwgbmFtZVRvSW1wbCkgPT4ge1xuXHRcdGZvciAoY29uc3QgbmFtZSBpbiBuYW1lVG9JbXBsKVxuXHRcdFx0aG9sZGVyW25hbWVdLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG5hbWVUb0ltcGxbbmFtZV1cblx0fSxcblxuXHRpc0VtcHR5ID0gYXJyID0+IGFyci5sZW5ndGggPT09IDAsXG5cblx0Ly8gLTAgaXMgbmVnYXRpdmVcblx0aXNQb3NpdGl2ZSA9IG4gPT4gbiA+PSAwICYmIDEgLyBuICE9PSAtSW5maW5pdHksXG5cblx0aXRlcmF0b3JUb0FycmF5ID0gaXRlciA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRmb3IgKGxldCBlbSBvZiBpdGVyKVxuXHRcdFx0b3V0LnB1c2goZW0pXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXG5cdGxhc3QgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdXG5cdH0sXG5cblx0b3BFYWNoID0gKG9wLCBtYXBwZXIpID0+XG5cdFx0b3AgPT09IG51bGwgPyBudWxsIDogbWFwcGVyKG9wKSxcblxuXHRvcElmID0gKGNvbmQsIG1ha2VPcCkgPT5cblx0XHRjb25kID8gbWFrZU9wKCkgOiBudWxsLFxuXG5cdG9wTWFwID0gb3BFYWNoLFxuXG5cdHB1c2ggPSAobXV0QXJyLCBlbSkgPT4ge1xuXHRcdG11dEFyci5wdXNoKGVtKVxuXHRcdHJldHVybiBtdXRBcnJcblx0fSxcblxuXHRyZXBlYXQgPSAoZW0sIG4pID0+IHtcblx0XHRhc3NlcnQobiA+PSAwKVxuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IG47IGkgPiAwOyBpID0gaSAtIDEpXG5cdFx0XHRvdXQucHVzaChlbSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0cnRhaWwgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnIuc2xpY2UoMCwgYXJyLmxlbmd0aCAtIDEpXG5cdH0sXG5cblx0dGFpbCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyci5zbGljZSgxKVxuXHR9LFxuXG5cdHR5cGUgPSAoaW5zdGFuY2UsIGl0c1R5cGUpID0+IHtcblx0XHRpZiAoIShPYmplY3QoaW5zdGFuY2UpIGluc3RhbmNlb2YgaXRzVHlwZSkpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYCR7aW5zdGFuY2V9IGlzIG5vdCBhICR7aXRzVHlwZS5uYW1lfWApXG5cdH0sXG5cblx0dW5zaGlmdCA9IChlbSwgbXV0QXJyKSA9PiB7XG5cdFx0bXV0QXJyLnVuc2hpZnQoZW0pXG5cdFx0cmV0dXJuIG11dEFyclxuXHR9XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==