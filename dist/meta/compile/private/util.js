if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	const assert = function (cond) {
		if (!cond) throw new Error('Assertion failed.');
	},
	      cat = function () {
		for (var _len = arguments.length, parts = Array(_len), _key = 0; _key < _len; _key++) {
			parts[_key] = arguments[_key];
		}

		const out = [];
		for (const _ of parts) if (_ instanceof Array) out.push.apply(out, _toConsumableArray(_));else if (_ !== null) out.push(_);
		return out;
	},
	      eachReverse = function (array, action) {
		for (let i = array.length - 1; i >= 0; i = i - 1) action(array[i]);
	},
	      flatMap = function (mapped, mapper) {
		const out = [];
		for (let i = 0; i < mapped.length; i = i + 1) out.push.apply(out, _toConsumableArray(mapper(mapped[i], i)));
		return out;
	},
	     

	// flatMap where opMapper returns optionals instead of arrays.
	flatOpMap = function (arr, opMapper) {
		const out = [];
		for (const em of arr) opEach(opMapper(em), function (_) {
			return out.push(_);
		});
		return out;
	},
	      head = function (arr) {
		assert(!isEmpty(arr));
		return arr[0];
	},
	      ifElse = function (op, ifSome, ifNone) {
		return op === null ? ifNone() : ifSome(op);
	},
	      implementMany = function (holder, methodName, nameToImpl) {
		for (const name in nameToImpl) holder[name].prototype[methodName] = nameToImpl[name];
	},
	      isEmpty = function (arr) {
		return arr.length === 0;
	},
	     

	// -0 is negative
	isPositive = function (n) {
		return n >= 0 && 1 / n !== -Infinity;
	},
	      iteratorToArray = function (iter) {
		const out = [];
		for (let em of iter) out.push(em);
		return out;
	},
	      last = function (arr) {
		assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	      opEach = function (op, mapper) {
		return op === null ? null : mapper(op);
	},
	      opIf = function (cond, makeOp) {
		return cond ? makeOp() : null;
	},
	      opMap = opEach,
	      push = function (mutArr, em) {
		mutArr.push(em);
		return mutArr;
	},
	      repeat = function (em, n) {
		assert(n >= 0);
		const out = [];
		for (let i = n; i > 0; i = i - 1) out.push(em);
		return out;
	},
	      rtail = function (arr) {
		assert(!isEmpty(arr));
		return arr.slice(0, arr.length - 1);
	},
	      tail = function (arr) {
		assert(!isEmpty(arr));
		return arr.slice(1);
	},
	      type = function (instance, itsType) {
		if (!(Object(instance) instanceof itsType)) throw new Error(instance + ' is not a ' + itsType.name);
	},
	      unshift = function (em, mutArr) {
		mutArr.unshift(em);
		return mutArr;
	};
	exports.assert = assert;
	exports.cat = cat;
	exports.eachReverse = eachReverse;
	exports.flatMap = flatMap;
	exports.flatOpMap = flatOpMap;
	exports.head = head;
	exports.ifElse = ifElse;
	exports.implementMany = implementMany;
	exports.isEmpty = isEmpty;
	exports.isPositive = isPositive;
	exports.iteratorToArray = iteratorToArray;
	exports.last = last;
	exports.opEach = opEach;
	exports.opIf = opIf;
	exports.opMap = opMap;
	exports.push = push;
	exports.repeat = repeat;
	exports.rtail = rtail;
	exports.tail = tail;
	exports.type = type;
	exports.unshift = unshift;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sT0FDTixNQUFNLEdBQUcsVUFBQSxJQUFJLEVBQUk7QUFDaEIsTUFBSSxDQUFDLElBQUksRUFDUixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7RUFDckM7T0FFRCxHQUFHLEdBQUcsWUFBYztvQ0FBVixLQUFLO0FBQUwsUUFBSzs7O0FBQ2QsUUFBTSxHQUFHLEdBQUcsRUFBRyxDQUFBO0FBQ2YsT0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQ3BCLElBQUksQ0FBQyxZQUFZLEtBQUssRUFDckIsR0FBRyxDQUFDLElBQUksTUFBQSxDQUFSLEdBQUcscUJBQVMsQ0FBQyxFQUFDLENBQUEsS0FDVixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQ2xCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDYixTQUFPLEdBQUcsQ0FBQTtFQUNWO09BRUQsV0FBVyxHQUFHLFVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBSztBQUNoQyxPQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQy9DLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtFQUNqQjtPQUVELE9BQU8sR0FBRyxVQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUs7QUFDN0IsUUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0FBQ2QsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQzNDLEdBQUcsQ0FBQyxJQUFJLE1BQUEsQ0FBUixHQUFHLHFCQUFTLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUs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dmF0ZS91dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0XG5cdGFzc2VydCA9IGNvbmQgPT4ge1xuXHRcdGlmICghY29uZClcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXNzZXJ0aW9uIGZhaWxlZC4nKVxuXHR9LFxuXG5cdGNhdCA9ICguLi5wYXJ0cykgPT4ge1xuXHRcdGNvbnN0IG91dCA9IFsgXVxuXHRcdGZvciAoY29uc3QgXyBvZiBwYXJ0cylcblx0XHRcdGlmIChfIGluc3RhbmNlb2YgQXJyYXkpXG5cdFx0XHRcdG91dC5wdXNoKC4uLl8pXG5cdFx0XHRlbHNlIGlmIChfICE9PSBudWxsKVxuXHRcdFx0XHRvdXQucHVzaChfKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHRlYWNoUmV2ZXJzZSA9IChhcnJheSwgYWN0aW9uKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaSA9IGkgLSAxKVxuXHRcdFx0YWN0aW9uKGFycmF5W2ldKVxuXHR9LFxuXG5cdGZsYXRNYXAgPSAobWFwcGVkLCBtYXBwZXIpID0+IHtcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbWFwcGVkLmxlbmd0aDsgaSA9IGkgKyAxKVxuXHRcdFx0b3V0LnB1c2goLi4ubWFwcGVyKG1hcHBlZFtpXSwgaSkpXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXG5cdC8vIGZsYXRNYXAgd2hlcmUgb3BNYXBwZXIgcmV0dXJucyBvcHRpb25hbHMgaW5zdGVhZCBvZiBhcnJheXMuXG5cdGZsYXRPcE1hcCA9IChhcnIsIG9wTWFwcGVyKSA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gWyBdXG5cdFx0Zm9yIChjb25zdCBlbSBvZiBhcnIpXG5cdFx0XHRvcEVhY2gob3BNYXBwZXIoZW0pLCBfID0+IG91dC5wdXNoKF8pKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHRoZWFkID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyWzBdXG5cdH0sXG5cblx0aWZFbHNlID0gKG9wLCBpZlNvbWUsIGlmTm9uZSkgPT5cblx0XHRvcCA9PT0gbnVsbCA/IGlmTm9uZSgpIDogaWZTb21lKG9wKSxcblxuXHRpbXBsZW1lbnRNYW55ID0gKGhvbGRlciwgbWV0aG9kTmFtZSwgbmFtZVRvSW1wbCkgPT4ge1xuXHRcdGZvciAoY29uc3QgbmFtZSBpbiBuYW1lVG9JbXBsKVxuXHRcdFx0aG9sZGVyW25hbWVdLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG5hbWVUb0ltcGxbbmFtZV1cblx0fSxcblxuXHRpc0VtcHR5ID0gYXJyID0+IGFyci5sZW5ndGggPT09IDAsXG5cblx0Ly8gLTAgaXMgbmVnYXRpdmVcblx0aXNQb3NpdGl2ZSA9IG4gPT4gbiA+PSAwICYmIDEgLyBuICE9PSAtSW5maW5pdHksXG5cblx0aXRlcmF0b3JUb0FycmF5ID0gaXRlciA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRmb3IgKGxldCBlbSBvZiBpdGVyKVxuXHRcdFx0b3V0LnB1c2goZW0pXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXG5cdGxhc3QgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdXG5cdH0sXG5cblx0b3BFYWNoID0gKG9wLCBtYXBwZXIpID0+XG5cdFx0b3AgPT09IG51bGwgPyBudWxsIDogbWFwcGVyKG9wKSxcblxuXHRvcElmID0gKGNvbmQsIG1ha2VPcCkgPT5cblx0XHRjb25kID8gbWFrZU9wKCkgOiBudWxsLFxuXG5cdG9wTWFwID0gb3BFYWNoLFxuXG5cdHB1c2ggPSAobXV0QXJyLCBlbSkgPT4ge1xuXHRcdG11dEFyci5wdXNoKGVtKVxuXHRcdHJldHVybiBtdXRBcnJcblx0fSxcblxuXHRyZXBlYXQgPSAoZW0sIG4pID0+IHtcblx0XHRhc3NlcnQobiA+PSAwKVxuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IG47IGkgPiAwOyBpID0gaSAtIDEpXG5cdFx0XHRvdXQucHVzaChlbSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0cnRhaWwgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnIuc2xpY2UoMCwgYXJyLmxlbmd0aCAtIDEpXG5cdH0sXG5cblx0dGFpbCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyci5zbGljZSgxKVxuXHR9LFxuXG5cdHR5cGUgPSAoaW5zdGFuY2UsIGl0c1R5cGUpID0+IHtcblx0XHRpZiAoIShPYmplY3QoaW5zdGFuY2UpIGluc3RhbmNlb2YgaXRzVHlwZSkpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYCR7aW5zdGFuY2V9IGlzIG5vdCBhICR7aXRzVHlwZS5uYW1lfWApXG5cdH0sXG5cblx0dW5zaGlmdCA9IChlbSwgbXV0QXJyKSA9PiB7XG5cdFx0bXV0QXJyLnVuc2hpZnQoZW0pXG5cdFx0cmV0dXJuIG11dEFyclxuXHR9XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==