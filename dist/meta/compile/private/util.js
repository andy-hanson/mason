if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	const assert = function (cond) {
		if (!cond) throw new Error('Assertion failed.');
	},
	      cat = function () {
		for (var _len = arguments.length, parts = Array(_len), _key = 0; _key < _len; _key++) {
			parts[_key] = arguments[_key];
		}

		const out = [];
		parts.forEach(function (_) {
			if (_ instanceof Array) out.push.apply(out, _toConsumableArray(_));else if (_ !== null) out.push(_);
		});
		return out;
	},
	      flatMap = function (mapped, mapper) {
		const out = [];
		mapped.forEach(function (_, i) {
			return out.push.apply(out, _toConsumableArray(mapper(_, i)));
		});
		return out;
	},
	     

	// flatMap where opMapper returns optionals instead of arrays.
	flatOpMap = function (arr, opMapper) {
		const out = [];
		arr.forEach(function (em) {
			return opEach(opMapper(em), function (_) {
				return out.push(_);
			});
		});
		return out;
	},
	      head = function (arr) {
		assert(!isEmpty(arr));
		return arr[0];
	},
	      ifElse = function (op, ifSome, ifNone) {
		return op === null ? ifNone() : ifSome(op);
	},
	      implementMany = function (holder, methodName, nameToImpl) {
		return Object.keys(nameToImpl).forEach(function (name) {
			return holder[name].prototype[methodName] = nameToImpl[name];
		});
	},
	      isEmpty = function (arr) {
		return arr.length === 0;
	},
	     

	// -0 is negative
	isPositive = function (n) {
		return n >= 0 && 1 / n !== -Infinity;
	},
	      iteratorToArray = function (iter) {
		const out = [];
		for (let em of iter) out.push(em);
		return out;
	},
	      last = function (arr) {
		assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	     

	// TODO:ES6 map.keys()
	mapKeys = function (map) {
		const res = [];
		map.forEach(function (value, key) {
			return res.push(key);
		});
		return res;
	},
	     

	// TODO:ES6 Just use `new Set`
	newSet = function () {
		const set = new Set();
		for (let i = 0; i < arguments.length; i = i + 1) arguments[i].forEach(function (_) {
			return set.add(_);
		});
		return set;
	},
	      opEach = function (op, mapper) {
		return op === null ? null : mapper(op);
	},
	      opIf = function (cond, makeOp) {
		return cond ? makeOp() : null;
	},
	      opMap = opEach,
	      push = function (mutArr, em) {
		mutArr.push(em);
		return mutArr;
	},
	      range = function (max) {
		const out = [];
		for (let i = 0; i < max; i = i + 1) out.push(i);
		return out;
	},
	      repeat = function (em, n) {
		assert(n >= 0);
		const out = [];
		for (let i = n; i > 0; i = i - 1) out.push(em);
		return out;
	},
	      rtail = function (arr) {
		assert(!isEmpty(arr));
		return arr.slice(0, arr.length - 1);
	},
	      tail = function (arr) {
		assert(!isEmpty(arr));
		return arr.slice(1);
	},
	      type = function (instance, itsType) {
		if (!(Object(instance) instanceof itsType)) throw new Error('' + instance + ' is not a ' + itsType.name);
	},
	      unshift = function (em, mutArr) {
		mutArr.unshift(em);
		return mutArr;
	};
	exports.assert = assert;
	exports.cat = cat;
	exports.flatMap = flatMap;
	exports.flatOpMap = flatOpMap;
	exports.head = head;
	exports.ifElse = ifElse;
	exports.implementMany = implementMany;
	exports.isEmpty = isEmpty;
	exports.isPositive = isPositive;
	exports.iteratorToArray = iteratorToArray;
	exports.last = last;
	exports.mapKeys = mapKeys;
	exports.newSet = newSet;
	exports.opEach = opEach;
	exports.opIf = opIf;
	exports.opMap = opMap;
	exports.push = push;
	exports.range = range;
	exports.repeat = repeat;
	exports.rtail = rtail;
	exports.tail = tail;
	exports.type = type;
	exports.unshift = unshift;
});
//# sourceMappingURL=data:application/json;base64,