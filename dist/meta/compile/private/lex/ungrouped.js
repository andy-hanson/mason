if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', 'esast/dist/Loc', '../../CompileError', '../Lang', '../Token', '../U/util', './GroupPre', './char'], function (exports, module, _esastDistLoc, _CompileError, _Lang, _Token, _UUtil, _GroupPre, _char) {
	'use strict';

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj['default'] : obj; };

	var _Loc = _interopRequire(_esastDistLoc);

	var _GroupPre2 = _interopRequire(_GroupPre);

	module.exports = function (cx, str) {
		const res = [];
		let line = _esastDistLoc.StartLine;
		let column = _esastDistLoc.StartColumn;
		let index = 0;

		// Use these for debugging pos.
		/*
  const
  	checkPos = () => {
  		const p = getCorrectPos()
  		if (p.line !== line || p.column !== column)
  			throw new Error(`index: ${index}, wrong: ${Pos(line, column)}, right: ${p}`)
  	},
  	indexToPos = new Map(),
  	getCorrectPos = () => {
  		if (index === 0)
  			return Pos(StartLine, StartColumn)
  			let oldPos, oldIndex
  		for (oldIndex = index - 1; oldIndex > 0; oldIndex = oldIndex - 1) {
  			oldPos = indexToPos.get(oldIndex)
  			if (oldPos)
  				break
  		}
  		if (oldPos === undefined) {
  			assert(oldIndex === 0)
  			oldPos = Pos(StartLine, StartColumn)
  		}
  		let newLine = oldPos.line, newColumn = oldPos.column
  		for (; oldIndex < index; oldIndex = oldIndex + 1)
  			if (str.charCodeAt(oldIndex) === Newline) {
  				newLine = newLine + 1
  				newColumn = StartColumn
  			} else
  				newColumn = newColumn + 1
  			const p = Pos(newLine, newColumn)
  		indexToPos.set(index, p)
  		return p
  	}
  */

		const o = function (t) {
			res.push(t);
		},
		      pos = function () {
			return _esastDistLoc.Pos(line, column);
		},
		      loc = function () {
			return _esastDistLoc.singleCharLoc(pos());
		},
		      prev = function () {
			return str.charCodeAt(index - 1);
		},
		      peek = function () {
			return str.charCodeAt(index);
		},
		      eat = function () {
			const ch = str.charCodeAt(index);
			index = index + 1;
			column = column + 1;
			return ch;
		},
		      tryEat = function (ch) {
			const canEat = peek() === ch;
			if (canEat) {
				index = index + 1;
				column = column + 1;
			}
			return canEat;
		},
		      tryEatNewline = function () {
			const canEat = peek() === _char.Newline;
			if (canEat) {
				index = index + 1;
				line = line + 1;
				column = _esastDistLoc.StartColumn;
			}
			return canEat;
		},
		     

		// Caller must ensure that backing up nCharsToBackUp characters brings us to oldPos.
		stepBackMany = function (oldPos, nCharsToBackUp) {
			index = index - nCharsToBackUp;
			line = oldPos.line;
			column = oldPos.column;
		},
		      _skipWhile = function (pred) {
			const startIndex = index;
			while (pred(peek())) index = index + 1;
			const diff = index - startIndex;
			column = column + diff;
			return diff;
		},
		      takeWhileWithPrev = function (pred) {
			const startIndex = index;
			_skipWhile(pred);
			return str.slice(startIndex - 1, index);
		},
		      takeWhile = function (pred) {
			const startIndex = index;
			_skipWhile(pred);
			return str.slice(startIndex, index);
		},
		      skipWhileEquals = function (ch) {
			return _skipWhile(function (_) {
				return _ === ch;
			});
		},
		     

		// Called after seeing the first newline.
		skipNewlines = function () {
			line = line + 1;
			const startLine = line;
			while (peek() === _char.Newline) {
				index = index + 1;
				line = line + 1;
			}
			column = _esastDistLoc.StartColumn;
			return line - startLine;
		},
		      skipRestOfLine = function () {
			return _skipWhile(function (_) {
				return _ !== _char.Newline;
			});
		};

		const ungrouped = function (isInQuote) {
			let indent = 0;

			let ch, startLine, startColumn;
			const loc = function () {
				return _Loc(_esastDistLoc.Pos(startLine, startColumn), pos());
			},
			      keyword = function (k) {
				return _Token.Keyword(loc(), k);
			},
			      gp = function (k) {
				return o(_GroupPre2(loc(), k));
			},
			      eatNumber = function () {
				const lit = takeWhileWithPrev(_char.isNumberCharacter);
				const num = Number(lit);
				cx.check(!Number.isNaN(num), pos, function () {
					return 'Invalid number literal ' + _CompileError.code(lit);
				});
				return _Token.TokenNumberLiteral(loc(), num);
			};

			while (index !== str.length) {
				startLine = line;
				startColumn = column;

				ch = eat();
				switch (ch) {
					case _char.N0:case _char.N1:case _char.N2:case _char.N3:case _char.N4:
					case _char.N5:case _char.N6:case _char.N7:case _char.N8:case _char.N9:
						o(eatNumber());
						break;
					case _char.OpParen:
						gp(_GroupPre.GP_OpenParen);
						break;
					case _char.OpBracket:
						gp(_GroupPre.GP_OpenBracket);
						break;
					case _char.ClParen:
						gp(_GroupPre.GP_CloseParen);
						break;
					case _char.ClBracket:
						gp(_GroupPre.GP_CloseBracket);
						break;
					case _char.ClBrace:
						cx.check(isInQuote, loc, function () {
							return 'Reserved character ' + _char.showChar(ch);
						});
						return;
					case _char.Space:
						cx.warnIf(peek() === _char.Space, loc, 'Multiple spaces in a row');
						gp(_GroupPre.GP_Space);
						break;
					case _char.Dot:
						{
							const p = peek();
							if (p === _char.Space || p === _char.Newline) {
								// ObjLit assign in its own spaced group.
								// We can't just create a new Group here because we want to
								// ensure it's not part of the preceding or following spaced group.
								gp(_GroupPre.GP_Space);
								o(keyword('. '));
								gp(_GroupPre.GP_Space);
							} else o(_Token.DotName(loc(),
							// +1 for the dot we just skipped.
							skipWhileEquals(_char.Dot) + 1, takeWhile(_char.isNameCharacter)));
							break;
						}
					case _char.Colon:
						o(keyword(':'));
						break;
					case _char.Tilde:
						if (tryEat(_char.Bar)) {
							o(keyword('~|'));
							gp(_GroupPre.GP_Space);
							break;
						} else {
							o(keyword('~'));
							break;
						}
						break;
					case _char.Bar:
						// First arg in its own spaced group
						o(keyword('|'));
						gp(_GroupPre.GP_Space);
						break;
					case _char.Underscore:
						o(keyword('_'));
						break;
					case _char.Hash:
						if (!(tryEat(_char.Space) || tryEat(_char.Tab))) cx.fail(loc, function () {
							return '' + _CompileError.code('#') + ' must be followed by space or tab.}';
						});
						skipRestOfLine();
						break;
					case _char.Newline:
						{
							cx.check(!isInQuote, loc, 'Quote interpolation cannot contain newline');
							cx.check(prev() !== _char.Space, loc, 'Line ends in a space');

							// Skip any blank lines.
							skipNewlines();
							const oldIndent = indent;
							indent = skipWhileEquals(_char.Tab);
							cx.check(peek() !== _char.Space, pos, 'Line begins in a space');
							if (indent <= oldIndent) {
								for (let i = indent; i < oldIndent; i = i + 1) gp(_GroupPre.GP_CloseBlock);
								gp(_GroupPre.GP_Line);
							} else {
								cx.check(indent === oldIndent + 1, loc, 'Line is indented more than once');
								gp(_GroupPre.GP_OpenBlock);
							}
							break;
						}
					case _char.Tab:
						cx.fail(loc(), 'Tab may only be used to indent');
						break;
					case _char.Quote:
						lexQuote(indent);
						break;
					case _char.Hyphen:
						if (_char.isDigit(peek())) {
							o(eatNumber());
							break;
						}
					// Else fallthrough
					default:
						{
							cx.check(!_char.isReservedCharacter(ch), loc, function () {
								return 'Reserved character ' + _char.showChar(ch);
							});
							// All other characters should be handled in a case above.
							const name = takeWhileWithPrev(_char.isNameCharacter);

							if (_Lang.NonNames.has(name)) if (name === 'region') {
								// Rest of line is a comment.
								skipRestOfLine();
								o(keyword('region'));
							} else if (_Lang.AllKeywords.has(name)) o(keyword(name));else cx.fail(loc, 'Reserved word ' + _CompileError.code(name));else if (tryEat(_char.Underscore)) o(_Token.CallOnFocus(loc(), name));else o(_Token.Name(loc(), name));
						}
				}
			}
		};

		const lexQuote = function (indent) {
			const quoteIndent = indent + 1;

			const isIndented = tryEatNewline();
			if (isIndented) {
				const actualIndent = skipWhileEquals(_char.Tab);
				cx.check(actualIndent === quoteIndent, pos, 'Indented quote must have exactly one more indent than previous line.');
			}

			let read = '';

			const yieldRead = function () {
				if (read !== '') {
					o(read);
					read = '';
				}
			};

			o(_GroupPre2(loc(), _GroupPre.GP_OpenQuote));

			eatChars: while (true) {
				const chPos = pos();
				const ch = eat();
				switch (ch) {
					case _char.Backslash:
						{
							read = read + quoteEscape(eat());
							break;
						}
					case _char.OpBrace:
						{
							yieldRead();
							// We can't create a Group now because there may be other GroupPre_s inside.
							o(_GroupPre2(_esastDistLoc.singleCharLoc(chPos), _GroupPre.GP_OpenParen));
							ungrouped(true);
							o(_GroupPre2(loc(), _GroupPre.GP_CloseParen));
							break;
						}
					case _char.Newline:
						{
							cx.check(prev !== _char.Space, chPos, 'Line ends in a space');
							cx.check(isIndented, chPos, 'Unclosed quote.');
							// Allow extra blank lines.
							const numNewlines = skipNewlines() + 1;
							const newIndent = skipWhileEquals(_char.Tab);
							if (newIndent < quoteIndent) {
								// Indented quote section is over.
								// Undo reading the tabs and newline.
								stepBackMany(chPos, numNewlines + newIndent);
								_UUtil.assert(peek() === _char.Newline);
								break eatChars;
							} else read = read + '\n'.repeat(numNewlines) + '\t'.repeat(newIndent - quoteIndent);
							break;
						}
					case _char.Quote:
						if (!isIndented) break eatChars;
					// Else fallthrough
					default:
						read = read + String.fromCharCode(ch);
				}
			}

			yieldRead();
			o(_GroupPre2(loc(), _GroupPre.GP_CloseQuote));
		};

		const quoteEscape = function (ch) {
			switch (ch) {
				case _char.OpBrace:
					return '{';
				case _char.LetterN:
					return '\n';
				case _char.LetterT:
					return '\t';
				case _char.Quote:
					return '"';
				case _char.Backslash:
					return '\\';
				default:
					cx.fail(pos, 'No need to escape ' + _char.showChar(ch));
			}
		};

		ungrouped(false);
		return res;
	};
});
//# sourceMappingURL=data:application/json;base64,