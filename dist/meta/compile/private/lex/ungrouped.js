if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', 'esast/dist/Loc', '../../CompileError', '../language', '../Token', '../util', './GroupPre', './char'], function (exports, module, _esastDistLoc, _CompileError, _language, _Token, _util, _GroupPre, _char) {
	'use strict';

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Loc = _interopRequire(_esastDistLoc);

	var _GroupPre2 = _interopRequire(_GroupPre);

	const cc = function (ch) {
		return ch.charCodeAt(0);
	};
	const N0 = cc('0'),
	      N1 = cc('1'),
	      N2 = cc('2'),
	      N3 = cc('3'),
	      N4 = cc('4'),
	      N5 = cc('5'),
	      N6 = cc('6'),
	      N7 = cc('7'),
	      N8 = cc('8'),
	      N9 = cc('9'),
	      OpParen = cc('('),
	      OpBracket = cc('['),
	      OpBrace = cc('{'),
	      ClParen = cc(')'),
	      ClBracket = cc(']'),
	      ClBrace = cc('}'),
	      Ampersand = cc('&'),
	      Backslash = cc('\\'),
	      Backtick = cc('`'),
	      Bar = cc('|'),
	      Caret = cc('^'),
	      Colon = cc(':'),
	      Comma = cc(','),
	      Dot = cc('.'),
	      Equal = cc('='),
	      Hash = cc('#'),
	      Hyphen = cc('-'),
	      LetterN = cc('n'),
	      LetterT = cc('t'),
	      Newline = cc('\n'),
	      Percent = cc('%'),
	      Quote = cc('"'),
	      Semicolon = cc(';'),
	      Space = cc(' '),
	      Tab = cc('\t'),
	      Tilde = cc('~'),
	      Underscore = cc('_'),
	      Zero = cc('\u0000');

	module.exports = function (cx, str) {
		// Lexing algorithm requires trailing newline.
		// Use a null-terminated string because it's faster than checking whether index === length.
		str = str + '\n\u0000';

		const res = [];
		let line = _esastDistLoc.StartLine;
		let column = _esastDistLoc.StartColumn;
		let index = 0;

		// Use these for debugging pos.
		/*
  const
  	checkPos = () => {
  		const p = getCorrectPos()
  		if (p.line !== line || p.column !== column)
  			throw new Error(`index: ${index}, wrong: ${Pos(line, column)}, right: ${p}`)
  	},
  	indexToPos = new Map(),
  	getCorrectPos = () => {
  		if (index === 0)
  			return Pos(StartLine, StartColumn)
  			let oldPos, oldIndex
  		for (oldIndex = index - 1; oldIndex > 0; oldIndex = oldIndex - 1) {
  			oldPos = indexToPos.get(oldIndex)
  			if (oldPos)
  				break
  		}
  		if (oldPos === undefined) {
  			assert(oldIndex === 0)
  			oldPos = Pos(StartLine, StartColumn)
  		}
  		let newLine = oldPos.line, newColumn = oldPos.column
  		for (; oldIndex < index; oldIndex = oldIndex + 1)
  			if (str.charCodeAt(oldIndex) === Newline) {
  				newLine = newLine + 1
  				newColumn = StartColumn
  			} else
  				newColumn = newColumn + 1
  			const p = Pos(newLine, newColumn)
  		indexToPos.set(index, p)
  		return p
  	}
  */

		const o = function (t) {
			res.push(t);
		},
		      pos = function () {
			return (0, _esastDistLoc.Pos)(line, column);
		},
		      loc = function () {
			return (0, _esastDistLoc.singleCharLoc)(pos());
		},
		      prev = function () {
			return str.charCodeAt(index - 1);
		},
		      peek = function () {
			return str.charCodeAt(index);
		},
		      eat = function () {
			const ch = str.charCodeAt(index);
			index = index + 1;
			column = column + 1;
			return ch;
		},
		      tryEat = function (ch) {
			const canEat = peek() === ch;
			if (canEat) {
				index = index + 1;
				column = column + 1;
			}
			return canEat;
		},
		      tryEatNewline = function () {
			const canEat = peek() === Newline;
			if (canEat) {
				index = index + 1;
				line = line + 1;
				column = _esastDistLoc.StartColumn;
			}
			return canEat;
		},
		     

		// Caller must ensure that backing up nCharsToBackUp characters brings us to oldPos.
		stepBackMany = function (oldPos, nCharsToBackUp) {
			index = index - nCharsToBackUp;
			line = oldPos.line;
			column = oldPos.column;
		},
		      _skipWhile = function (pred) {
			const startIndex = index;
			while (pred(peek())) index = index + 1;
			const diff = index - startIndex;
			column = column + diff;
			return diff;
		},
		      takeWhileWithPrev = function (pred) {
			const startIndex = index;
			_skipWhile(pred);
			return str.slice(startIndex - 1, index);
		},
		      takeWhile = function (pred) {
			const startIndex = index;
			_skipWhile(pred);
			return str.slice(startIndex, index);
		},
		      skipWhileEquals = function (ch) {
			return _skipWhile(function (_) {
				return _ === ch;
			});
		},
		     

		// Called after seeing the first newline.
		skipNewlines = function () {
			line = line + 1;
			const startLine = line;
			while (peek() === Newline) {
				index = index + 1;
				line = line + 1;
			}
			column = _esastDistLoc.StartColumn;
			return line - startLine;
		},
		      skipRestOfLine = function () {
			return _skipWhile(function (_) {
				return _ !== Newline;
			});
		};

		const ungrouped = function (isInQuote) {
			let indent = 0;

			let ch, startColumn;
			const loc = function () {
				return (0, _Loc)((0, _esastDistLoc.Pos)(line, startColumn), pos());
			},
			      keyword = function (k) {
				return (0, _Token.Keyword)(loc(), k);
			},
			      gp = function (k) {
				return o((0, _GroupPre2)(loc(), k));
			},
			      eatNumber = function () {
				const lit = takeWhileWithPrev(_char.isNumberCharacter);
				const num = Number(lit);
				cx.check(!Number.isNaN(num), pos, function () {
					return 'Invalid number literal ' + (0, _CompileError.code)(lit);
				});
				return (0, _Token.TokenNumberLiteral)(loc(), num);
			};

			while (true) {
				startColumn = column;
				ch = eat();
				switch (ch) {
					case Zero:
						return;
					case N0:case N1:case N2:case N3:case N4:
					case N5:case N6:case N7:case N8:case N9:
						o(eatNumber());
						break;
					case OpParen:
						gp(_GroupPre.GP_OpenParen);
						break;
					case OpBracket:
						gp(_GroupPre.GP_OpenBracket);
						break;
					case ClParen:
						gp(_GroupPre.GP_CloseParen);
						break;
					case ClBracket:
						gp(_GroupPre.GP_CloseBracket);
						break;
					case ClBrace:
						cx.check(isInQuote, loc, function () {
							return 'Reserved character ' + (0, _char.showChar)(ch);
						});
						return;
					case Space:
						cx.warnIf(peek() === Space, loc, 'Multiple spaces in a row');
						gp(_GroupPre.GP_Space);
						break;
					case Dot:
						{
							const p = peek();
							if (p === Space || p === Newline) {
								// ObjLit assign in its own spaced group.
								// We can't just create a new Group here because we want to
								// ensure it's not part of the preceding or following spaced group.
								gp(_GroupPre.GP_Space);
								o(keyword(_Token.KW_ObjAssign));
								gp(_GroupPre.GP_Space);
							} else o((0, _Token.DotName)(loc(),
							// +1 for the dot we just skipped.
							skipWhileEquals(Dot) + 1, takeWhile(_char.isNameCharacter)));
							break;
						}
					case Colon:
						if (tryEat(Colon)) {
							const eq = tryEat(Equal);
							cx.check(eq, loc, function () {
								return '' + (0, _CompileError.code)('::') + ' must be followed by ' + (0, _CompileError.code)('=');
							});
							o(keyword(_Token.KW_AssignMutable));
						} else if (tryEat(Equal)) o(keyword(_Token.KW_AssignMutate));else o(keyword(_Token.KW_Type));
						break;
					case Tilde:
						if (tryEat(Bar)) {
							o(keyword(_Token.KW_GenFun));
							gp(_GroupPre.GP_Space);
							break;
						} else {
							o(keyword(_Token.KW_Lazy));
							break;
						}
						break;
					case Bar:
						o(keyword(_Token.KW_Fun));
						// First arg in its own spaced group
						gp(_GroupPre.GP_Space);
						break;
					case Underscore:
						o(keyword(_Token.KW_Focus));
						break;
					case Hash:
						if (!(tryEat(Space) || tryEat(Tab))) cx.fail(loc, function () {
							return '' + (0, _CompileError.code)('#') + ' must be followed by space or tab.}';
						});
						skipRestOfLine();
						break;
					case Newline:
						{
							cx.check(!isInQuote, loc, 'Quote interpolation cannot contain newline');
							cx.check(prev() !== Space, loc, 'Line ends in a space');

							// Skip any blank lines.
							skipNewlines();
							const oldIndent = indent;
							indent = skipWhileEquals(Tab);
							cx.check(peek() !== Space, pos, 'Line begins in a space');
							if (indent <= oldIndent) {
								for (let i = indent; i < oldIndent; i = i + 1) gp(_GroupPre.GP_CloseBlock);
								gp(_GroupPre.GP_Line);
							} else {
								cx.check(indent === oldIndent + 1, loc, 'Line is indented more than once');
								gp(_GroupPre.GP_OpenBlock);
							}
							break;
						}
					case Quote:
						lexQuote(indent);
						break;
					case Ampersand:case Backslash:case Backtick:case Caret:
					case Comma:case Percent:case Semicolon:
						cx.fail(loc, 'Reserved character ' + (0, _char.showChar)(ch));
					case Tab:
						cx.fail(loc(), 'Tab may only be used to indent');
					case Hyphen:
						if ((0, _char.isDigit)(peek())) {
							o(eatNumber());
							break;
						}
					// else fallthrough
					default:
						{
							// All other characters should be handled in a case above.
							const name = takeWhileWithPrev(_char.isNameCharacter);
							const k = (0, _Token.keywordKFromName)(name);
							if (k !== undefined) {
								if (k === _Token.KW_Region) skipRestOfLine();
								o(keyword(k));
							} else if (tryEat(Underscore)) o((0, _Token.CallOnFocus)(loc(), name));else {
								cx.check(!(0, _language.isReservedName)(name), pos, function () {
									return 'Reserved name ' + (0, _CompileError.code)(name);
								});
								o((0, _Token.Name)(loc(), name));
							}
						}
				}
			}
		};

		const lexQuote = function (indent) {
			const quoteIndent = indent + 1;

			const isIndented = tryEatNewline();
			if (isIndented) {
				const actualIndent = skipWhileEquals(Tab);
				cx.check(actualIndent === quoteIndent, pos, 'Indented quote must have exactly one more indent than previous line.');
			}

			let read = '';

			const yieldRead = function () {
				if (read !== '') {
					o(read);
					read = '';
				}
			};

			o((0, _GroupPre2)(loc(), _GroupPre.GP_OpenQuote));

			eatChars: while (true) {
				const chPos = pos();
				const ch = eat();
				switch (ch) {
					case Backslash:
						{
							read = read + quoteEscape(eat());
							break;
						}
					case OpBrace:
						{
							yieldRead();
							// We can't create a Group now because there may be other GroupPre_s inside.
							o((0, _GroupPre2)((0, _esastDistLoc.singleCharLoc)(chPos), _GroupPre.GP_OpenParen));
							ungrouped(true);
							o((0, _GroupPre2)(loc(), _GroupPre.GP_CloseParen));
							break;
						}
					case Newline:
						{
							cx.check(prev !== Space, chPos, 'Line ends in a space');
							cx.check(isIndented, chPos, 'Unclosed quote.');
							// Allow extra blank lines.
							const numNewlines = skipNewlines() + 1;
							const newIndent = skipWhileEquals(Tab);
							if (newIndent < quoteIndent) {
								// Indented quote section is over.
								// Undo reading the tabs and newline.
								stepBackMany(chPos, numNewlines + newIndent);
								(0, _util.assert)(peek() === Newline);
								break eatChars;
							} else read = read + '\n'.repeat(numNewlines) + '\t'.repeat(newIndent - quoteIndent);
							break;
						}
					case Quote:
						if (!isIndented) break eatChars;
					// Else fallthrough
					default:
						read = read + String.fromCharCode(ch);
				}
			}

			yieldRead();
			o((0, _GroupPre2)(loc(), _GroupPre.GP_CloseQuote));
		};

		const quoteEscape = function (ch) {
			switch (ch) {
				case OpBrace:
					return '{';
				case LetterN:
					return '\n';
				case LetterT:
					return '\t';
				case Quote:
					return '"';
				case Backslash:
					return '\\';
				default:
					cx.fail(pos, 'No need to escape ' + (0, _char.showChar)(ch));
			}
		};

		ungrouped(false);
		return res;
	};
});
//# sourceMappingURL=data:application/json;base64,