{"version":3,"sources":["meta/compile/private/lex/ungrouped.js"],"names":[],"mappings":";;;;;kBA6ByB,SAAS;;;;;;;;;;AApBlC,OAAM,EAAE,GAAG,UAAA,EAAE;SAAI,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;EAAA,CAAA;AACjC,OACC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OACpE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;OACpE,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,SAAS,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC;OACzD,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,SAAS,GAAG,EAAE,CAAC,GAAG,CAAC;OAAE,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC;OACzD,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC;OACf,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;OACb,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC;OACf,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC;OACf,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;OACb,UAAU,GAAG,EAAE,CAAC,GAAG,CAAC;OACpB,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC;OACpB,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC;OACd,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC;OAClB,QAAQ,GAAG,EAAE,CAAC,GAAG,CAAC;OAClB,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC;OACf,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;OACd,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,CAAA;;AAEF,WAAU,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE;AACzD,QAAK,MAAM,YAAU,SAAS,EAAE,OAAO,CAAC,CAAA;;AAExC,MAAI,MAAM,GAAG,CAAC,CAAA;;AAEd,SAAO,MAAM,CAAC,OAAO,EAAE,EAAE;AACxB,SAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAA;AAC3B,SAAM,GAAG,GAAG;WAAM,KAAI,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC;IAAA,CAAA;AAC3C,SAAM,OAAO,GAAG,UAAA,CAAC;WAAI,OAlCQ,OAAO,CAkCP,GAAG,EAAE,EAAE,CAAC,CAAC;IAAA,CAAA;AACtC,SAAM,EAAE,GAAG,UAAA,CAAC;WAAI,WAAS,GAAG,EAAE,EAAE,CAAC,CAAC;IAAA,CAAA;;AAElC,SAAM,SAAS,GAAG,YAAM;AACvB,QAAI,KAAK,GAAG,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA;AAC7C,QAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AACxB,UAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AACxC,WAAM,CAAC,QAAQ,EAAE,CAAA;KACjB;AACD,UAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;AACrC,MAAE,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,EAAE;wCACxB,cA/CrB,IAAI,CA+CsB,KAAK,CAAC;KAAE,CAAC,CAAA;AACzC,WAAO,OA9C8B,OAAO,CA8C7B,GAAG,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;IACpC,CAAA;;AAED,SAAM,CAAC,GAAG,MAAM,CAAC,GAAG,EAAE,CAAA;AACtB,WAAQ,EAAE,CAAC,CAAC,CAAC;AACZ,SAAK,EAAE,CAAC,AAAC,KAAK,EAAE,CAAC,AAAC,KAAK,EAAE,CAAC,AAAC,KAAK,EAAE,CAAC,AAAC,KAAK,EAAE,CAAC;AAC5C,SAAK,EAAE,CAAC,AAAC,KAAK,EAAE,CAAC,AAAC,KAAK,EAAE,CAAC,AAAC,KAAK,EAAE,CAAC,AAAC,KAAK,EAAE;AAC1C,WAAM,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;AAC1B,WAAK;AAAA,AACN,SAAK,OAAO,CAAC,AAAC,KAAK,SAAS,CAAC,AAAC,KAAK,OAAO,CAAC,AAAC,KAAK,OAAO,CAAC,AAAC,KAAK,SAAS;AACvE,WAAM,EAAE,CAAC,CAAC,CAAC,CAAA;AACX,WAAK;AAAA,AACN,SAAK,OAAO;AACX,SAAI,SAAS,EACZ,OAAM;AACP,WAAM,EAAE,CAAC,CAAC,CAAC,CAAA;AACX,WAAK;AAAA,AACN,SAAK,KAAK;AACT,OAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE,0BAA0B,CAAC,CAAA;AACjE,WAAM,EAAE,CAAC,IAAI,CAAC,CAAA;AACd,WAAK;AAAA,AACN,SAAK,GAAG;AACP,SAAI,MAAM,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;;AAEpD,YAAM,EAAE,CAAC,IAAI,CAAC,CAAA;AACd,YAAM,OAAO,CAAC,IAAI,CAAC,CAAA;AACnB,YAAM,EAAE,CAAC,IAAI,CAAC,CAAA;AACd,YAAK;MACL,MAAM;AACN,YAAM,OA3EW,OAAO,CA4EvB,GAAG,EAAE;;AAEL,YAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAChC,MAAM,CAAC,SAAS,OAhFA,eAAe,CAgFE,CAAC,CAAA;AACnC,YAAK;MACL;AAAA,AACF,SAAK,KAAK;AACT,WAAM,OAAO,CAAC,GAAG,CAAC,CAAA;AAClB,WAAK;AAAA,AACN,SAAK,KAAK;AACT,SAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;AACvB,YAAM,OAAO,CAAC,IAAI,CAAC,CAAA;AACnB,YAAM,EAAE,CAAC,IAAI,CAAC,CAAA;AACd,YAAK;MACL,MAAM;AACN,YAAM,OAAO,CAAC,GAAG,CAAC,CAAA;AAClB,YAAK;MACL;AACD,WAAK;AAAA,AACN,SAAK,GAAG;;AAEP,WAAM,OAAO,CAAC,GAAG,CAAC,CAAA;AAClB,WAAM,EAAE,CAAC,IAAI,CAAC,CAAA;AACd,WAAK;AAAA,AACN,SAAK,UAAU;AACd,WAAM,OAAO,CAAC,GAAG,CAAC,CAAA;AAClB,WAAK;AAAA,AACN,SAAK,IAAI;AACR,WAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;AACrB,WAAK;AAAA,AACN,SAAK,OAAO;AAAE;AACb,QAAE,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,GAAG,EAAE,4CAA4C,CAAC,CAAA;AACvE,QAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE,sBAAsB,CAAC,CAAA;;AAE5D,YAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;AACtB,YAAM,SAAS,GAAG,MAAM,CAAA;AACxB,YAAM,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA;AACtC,QAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAA;AACrE,UAAI,MAAM,IAAI,SAAS,EAAE;AACxB,YAAK,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAC5C,MAAM,EAAE,CAAC,IAAI,CAAC,CAAA;AACf,aAAM,EAAE,CAAC,IAAI,CAAC,CAAA;OACd,MAAM;AACN,SAAE,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,iCAAiC,CAAC,CAAA;AAC1E,aAAM,EAAE,CAAC,IAAI,CAAC,CAAA;OACd;AACD,YAAK;MACL;AAAA,AACD,SAAK,QAAQ;AAAE;AACd,YAAM,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;AACnC,QAAE,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE;4BAAkB,cAhIjD,IAAI,CAgIkD,GAAG,CAAC;OAAE,CAAC,CAAA;AAClE,YAAM,OA/H8B,OAAO,CA+H7B,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAA;AAC9B,YAAK;MACL;AAAA,AACD,SAAK,KAAK;AACT,YAAO,QAAQ,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;AACnC,WAAK;AAAA,AACN,SAAK,GAAG;AACP,OAAE,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,gCAAgC,CAAC,CAAA;AAAA,AACjD,SAAK,MAAM;AACV,SAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE;AAChC,YAAM,SAAS,EAAE,CAAA;AACjB,YAAK;MACL;AAAA;AAEF;AAAS;AACR,QAAE,CAAC,KAAK,CACP,CAAC,MAhJiC,kBAAkB,CAgJhC,GAAG,CAAC,CAAC,CAAC,EAC1B,GAAG,EACH;sCAA4B,cAnJxB,IAAI,CAmJyB,CAAC,CAAC;OAAE,CAAC,CAAA;;AAEvC,aAjJK,MAAM,CAiJJ,MApJW,eAAe,CAoJV,CAAC,CAAC,CAAC,CAAA;AAC1B,YAAM,IAAI,GAAG,CAAC,GAAG,MAAM,CAAC,SAAS,OArJf,eAAe,CAqJiB,CAAA;AAClD,cAAQ,IAAI;AACX,YAAK,QAAQ;;AAEZ,cAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;AACrB,cAAM,OAAO,CAAC,QAAQ,CAAC,CAAA;AACvB,cAAK;AAAA,AACN;AACC,YAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EACrB,MAAM,OA7JJ,WAAW,CA6JK,GAAG,EAAE,EAAE,IAAI,CAAC,CAAA,KAC1B,IAAI,MA/JN,WAAW,CA+JO,GAAG,CAAC,IAAI,CAAC,EAC7B,MAAM,OAAO,CAAC,IAAI,CAAC,CAAA,KACf,IAAI,MAjK4C,aAAa,CAiK3C,GAAG,CAAC,IAAI,CAAC,EAC/B,EAAE,CAAC,IAAI,CAAC,GAAG,qBAAmB,cAnK5B,IAAI,CAmK6B,IAAI,CAAC,CAAG,CAAA,KAE3C,MAAM,OAnKoC,IAAI,CAmKnC,GAAG,EAAE,EAAE,IAAI,CAAC,CAAA;AAAA,OACzB;MACD;AAAA,IACD;GACD;EACD;;AAGD,WAAU,QAAQ,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE;AACtC,QAAK,MAAM,YAAU,MAAM,EAAE,MAAM,CAAC,CAAA;;AAEpC,QAAM,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,KAAK,IAAI,CAAA;AACzC,QAAM,WAAW,GAAG,MAAM,GAAG,CAAC,CAAA;;AAE9B,MAAI,KAAK,GAAG,IAAI,CAAA;AAChB,MAAI,IAAI,GAAG,EAAE,CAAA;AACb,MAAI,WAAW,GAAG,MAAM,CAAC,GAAG,CAAA;;AAE5B,YAAU,SAAS,GAAG;AACrB,OAAI,IAAI,KAAK,EAAE,EAAE;AAChB,UAAM,OAvL+B,OAAO,CAwL3C,KAAI,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC;;AAE5B,SAAK,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,EAC1C,MAAM,CAAC,CAAA;AACR,SAAK,GAAG,KAAK,CAAA;IACb;AACD,OAAI,GAAG,EAAE,CAAA;AACT,cAAW,GAAG,MAAM,CAAC,GAAG,CAAA;GACxB;;AAED,QAAM,WAAS,cArMF,aAAa,CAqMG,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAA;;AAE9C,UAAQ,EAAE,OAAO,IAAI,EAAE;AACtB,SAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAA;AACxB,SAAM,EAAE,GAAG,MAAM,CAAC,GAAG,EAAE,CAAA;AACvB,WAAQ,EAAE,CAAC,EAAE,CAAC;AACb,SAAK,SAAS;AAAE;AACf,YAAM,OAAO,GAAG,MAAM,CAAC,GAAG,EAAE,CAAA;AAC5B,QAAE,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,GAAG,EAAE;qCACzB,cA7MjB,IAAI,CA6MkB,OAAO,CAAC;OAAE,CAAC,CAAA;AACtC,UAAI,GAAG,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;AACtC,YAAK;MACL;AAAA,AACD,SAAK,OAAO;AAAE;AACb,aAAO,SAAS,EAAE,CAAA;;AAElB,YAAM,WAAS,cArNL,aAAa,CAqNM,KAAK,CAAC,EAAE,GAAG,CAAC,CAAA;AACzC,aAAO,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;AAClC,YAAM,WAAS,cAvNL,aAAa,CAuNM,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAA;AAC9C,YAAK;MACL;AAAA,AACD,SAAK,OAAO;AAAE;AACb,QAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE,KAAK,EAAE,sBAAsB,CAAC,CAAA;AAC9D,QAAE,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAAA;AAC9C,UAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA;;AAE7C,UAAI,CAAC,GAAG,EAAE,CAAA;;;AAGV,UAAI,SAAS,KAAK,CAAC,EAAE;AACpB,cAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EACzB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAA;AACb,gBAAS,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA;OACzC;;AAED,UAAI,SAAS,GAAG,WAAW,EAAE;;;AAG5B,aAAM,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,GAAG,CAAC,CAAC,CAAA;AACzC,cAvOI,MAAM,CAuOH,MAAM,CAAC,IAAI,EAAE,KAAK,IAAI,CAAC,CAAA;AAC9B,aAAM,QAAQ,CAAA;OACd,MAEA,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,WAAW,CAAC,CAAA;AAC9D,YAAK;MACL;AAAA,AACD,SAAK,KAAK;AACT,SAAI,CAAC,UAAU,EACd,MAAM,QAAQ,CAAA;AAAA;AAEhB;AACC,SAAI,GAAG,IAAI,GAAG,EAAE,CAAA;AAAA,IACjB;GACD;;AAED,SAAO,SAAS,EAAE,CAAA;AAClB,QAAM,WAAS,cA7PF,aAAa,CA6PG,MAAM,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAA;EACnD;;AAED,OAAM,WAAW,GAAG,OA3PH,MAAM,CA2PI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA","file":"meta/compile/private/lex/ungrouped.js","sourcesContent":["import Loc, { singleCharLoc } from 'esast/dist/Loc'\nimport { code } from '../../CompileError'\nimport { AllKeywords, isNameCharacter, ReservedCharacters, ReservedWords } from '../Lang'\nimport { CallOnFocus, DotName, Keyword, Literal, Name } from '../Token'\nimport type from '../U/type'\nimport { assert, newMap } from '../U/util'\nimport GroupPre from './GroupPre'\nimport Stream from './Stream'\n\nconst cc = ch => ch.charCodeAt(0)\nconst\n\tN0 = cc('0'), N1 = cc('1'), N2 = cc('2'), N3 = cc('3'), N4 = cc('4'),\n\tN5 = cc('5'), N6 = cc('6'), N7 = cc('7'), N8 = cc('8'), N9 = cc('9'),\n\tOpParen = cc('('), OpBracket = cc('['), OpBrace = cc('{'),\n\tClParen = cc(')'), ClBracket = cc(']'), ClBrace = cc('}'),\n\tSpace = cc(' '),\n\tDot = cc('.'),\n\tColon = cc(':'),\n\tTilde = cc('~'),\n\tBar = cc('|'),\n\tUnderscore = cc('_'),\n\tBackslash = cc('\\\\'),\n\tHash = cc('#'),\n\tNewline = cc('\\n'),\n\tBacktick = cc('`'),\n\tQuote = cc('\"'),\n\tTab = cc('\\t'),\n\tHyphen = cc('-')\n\nexport default function* ungrouped(lx, stream, isInQuote) {\n\ttype(stream, Stream, isInQuote, Boolean)\n\n\tlet indent = 0\n\n\twhile (stream.hasNext()) {\n\t\tconst startPos = stream.pos\n\t\tconst loc = () => Loc(startPos, stream.pos)\n\t\tconst keyword = k => Keyword(loc(), k)\n\t\tconst gp = k => GroupPre(loc(), k)\n\n\t\tconst eatNumber = () => {\n\t\t\tlet msLit = _ + stream.takeWhile(/[0-9\\.e_]/)\n\t\t\tif (msLit.endsWith('.')) {\n\t\t\t\tmsLit = msLit.slice(0, msLit.length - 1)\n\t\t\t\tstream.stepBack()\n\t\t\t}\n\t\t\tconst jsLit = msLit.replace(/_/g, '')\n\t\t\tlx.check(!Number.isNaN(Number(jsLit)), stream.pos, () =>\n\t\t\t\t`Invalid number literal ${code(msLit)}`)\n\t\t\treturn Literal(loc(), jsLit, Number)\n\t\t}\n\n\t\tconst _ = stream.eat()\n\t\tswitch (cc(_)) {\n\t\t\tcase N0: case N1: case N2: case N3: case N4:\n\t\t\tcase N5: case N6: case N7: case N8: case N9:\n\t\t\t\tyield eatNumber(_, stream)\n\t\t\t\tbreak\n\t\t\tcase OpParen: case OpBracket: case OpBrace: case ClParen: case ClBracket:\n\t\t\t\tyield gp(_)\n\t\t\t\tbreak\n\t\t\tcase ClBrace:\n\t\t\t\tif (isInQuote)\n\t\t\t\t\treturn\n\t\t\t\tyield gp(_)\n\t\t\t\tbreak\n\t\t\tcase Space:\n\t\t\t\tlx.warnIf(stream.peek() === ' ', loc, 'Multiple spaces in a row')\n\t\t\t\tyield gp('sp')\n\t\t\t\tbreak\n\t\t\tcase Dot:\n\t\t\t\tif (stream.peek() === ' ' || stream.peek() === '\\n') {\n\t\t\t\t\t// ObjLit assign in its own spaced group\n\t\t\t\t\tyield gp('sp')\n\t\t\t\t\tyield keyword('. ')\n\t\t\t\t\tyield gp('sp')\n\t\t\t\t\tbreak\n\t\t\t\t} else {\n\t\t\t\t\tyield DotName(\n\t\t\t\t\t\tloc(),\n\t\t\t\t\t\t// +1 for the dot we just skipped.\n\t\t\t\t\t\tstream.takeWhile('.').length + 1,\n\t\t\t\t\t\tstream.takeWhile(isNameCharacter))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\tcase Colon:\n\t\t\t\tyield keyword(':')\n\t\t\t\tbreak\n\t\t\tcase Tilde:\n\t\t\t\tif (stream.tryEat('|')) {\n\t\t\t\t\tyield keyword('~|')\n\t\t\t\t\tyield gp('sp')\n\t\t\t\t\tbreak\n\t\t\t\t} else {\n\t\t\t\t\tyield keyword('~')\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase Bar:\n\t\t\t\t// First arg in its own spaced group\n\t\t\t\tyield keyword('|')\n\t\t\t\tyield gp('sp')\n\t\t\t\tbreak\n\t\t\tcase Underscore:\n\t\t\t\tyield keyword('_')\n\t\t\t\tbreak\n\t\t\tcase Hash:\n\t\t\t\tstream.takeUpTo('\\n')\n\t\t\t\tbreak\n\t\t\tcase Newline: {\n\t\t\t\tlx.check(!isInQuote, loc, 'Quote interpolation cannot contain newline')\n\t\t\t\tlx.check(stream.prev() !== ' ', loc, 'Line ends in a space')\n\t\t\t\t// Skip any blank lines.\n\t\t\t\tstream.takeWhile('\\n')\n\t\t\t\tconst oldIndent = indent\n\t\t\t\tindent = stream.takeWhile('\\t').length\n\t\t\t\tlx.check(stream.peek() !== ' ', stream.pos, 'Line begins in a space')\n\t\t\t\tif (indent <= oldIndent) {\n\t\t\t\t\tfor (let i = indent; i < oldIndent; i = i + 1)\n\t\t\t\t\t\tyield gp('<-')\n\t\t\t\t\tyield gp('ln')\n\t\t\t\t} else {\n\t\t\t\t\tlx.check(indent === oldIndent + 1, loc, 'Line is indented more than once')\n\t\t\t\t\tyield gp('->')\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Backtick: {\n\t\t\t\tconst js = stream.takeUpTo(/[`\\n]/)\n\t\t\t\tlx.check(stream.eat() === '`', loc, () => `Unclosed ${code('`')}`)\n\t\t\t\tyield Literal(loc(), js, 'js')\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Quote:\n\t\t\t\tyield* lexQuote(lx, stream, indent)\n\t\t\t\tbreak\n\t\t\tcase Tab:\n\t\t\t\tlx.fail(loc(), 'Tab may only be used to indent')\n\t\t\tcase Hyphen:\n\t\t\t\tif (/[0-9]/.test(stream.peek())) {\n\t\t\t\t\tyield eatNumber()\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t// Else fallthrough\n\t\t\tdefault: {\n\t\t\t\tlx.check(\n\t\t\t\t\t!ReservedCharacters.has(_),\n\t\t\t\t\tloc,\n\t\t\t\t\t() => `Reserved character ${code(_)}`)\n\t\t\t\t// All other characters should be handled in a case above.\n\t\t\t\tassert(isNameCharacter(_))\n\t\t\t\tconst name = _ + stream.takeWhile(isNameCharacter)\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'region':\n\t\t\t\t\t\t// Rest of line is a comment.\n\t\t\t\t\t\tstream.takeUpTo('\\n')\n\t\t\t\t\t\tyield keyword('region')\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (stream.tryEat('_'))\n\t\t\t\t\t\t\tyield CallOnFocus(loc(), name)\n\t\t\t\t\t\telse if (AllKeywords.has(name))\n\t\t\t\t\t\t\tyield keyword(name)\n\t\t\t\t\t\telse if (ReservedWords.has(name))\n\t\t\t\t\t\t\tlx.fail(loc, `Reserved word ${code(name)}`)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield Name(loc(), name)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nfunction* lexQuote(lx, stream, indent) {\n\ttype(stream, Stream, indent, Number)\n\n\tconst isIndented = stream.peek() === '\\n'\n\tconst quoteIndent = indent + 1\n\n\tlet first = true\n\tlet read = ''\n\tlet startOfRead = stream.pos\n\n\tfunction* yieldRead() {\n\t\tif (read !== '') {\n\t\t\tyield Literal(\n\t\t\t\tLoc(startOfRead, stream.pos),\n\t\t\t\t// Don't include leading newline of indented block\n\t\t\t\tfirst && isIndented ? read.slice(1) : read,\n\t\t\t\tString)\n\t\t\tfirst = false\n\t\t}\n\t\tread = ''\n\t\tstartOfRead = stream.pos\n\t}\n\n\tyield GroupPre(singleCharLoc(stream.pos), '\"')\n\n\teatChars: while (true) {\n\t\tconst chPos = stream.pos\n\t\tconst ch = stream.eat()\n\t\tswitch (cc(ch)) {\n\t\t\tcase Backslash: {\n\t\t\t\tconst escaped = stream.eat()\n\t\t\t\tlx.check(quoteEscape.has(escaped), stream.pos, () =>\n\t\t\t\t\t`No need to escape ${code(escaped)}`)\n\t\t\t\tread = read + quoteEscape.get(escaped)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase OpBrace: {\n\t\t\t\tyield* yieldRead()\n\t\t\t\t// We can't just create a Group now because there may be other GroupPre_s inside.\n\t\t\t\tyield GroupPre(singleCharLoc(chPos), '(')\n\t\t\t\tyield* ungrouped(lx, stream, true)\n\t\t\t\tyield GroupPre(singleCharLoc(stream.pos), ')')\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Newline: {\n\t\t\t\tlx.check(stream.prev() !== ' ', chPos, 'Line ends in a space')\n\t\t\t\tlx.check(isIndented, chPos, 'Unclosed quote.')\n\t\t\t\tlet newIndent = stream.takeWhile('\\t').length\n\n\t\t\t\tlet s = ''\n\n\t\t\t\t// Allow blank lines.\n\t\t\t\tif (newIndent === 0) {\n\t\t\t\t\twhile (stream.tryEat('\\n'))\n\t\t\t\t\t\ts = s + '\\n'\n\t\t\t\t\tnewIndent = stream.takeWhile('\\t').length\n\t\t\t\t}\n\n\t\t\t\tif (newIndent < quoteIndent) {\n\t\t\t\t\t// Indented quote section is over.\n\t\t\t\t\t// Undo reading the tabs and newline.\n\t\t\t\t\tstream.stepBackMany(chPos, newIndent + 1)\n\t\t\t\t\tassert(stream.peek() === '\\n')\n\t\t\t\t\tbreak eatChars\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tread = read + s + '\\n' + '\\t'.repeat(newIndent - quoteIndent)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Quote:\n\t\t\t\tif (!isIndented)\n\t\t\t\t\tbreak eatChars\n\t\t\t\t// Else fallthrough\n\t\t\tdefault:\n\t\t\t\tread = read + ch\n\t\t}\n\t}\n\n\tyield* yieldRead()\n\tyield GroupPre(singleCharLoc(stream.pos), 'close\"')\n}\n\nconst quoteEscape = newMap([['{', '{'], ['n', '\\n'], ['t', '\\t'], ['\"', '\"'], ['\\\\', '\\\\']])\n\n"],"sourceRoot":"/src"}