{"version":3,"sources":["meta/compile/private/lex/ungrouped.js"],"names":[],"mappings":"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","file":"meta/compile/private/lex/ungrouped.js","sourcesContent":["import Loc, { Pos, StartLine, StartColumn, singleCharLoc } from 'esast/dist/Loc'\nimport { code } from '../../CompileError'\nimport { AllKeywords, NameCharacter, ReservedCharacters, ReservedWords } from '../Lang'\nimport { CallOnFocus, DotName, Keyword, Literal, Name } from '../Token'\nimport { assert, newMap } from '../U/util'\nimport GroupPre, { GP_OpenParen, GP_OpenBracket, GP_OpenBlock, GP_OpenQuote, GP_Line,\n\tGP_Space, GP_CloseParen, GP_CloseBracket, GP_CloseBlock, GP_CloseQuote} from './GroupPre'\n\nexport default (cx, str) => {\n\tconst res = [ ]\n\tconst len = str.length\n\tlet line = StartLine\n\tlet column = StartColumn\n\tlet index = 0\n\n\tconst\n\t\to = t => res.push(t),\n\n\t\tpos = () => Pos(line, column),\n\t\tloc = () => singleCharLoc(pos()),\n\n\t\thasNext = () => index !== len,\n\n\t\tpeek = () => str.charAt(index),\n\n\t\ttryEat = ch => {\n\t\t\tconst canEat = peek() === ch\n\t\t\tif (canEat)\n\t\t\t\tskip()\n\t\t\treturn canEat\n\t\t},\n\n\t\tprev = () => str.charAt(index - 1),\n\n\t\teat = () => {\n\t\t\tconst ch = str[index]\n\t\t\tindex = index + 1\n\t\t\tif (ch === '\\n') {\n\t\t\t\tline = line + 1\n\t\t\t\tcolumn = StartColumn\n\t\t\t} else\n\t\t\t\tcolumn = column + 1\n\t\t\treturn ch\n\t\t},\n\t\tskip = eat,\n\n\t\t// Caller must ensure that backing up nCharsToBackUp characters brings us to oldPos.\n\t\tstepBackMany = (oldPos, nCharsToBackUp) => {\n\t\t\tindex = index - nCharsToBackUp\n\t\t\tline = oldPos.line\n\t\t\tcolumn = oldPos.column\n\t\t},\n\n\t\ttakeWhile = rgx => {\n\t\t\tconst startIndex = index\n\t\t\twhile (rgx.test(peek()))\n\t\t\t\tindex = index + 1\n\t\t\tcolumn = column + (index - startIndex)\n\t\t\treturn str.slice(startIndex, index)\n\t\t},\n\n\t\tskipWhileEquals = ch => {\n\t\t\tconst startIndex = index\n\t\t\twhile (peek() === ch)\n\t\t\t\tindex = index + 1\n\t\t\tconst diff = index - startIndex\n\t\t\tcolumn = column + diff\n\t\t\treturn diff\n\t\t},\n\n\t\tskipNewlines = () => {\n\t\t\twhile (peek() === '\\n') {\n\t\t\t\tindex = index + 1\n\t\t\t\tline = line + 1\n\t\t\t}\n\t\t\tcolumn = StartColumn\n\t\t},\n\n\t\tskipRestOfLine = () => {\n\t\t\twhile (peek() !== '\\n')\n\t\t\t\tindex = index + 1\n\t\t}\n\n\tconst cc = ch => ch.charCodeAt(0)\n\tconst\n\t\tN0 = cc('0'), N1 = cc('1'), N2 = cc('2'), N3 = cc('3'), N4 = cc('4'),\n\t\tN5 = cc('5'), N6 = cc('6'), N7 = cc('7'), N8 = cc('8'), N9 = cc('9'),\n\t\tOpParen = cc('('), OpBracket = cc('['), OpBrace = cc('{'),\n\t\tClParen = cc(')'), ClBracket = cc(']'), ClBrace = cc('}'),\n\t\tSpace = cc(' '),\n\t\tDot = cc('.'),\n\t\tColon = cc(':'),\n\t\tTilde = cc('~'),\n\t\tBar = cc('|'),\n\t\tUnderscore = cc('_'),\n\t\tBackslash = cc('\\\\'),\n\t\tHash = cc('#'),\n\t\tNewline = cc('\\n'),\n\t\tQuote = cc('\"'),\n\t\tTab = cc('\\t'),\n\t\tHyphen = cc('-')\n\n\tconst ungrouped = isInQuote => {\n\t\tlet indent = 0\n\n\t\twhile (hasNext()) {\n\t\t\tconst startLine = line, startColumn = column\n\t\t\tconst loc = () => Loc(Pos(startLine, startColumn), pos())\n\t\t\tconst keyword = k => Keyword(loc(), k)\n\t\t\tconst gp = k => o(GroupPre(loc(), k))\n\n\t\t\tconst eatNumber = () => {\n\t\t\t\tconst lit = _ + takeWhile(/[0-9\\.e]/)\n\t\t\t\tcx.check(!Number.isNaN(Number(lit)), pos, () =>\n\t\t\t\t\t`Invalid number literal ${code(lit)}`)\n\t\t\t\treturn Literal(loc(), lit, Number)\n\t\t\t}\n\n\t\t\tconst _ = eat()\n\t\t\tswitch (cc(_)) {\n\t\t\t\tcase N0: case N1: case N2: case N3: case N4:\n\t\t\t\tcase N5: case N6: case N7: case N8: case N9:\n\t\t\t\t\to(eatNumber())\n\t\t\t\t\tbreak\n\t\t\t\tcase OpParen:\n\t\t\t\t\tgp(GP_OpenParen)\n\t\t\t\t\tbreak\n\t\t\t\tcase OpBracket:\n\t\t\t\t\tgp(GP_OpenBracket)\n\t\t\t\t\tbreak\n\t\t\t\tcase ClParen:\n\t\t\t\t\tgp(GP_CloseParen)\n\t\t\t\t\tbreak\n\t\t\t\tcase ClBracket:\n\t\t\t\t\tgp(GP_CloseBracket)\n\t\t\t\t\tbreak\n\t\t\t\tcase ClBrace:\n\t\t\t\t\tif (isInQuote)\n\t\t\t\t\t\treturn\n\t\t\t\t\telse\n\t\t\t\t\t\tcx.fail(loc(), `Reserved character ${code(_)}`)\n\t\t\t\tcase Space:\n\t\t\t\t\tcx.warnIf(peek() === ' ', loc, 'Multiple spaces in a row')\n\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\tbreak\n\t\t\t\tcase Dot:\n\t\t\t\t\tif (peek() === ' ' || peek() === '\\n') {\n\t\t\t\t\t\t// ObjLit assign in its own spaced group\n\t\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\t\to(keyword('. '))\n\t\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t} else {\n\t\t\t\t\t\to(DotName(\n\t\t\t\t\t\t\tloc(),\n\t\t\t\t\t\t\t// +1 for the dot we just skipped.\n\t\t\t\t\t\t\tskipWhileEquals('.') + 1,\n\t\t\t\t\t\t\ttakeWhile(NameCharacter)))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\tcase Colon:\n\t\t\t\t\to(keyword(':'))\n\t\t\t\t\tbreak\n\t\t\t\tcase Tilde:\n\t\t\t\t\tif (tryEat('|')) {\n\t\t\t\t\t\to(keyword('~|'))\n\t\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t} else {\n\t\t\t\t\t\to(keyword('~'))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tcase Bar:\n\t\t\t\t\t// First arg in its own spaced group\n\t\t\t\t\to(keyword('|'))\n\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\tbreak\n\t\t\t\tcase Underscore:\n\t\t\t\t\to(keyword('_'))\n\t\t\t\t\tbreak\n\t\t\t\tcase Hash:\n\t\t\t\t\tskipRestOfLine()\n\t\t\t\t\tbreak\n\t\t\t\tcase Newline: {\n\t\t\t\t\tcx.check(!isInQuote, loc, 'Quote interpolation cannot contain newline')\n\t\t\t\t\tcx.check(prev() !== ' ', loc, 'Line ends in a space')\n\t\t\t\t\t// Skip any blank lines.\n\t\t\t\t\tskipNewlines()\n\t\t\t\t\tconst oldIndent = indent\n\t\t\t\t\tindent = skipWhileEquals('\\t')\n\t\t\t\t\tcx.check(peek() !== ' ', pos, 'Line begins in a space')\n\t\t\t\t\tif (indent <= oldIndent) {\n\t\t\t\t\t\tfor (let i = indent; i < oldIndent; i = i + 1)\n\t\t\t\t\t\t\tgp(GP_CloseBlock)\n\t\t\t\t\t\tgp(GP_Line)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcx.check(indent === oldIndent + 1, loc, 'Line is indented more than once')\n\t\t\t\t\t\tgp(GP_OpenBlock)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase Quote:\n\t\t\t\t\tlexQuote(indent)\n\t\t\t\t\tbreak\n\t\t\t\tcase Tab:\n\t\t\t\t\tcx.fail(loc(), 'Tab may only be used to indent')\n\t\t\t\tcase Hyphen:\n\t\t\t\t\tif (/[0-9]/.test(peek())) {\n\t\t\t\t\t\to(eatNumber())\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\t// Else fallthrough\n\t\t\t\tdefault: {\n\t\t\t\t\tcx.check(\n\t\t\t\t\t\t!ReservedCharacters.has(_),\n\t\t\t\t\t\tloc,\n\t\t\t\t\t\t() => `Reserved character ${code(_)}`)\n\t\t\t\t\t// All other characters should be handled in a case above.\n\t\t\t\t\tassert(NameCharacter.test(_))\n\t\t\t\t\tconst name = _ + takeWhile(NameCharacter)\n\t\t\t\t\tswitch (name) {\n\t\t\t\t\t\tcase 'region':\n\t\t\t\t\t\t\t// Rest of line is a comment.\n\t\t\t\t\t\t\tskipRestOfLine()\n\t\t\t\t\t\t\to(keyword('region'))\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (tryEat('_'))\n\t\t\t\t\t\t\t\to(CallOnFocus(loc(), name))\n\t\t\t\t\t\t\telse if (AllKeywords.has(name))\n\t\t\t\t\t\t\t\to(keyword(name))\n\t\t\t\t\t\t\telse if (ReservedWords.has(name))\n\t\t\t\t\t\t\t\tcx.fail(loc, `Reserved word ${code(name)}`)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\to(Name(loc(), name))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst lexQuote = indent => {\n\t\tconst isIndented = peek() === '\\n'\n\t\tconst quoteIndent = indent + 1\n\n\t\tlet first = true\n\t\tlet read = ''\n\t\tlet startOfRead = pos()\n\n\t\tconst yieldRead = () => {\n\t\t\tif (read !== '') {\n\t\t\t\to(Literal(\n\t\t\t\t\tLoc(startOfRead, pos()),\n\t\t\t\t\t// Don't include leading newline of indented block\n\t\t\t\t\tfirst && isIndented ? read.slice(1) : read,\n\t\t\t\t\tString))\n\t\t\t\tfirst = false\n\t\t\t}\n\t\t\tread = ''\n\t\t\tstartOfRead = pos()\n\t\t}\n\n\t\to(GroupPre(loc(), GP_OpenQuote))\n\n\t\teatChars: while (true) {\n\t\t\tconst chPos = pos()\n\t\t\tconst ch = eat()\n\t\t\tswitch (cc(ch)) {\n\t\t\t\tcase Backslash: {\n\t\t\t\t\tconst escaped = eat()\n\t\t\t\t\tcx.check(quoteEscape.has(escaped), pos,\n\t\t\t\t\t\t() => `No need to escape ${code(escaped)}`)\n\t\t\t\t\tread = read + quoteEscape.get(escaped)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase OpBrace: {\n\t\t\t\t\tyieldRead()\n\t\t\t\t\t// We can't create a Group now because there may be other GroupPre_s inside.\n\t\t\t\t\to(GroupPre(singleCharLoc(chPos), GP_OpenParen))\n\t\t\t\t\tungrouped(true)\n\t\t\t\t\to(GroupPre(loc(), GP_CloseParen))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase Newline: {\n\t\t\t\t\tcx.check(prev() !== ' ', chPos, 'Line ends in a space')\n\t\t\t\t\tcx.check(isIndented, chPos, 'Unclosed quote.')\n\t\t\t\t\tlet newIndent = skipWhileEquals('\\t')\n\n\t\t\t\t\tlet s = ''\n\n\t\t\t\t\t// Allow blank lines.\n\t\t\t\t\tif (newIndent === 0) {\n\t\t\t\t\t\twhile (tryEat('\\n'))\n\t\t\t\t\t\t\ts = s + '\\n'\n\t\t\t\t\t\tnewIndent = skipWhileEquals('\\t')\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newIndent < quoteIndent) {\n\t\t\t\t\t\t// Indented quote section is over.\n\t\t\t\t\t\t// Undo reading the tabs and newline.\n\t\t\t\t\t\tstepBackMany(chPos, newIndent + 1)\n\t\t\t\t\t\tassert(peek() === '\\n')\n\t\t\t\t\t\tbreak eatChars\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tread = read + s + '\\n' + '\\t'.repeat(newIndent - quoteIndent)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase Quote:\n\t\t\t\t\tif (!isIndented)\n\t\t\t\t\t\tbreak eatChars\n\t\t\t\t\t// Else fallthrough\n\t\t\t\tdefault:\n\t\t\t\t\tread = read + ch\n\t\t\t}\n\t\t}\n\n\t\tyieldRead()\n\t\to(GroupPre(loc(), GP_CloseQuote))\n\t}\n\n\tconst quoteEscape = newMap([['{', '{'], ['n', '\\n'], ['t', '\\t'], ['\"', '\"'], ['\\\\', '\\\\']])\n\n\tungrouped(false)\n\treturn res\n}\n\n"],"sourceRoot":"/src"}