{"version":3,"sources":["meta/compile/private/lex/ungrouped.js"],"names":[],"mappings":"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","file":"meta/compile/private/lex/ungrouped.js","sourcesContent":["import Loc, { Pos, StartLine, StartColumn, singleCharLoc } from 'esast/dist/Loc'\nimport { code } from '../../CompileError'\nimport { AllKeywords, NameCharacter, ReservedCharacters, ReservedWords } from '../Lang'\nimport { CallOnFocus, DotName, Keyword, Literal, Name } from '../Token'\nimport { assert, newMap } from '../U/util'\nimport GroupPre from './GroupPre'\n\nexport default (_cx, _str) => {\n\tcx = _cx\n\tres = [ ]\n\tstr = _str\n\tlen = _str.length\n\tline = StartLine\n\tcolumn = StartColumn\n\tindex = 0\n\tungrouped(false)\n\tconst r = res\n\tcx = res = str = undefined\n\treturn r\n}\n\nlet\n\tcx,\n\t// Output array of tokens and GroupPres\n\tres,\n\t// String we are tokenizing, and its length\n\tstr, len,\n\t// Position in str\n\tindex,\n\t// Current line and column at index\n\tline, column\n\nconst\n\to = t => res.push(t),\n\n\tpos = () => Pos(line, column),\n\tloc = () => singleCharLoc(pos()),\n\n\thasNext = () => index !== len,\n\n\tpeek = () => str.charAt(index),\n\n\ttryEat = ch => {\n\t\tconst canEat = peek() === ch\n\t\tif (canEat)\n\t\t\tskip()\n\t\treturn canEat\n\t},\n\n\tprev = () => str.charAt(index - 1),\n\n\teat = () => {\n\t\tconst ch = str[index]\n\t\tindex = index + 1\n\t\tif (ch === '\\n') {\n\t\t\tline = line + 1\n\t\t\tcolumn = StartColumn\n\t\t} else\n\t\t\tcolumn = column + 1\n\t\treturn ch\n\t},\n\tskip = eat,\n\n\t// Caller must ensure that backing up nCharsToBackUp characters brings us to oldPos.\n\tstepBackMany = (oldPos, nCharsToBackUp) => {\n\t\tindex = index - nCharsToBackUp\n\t\tline = oldPos.line\n\t\tcolumn = oldPos.column\n\t},\n\n\ttakeWhile = rgx => {\n\t\tconst startIndex = index\n\t\twhile (rgx.test(peek()))\n\t\t\tindex = index + 1\n\t\tcolumn = column + (index - startIndex)\n\t\treturn str.slice(startIndex, index)\n\t},\n\n\tskipWhileEquals = ch => {\n\t\tconst startIndex = index\n\t\twhile (peek() === ch)\n\t\t\tindex = index + 1\n\t\tconst diff = index - startIndex\n\t\tcolumn = column + diff\n\t\treturn diff\n\t},\n\n\tskipNewlines = () => {\n\t\twhile (peek() === '\\n') {\n\t\t\tindex = index + 1\n\t\t\tline = line + 1\n\t\t}\n\t\tcolumn = StartColumn\n\t},\n\n\tskipRestOfLine = () => {\n\t\twhile (peek() !== '\\n')\n\t\t\tindex = index + 1\n\t}\n\nconst cc = ch => ch.charCodeAt(0)\nconst\n\tN0 = cc('0'), N1 = cc('1'), N2 = cc('2'), N3 = cc('3'), N4 = cc('4'),\n\tN5 = cc('5'), N6 = cc('6'), N7 = cc('7'), N8 = cc('8'), N9 = cc('9'),\n\tOpParen = cc('('), OpBracket = cc('['), OpBrace = cc('{'),\n\tClParen = cc(')'), ClBracket = cc(']'), ClBrace = cc('}'),\n\tSpace = cc(' '),\n\tDot = cc('.'),\n\tColon = cc(':'),\n\tTilde = cc('~'),\n\tBar = cc('|'),\n\tUnderscore = cc('_'),\n\tBackslash = cc('\\\\'),\n\tHash = cc('#'),\n\tNewline = cc('\\n'),\n\tQuote = cc('\"'),\n\tTab = cc('\\t'),\n\tHyphen = cc('-')\n\nconst ungrouped = isInQuote => {\n\tlet indent = 0\n\n\twhile (hasNext()) {\n\t\tconst startLine = line, startColumn = column\n\t\tconst loc = () => Loc(Pos(startLine, startColumn), pos())\n\t\tconst keyword = k => Keyword(loc(), k)\n\t\tconst gp = k => GroupPre(loc(), k)\n\n\t\tconst eatNumber = () => {\n\t\t\tconst lit = _ + takeWhile(/[0-9\\.e]/)\n\t\t\tcx.check(!Number.isNaN(Number(lit)), pos, () => `Invalid number literal ${code(lit)}`)\n\t\t\treturn Literal(loc(), lit, Number)\n\t\t}\n\n\t\tconst _ = eat()\n\t\tswitch (cc(_)) {\n\t\t\tcase N0: case N1: case N2: case N3: case N4:\n\t\t\tcase N5: case N6: case N7: case N8: case N9:\n\t\t\t\to(eatNumber())\n\t\t\t\tbreak\n\t\t\tcase OpParen: case OpBracket: case OpBrace: case ClParen: case ClBracket:\n\t\t\t\to(gp(_))\n\t\t\t\tbreak\n\t\t\tcase ClBrace:\n\t\t\t\tif (isInQuote)\n\t\t\t\t\treturn\n\t\t\t\to(gp(_))\n\t\t\t\tbreak\n\t\t\tcase Space:\n\t\t\t\tcx.warnIf(peek() === ' ', loc, 'Multiple spaces in a row')\n\t\t\t\to(gp('sp'))\n\t\t\t\tbreak\n\t\t\tcase Dot:\n\t\t\t\tif (peek() === ' ' || peek() === '\\n') {\n\t\t\t\t\t// ObjLit assign in its own spaced group\n\t\t\t\t\to(gp('sp'))\n\t\t\t\t\to(keyword('. '))\n\t\t\t\t\to(gp('sp'))\n\t\t\t\t\tbreak\n\t\t\t\t} else {\n\t\t\t\t\to(DotName(\n\t\t\t\t\t\tloc(),\n\t\t\t\t\t\t// +1 for the dot we just skipped.\n\t\t\t\t\t\tskipWhileEquals('.') + 1,\n\t\t\t\t\t\ttakeWhile(NameCharacter)))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\tcase Colon:\n\t\t\t\to(keyword(':'))\n\t\t\t\tbreak\n\t\t\tcase Tilde:\n\t\t\t\tif (tryEat('|')) {\n\t\t\t\t\to(keyword('~|'))\n\t\t\t\t\to(gp('sp'))\n\t\t\t\t\tbreak\n\t\t\t\t} else {\n\t\t\t\t\to(keyword('~'))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase Bar:\n\t\t\t\t// First arg in its own spaced group\n\t\t\t\to(keyword('|'))\n\t\t\t\to(gp('sp'))\n\t\t\t\tbreak\n\t\t\tcase Underscore:\n\t\t\t\to(keyword('_'))\n\t\t\t\tbreak\n\t\t\tcase Hash:\n\t\t\t\tskipRestOfLine()\n\t\t\t\tbreak\n\t\t\tcase Newline: {\n\t\t\t\tcx.check(!isInQuote, loc, 'Quote interpolation cannot contain newline')\n\t\t\t\tcx.check(prev() !== ' ', loc, 'Line ends in a space')\n\t\t\t\t// Skip any blank lines.\n\t\t\t\tskipNewlines()\n\t\t\t\tconst oldIndent = indent\n\t\t\t\tindent = skipWhileEquals('\\t')\n\t\t\t\tcx.check(peek() !== ' ', pos, 'Line begins in a space')\n\t\t\t\tif (indent <= oldIndent) {\n\t\t\t\t\tfor (let i = indent; i < oldIndent; i = i + 1)\n\t\t\t\t\t\to(gp('<-'))\n\t\t\t\t\to(gp('ln'))\n\t\t\t\t} else {\n\t\t\t\t\tcx.check(indent === oldIndent + 1, loc, 'Line is indented more than once')\n\t\t\t\t\to(gp('->'))\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Quote:\n\t\t\t\tlexQuote(indent)\n\t\t\t\tbreak\n\t\t\tcase Tab:\n\t\t\t\tcx.fail(loc(), 'Tab may only be used to indent')\n\t\t\tcase Hyphen:\n\t\t\t\tif (/[0-9]/.test(peek())) {\n\t\t\t\t\to(eatNumber())\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t// Else fallthrough\n\t\t\tdefault: {\n\t\t\t\tcx.check(\n\t\t\t\t\t!ReservedCharacters.has(_),\n\t\t\t\t\tloc,\n\t\t\t\t\t() => `Reserved character ${code(_)}`)\n\t\t\t\t// All other characters should be handled in a case above.\n\t\t\t\tassert(NameCharacter.test(_))\n\t\t\t\tconst name = _ + takeWhile(NameCharacter)\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'region':\n\t\t\t\t\t\t// Rest of line is a comment.\n\t\t\t\t\t\tskipRestOfLine()\n\t\t\t\t\t\to(keyword('region'))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (tryEat('_'))\n\t\t\t\t\t\t\to(CallOnFocus(loc(), name))\n\t\t\t\t\t\telse if (AllKeywords.has(name))\n\t\t\t\t\t\t\to(keyword(name))\n\t\t\t\t\t\telse if (ReservedWords.has(name))\n\t\t\t\t\t\t\tcx.fail(loc, `Reserved word ${code(name)}`)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\to(Name(loc(), name))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst lexQuote = indent => {\n\tconst isIndented = peek() === '\\n'\n\tconst quoteIndent = indent + 1\n\n\tlet first = true\n\tlet read = ''\n\tlet startOfRead = pos()\n\n\tconst yieldRead = () => {\n\t\tif (read !== '') {\n\t\t\to(Literal(\n\t\t\t\tLoc(startOfRead, pos()),\n\t\t\t\t// Don't include leading newline of indented block\n\t\t\t\tfirst && isIndented ? read.slice(1) : read,\n\t\t\t\tString))\n\t\t\tfirst = false\n\t\t}\n\t\tread = ''\n\t\tstartOfRead = pos()\n\t}\n\n\to(GroupPre(loc(), '\"'))\n\n\teatChars: while (true) {\n\t\tconst chPos = pos()\n\t\tconst ch = eat()\n\t\tswitch (cc(ch)) {\n\t\t\tcase Backslash: {\n\t\t\t\tconst escaped = eat()\n\t\t\t\tcx.check(quoteEscape.has(escaped), pos, () => `No need to escape ${code(escaped)}`)\n\t\t\t\tread = read + quoteEscape.get(escaped)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase OpBrace: {\n\t\t\t\tyieldRead()\n\t\t\t\t// We can't just create a Group now because there may be other GroupPre_s inside.\n\t\t\t\to(GroupPre(singleCharLoc(chPos), '('))\n\t\t\t\tungrouped(true)\n\t\t\t\to(GroupPre(loc(), ')'))\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Newline: {\n\t\t\t\tcx.check(prev() !== ' ', chPos, 'Line ends in a space')\n\t\t\t\tcx.check(isIndented, chPos, 'Unclosed quote.')\n\t\t\t\tlet newIndent = skipWhileEquals('\\t')\n\n\t\t\t\tlet s = ''\n\n\t\t\t\t// Allow blank lines.\n\t\t\t\tif (newIndent === 0) {\n\t\t\t\t\twhile (tryEat('\\n'))\n\t\t\t\t\t\ts = s + '\\n'\n\t\t\t\t\tnewIndent = skipWhileEquals('\\t')\n\t\t\t\t}\n\n\t\t\t\tif (newIndent < quoteIndent) {\n\t\t\t\t\t// Indented quote section is over.\n\t\t\t\t\t// Undo reading the tabs and newline.\n\t\t\t\t\tstepBackMany(chPos, newIndent + 1)\n\t\t\t\t\tassert(peek() === '\\n')\n\t\t\t\t\tbreak eatChars\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tread = read + s + '\\n' + '\\t'.repeat(newIndent - quoteIndent)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Quote:\n\t\t\t\tif (!isIndented)\n\t\t\t\t\tbreak eatChars\n\t\t\t\t// Else fallthrough\n\t\t\tdefault:\n\t\t\t\tread = read + ch\n\t\t}\n\t}\n\n\tyieldRead()\n\to(GroupPre(loc(), 'close\"'))\n}\n\nconst quoteEscape = newMap([['{', '{'], ['n', '\\n'], ['t', '\\t'], ['\"', '\"'], ['\\\\', '\\\\']])\n"],"sourceRoot":"/src"}