{"version":3,"sources":["meta/compile/private/lex/ungrouped.js"],"names":[],"mappings":"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","file":"meta/compile/private/lex/ungrouped.js","sourcesContent":["import Loc, { Pos, StartLine, StartColumn, singleCharLoc } from 'esast/dist/Loc'\nimport { code } from '../../CompileError'\nimport { AllKeywords, ReservedWords } from '../Lang'\nimport { CallOnFocus, DotName, Keyword, TokenNumberLiteral, Name } from '../Token'\nimport { assert } from '../U/util'\nimport GroupPre, { GP_OpenParen, GP_OpenBracket, GP_OpenBlock, GP_OpenQuote, GP_Line,\n\tGP_Space, GP_CloseParen, GP_CloseBracket, GP_CloseBlock, GP_CloseQuote} from './GroupPre'\nimport { showChar, N0, N1, N2, N3, N4, N5, N6, N7, N8, N9,\n\tOpParen, OpBracket, OpBrace, ClParen, ClBracket, ClBrace, Space, Dot, Colon, Tilde, Bar,\n\tUnderscore, Backslash, Hash, Newline, Quote, Tab, Hyphen, LetterN, LetterT,\n\tisDigit, isNameCharacter, isNumberCharacter, isReservedCharacter } from './char'\n\nexport default (cx, str) => {\n\tconst res = [ ]\n\tlet line = StartLine\n\tlet column = StartColumn\n\tlet index = 0\n\n\tconst\n\t\to = t => { res.push(t) },\n\n\t\tpos = () => Pos(line, column),\n\t\tloc = () => singleCharLoc(pos()),\n\n\t\tprev = () => str.charCodeAt(index - 1),\n\t\tpeek = () => str.charCodeAt(index),\n\n\t\teat = () => {\n\t\t\tconst ch = str.charCodeAt(index)\n\t\t\tindex = index + 1\n\t\t\tcolumn = column + 1\n\t\t\treturn ch\n\t\t},\n\t\ttryEat = ch => {\n\t\t\tconst canEat = peek() === ch\n\t\t\tif (canEat) {\n\t\t\t\tindex = index + 1\n\t\t\t\tcolumn = column + 1\n\t\t\t}\n\t\t\treturn canEat\n\t\t},\n\t\ttryEatNewline = () => {\n\t\t\tconst canEat = peek() === Newline\n\t\t\tif (canEat) {\n\t\t\t\tindex = index + 1\n\t\t\t\tline = line + 1\n\t\t\t\tcolumn = StartColumn\n\t\t\t}\n\t\t\treturn canEat\n\t\t},\n\n\t\t// Caller must ensure that backing up nCharsToBackUp characters brings us to oldPos.\n\t\tstepBackMany = (oldPos, nCharsToBackUp) => {\n\t\t\tindex = index - nCharsToBackUp\n\t\t\tline = oldPos.line\n\t\t\tcolumn = oldPos.column\n\t\t},\n\n\t\t_skipWhile = pred => {\n\t\t\tconst startIndex = index\n\t\t\twhile (pred(peek()))\n\t\t\t\tindex = index + 1\n\t\t\tconst diff = index - startIndex\n\t\t\tcolumn = column + diff\n\t\t\treturn diff\n\t\t},\n\t\ttakeWhileWithPrev = pred => {\n\t\t\tconst startIndex = index\n\t\t\t_skipWhile(pred)\n\t\t\treturn str.slice(startIndex - 1, index)\n\t\t},\n\t\ttakeWhile = pred => {\n\t\t\tconst startIndex = index\n\t\t\t_skipWhile(pred)\n\t\t\treturn str.slice(startIndex, index)\n\t\t},\n\t\tskipWhileEquals = ch => _skipWhile(_ => _ === ch),\n\n\t\t// Called after seeing the first newline.\n\t\tskipNewlines = () => {\n\t\t\tline = line + 1\n\t\t\tconst startLine = line\n\t\t\twhile (peek() === Newline) {\n\t\t\t\tindex = index + 1\n\t\t\t\tline = line + 1\n\t\t\t}\n\t\t\tcolumn = StartColumn\n\t\t\treturn line - startLine\n\t\t},\n\n\t\tskipRestOfLine = () => {\n\t\t\twhile (peek() !== Newline)\n\t\t\t\tindex = index + 1\n\t\t}\n\n\tconst ungrouped = isInQuote => {\n\t\tlet indent = 0\n\n\t\tlet ch, startLine, startColumn\n\t\tconst\n\t\t\tloc = () => Loc(Pos(startLine, startColumn), pos()),\n\t\t\tkeyword = k => Keyword(loc(), k),\n\t\t\tgp = k => o(GroupPre(loc(), k)),\n\t\t\teatNumber = () => {\n\t\t\t\tconst lit = takeWhileWithPrev(isNumberCharacter)\n\t\t\t\tconst num = Number(lit)\n\t\t\t\tcx.check(!Number.isNaN(num), pos, () =>\n\t\t\t\t\t`Invalid number literal ${code(lit)}`)\n\t\t\t\treturn TokenNumberLiteral(loc(), num)\n\t\t\t}\n\n\t\twhile (index !== str.length) {\n\t\t\tstartLine = line\n\t\t\tstartColumn = column\n\n\t\t\tch = eat()\n\t\t\tswitch (ch) {\n\t\t\t\tcase N0: case N1: case N2: case N3: case N4:\n\t\t\t\tcase N5: case N6: case N7: case N8: case N9:\n\t\t\t\t\to(eatNumber())\n\t\t\t\t\tbreak\n\t\t\t\tcase OpParen:\n\t\t\t\t\tgp(GP_OpenParen)\n\t\t\t\t\tbreak\n\t\t\t\tcase OpBracket:\n\t\t\t\t\tgp(GP_OpenBracket)\n\t\t\t\t\tbreak\n\t\t\t\tcase ClParen:\n\t\t\t\t\tgp(GP_CloseParen)\n\t\t\t\t\tbreak\n\t\t\t\tcase ClBracket:\n\t\t\t\t\tgp(GP_CloseBracket)\n\t\t\t\t\tbreak\n\t\t\t\tcase ClBrace:\n\t\t\t\t\tcx.check(isInQuote, loc, () => `Reserved character ${showChar(ch)}`)\n\t\t\t\t\treturn\n\t\t\t\tcase Space:\n\t\t\t\t\tcx.warnIf(peek() === Space, loc, 'Multiple spaces in a row')\n\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\tbreak\n\t\t\t\tcase Dot: {\n\t\t\t\t\tconst p = peek()\n\t\t\t\t\tif (p === Space || p === Newline) {\n\t\t\t\t\t\t// ObjLit assign in its own spaced group.\n\t\t\t\t\t\t// We can't just create a new Group here because we want to\n\t\t\t\t\t\t// ensure it's not part of the preceding or following spaced group.\n\t\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\t\to(keyword('. '))\n\t\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\t} else\n\t\t\t\t\t\to(DotName(\n\t\t\t\t\t\t\tloc(),\n\t\t\t\t\t\t\t// +1 for the dot we just skipped.\n\t\t\t\t\t\t\tskipWhileEquals(Dot) + 1,\n\t\t\t\t\t\t\ttakeWhile(isNameCharacter)))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase Colon:\n\t\t\t\t\to(keyword(':'))\n\t\t\t\t\tbreak\n\t\t\t\tcase Tilde:\n\t\t\t\t\tif (tryEat(Bar)) {\n\t\t\t\t\t\to(keyword('~|'))\n\t\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t} else {\n\t\t\t\t\t\to(keyword('~'))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tcase Bar:\n\t\t\t\t\t// First arg in its own spaced group\n\t\t\t\t\to(keyword('|'))\n\t\t\t\t\tgp(GP_Space)\n\t\t\t\t\tbreak\n\t\t\t\tcase Underscore:\n\t\t\t\t\to(keyword('_'))\n\t\t\t\t\tbreak\n\t\t\t\tcase Hash:\n\t\t\t\t\tskipRestOfLine()\n\t\t\t\t\tbreak\n\t\t\t\tcase Newline: {\n\t\t\t\t\tcx.check(!isInQuote, loc, 'Quote interpolation cannot contain newline')\n\t\t\t\t\tcx.check(prev() !== Space, loc, 'Line ends in a space')\n\n\t\t\t\t\t// Skip any blank lines.\n\t\t\t\t\tskipNewlines()\n\t\t\t\t\tconst oldIndent = indent\n\t\t\t\t\tindent = skipWhileEquals(Tab)\n\t\t\t\t\tcx.check(peek() !== Space, pos, 'Line begins in a space')\n\t\t\t\t\tif (indent <= oldIndent) {\n\t\t\t\t\t\tfor (let i = indent; i < oldIndent; i = i + 1)\n\t\t\t\t\t\t\tgp(GP_CloseBlock)\n\t\t\t\t\t\tgp(GP_Line)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcx.check(indent === oldIndent + 1, loc, 'Line is indented more than once')\n\t\t\t\t\t\tgp(GP_OpenBlock)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase Tab:\n\t\t\t\t\tcx.fail(loc(), 'Tab may only be used to indent')\n\t\t\t\t\tbreak\n\t\t\t\tcase Quote:\n\t\t\t\t\tlexQuote(indent)\n\t\t\t\t\tbreak\n\t\t\t\tcase Hyphen:\n\t\t\t\t\tif (isDigit(peek())) {\n\t\t\t\t\t\to(eatNumber())\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\t// Else fallthrough\n\t\t\t\tdefault: {\n\t\t\t\t\tcx.check(\n\t\t\t\t\t\t!isReservedCharacter(ch), loc, () => `Reserved character ${showChar(ch)}`)\n\t\t\t\t\t// All other characters should be handled in a case above.\n\t\t\t\t\tconst name = takeWhileWithPrev(isNameCharacter)\n\t\t\t\t\tswitch (name) {\n\t\t\t\t\t\tcase 'region':\n\t\t\t\t\t\t\t// Rest of line is a comment.\n\t\t\t\t\t\t\tskipRestOfLine()\n\t\t\t\t\t\t\to(keyword('region'))\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (tryEat(Underscore))\n\t\t\t\t\t\t\t\to(CallOnFocus(loc(), name))\n\t\t\t\t\t\t\telse if (AllKeywords.has(name))\n\t\t\t\t\t\t\t\to(keyword(name))\n\t\t\t\t\t\t\telse if (ReservedWords.has(name))\n\t\t\t\t\t\t\t\tcx.fail(loc, `Reserved word ${code(name)}`)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\to(Name(loc(), name))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst lexQuote = indent => {\n\t\tconst quoteIndent = indent + 1\n\n\t\tconst isIndented = tryEatNewline()\n\t\tif (isIndented) {\n\t\t\tconst actualIndent = skipWhileEquals(Tab)\n\t\t\tcx.check(actualIndent === quoteIndent, pos,\n\t\t\t\t'Indented quote must have exactly one more indent than previous line.')\n\t\t}\n\n\t\tlet read = ''\n\n\t\tconst yieldRead = () => {\n\t\t\tif (read !== '') {\n\t\t\t\to(read)\n\t\t\t\tread = ''\n\t\t\t}\n\t\t}\n\n\t\to(GroupPre(loc(), GP_OpenQuote))\n\n\t\teatChars: while (true) {\n\t\t\tconst chPos = pos()\n\t\t\tconst ch = eat()\n\t\t\tswitch (ch) {\n\t\t\t\tcase Backslash: {\n\t\t\t\t\tread = read + quoteEscape(eat())\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase OpBrace: {\n\t\t\t\t\tyieldRead()\n\t\t\t\t\t// We can't create a Group now because there may be other GroupPre_s inside.\n\t\t\t\t\to(GroupPre(singleCharLoc(chPos), GP_OpenParen))\n\t\t\t\t\tungrouped(true)\n\t\t\t\t\to(GroupPre(loc(), GP_CloseParen))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase Newline: {\n\t\t\t\t\tcx.check(prev !== Space, chPos, 'Line ends in a space')\n\t\t\t\t\tcx.check(isIndented, chPos, 'Unclosed quote.')\n\t\t\t\t\tlet newIndent = skipWhileEquals(Tab)\n\n\t\t\t\t\tlet extraNewlines = ''\n\t\t\t\t\t// Allow blank lines.\n\t\t\t\t\tif (newIndent === 0) {\n\t\t\t\t\t\textraNewlines = '\\n'.repeat(skipNewlines())\n\t\t\t\t\t\tnewIndent = skipWhileEquals(Tab)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newIndent < quoteIndent) {\n\t\t\t\t\t\t// Indented quote section is over.\n\t\t\t\t\t\t// Undo reading the tabs and newline.\n\t\t\t\t\t\tstepBackMany(chPos, newIndent + 1)\n\t\t\t\t\t\tassert(peek() === Newline)\n\t\t\t\t\t\tbreak eatChars\n\t\t\t\t\t} else\n\t\t\t\t\t\tread = read + extraNewlines + '\\n' + '\\t'.repeat(newIndent - quoteIndent)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase Quote:\n\t\t\t\t\tif (!isIndented)\n\t\t\t\t\t\tbreak eatChars\n\t\t\t\t\t// Else fallthrough\n\t\t\t\tdefault:\n\t\t\t\t\tread = read + String.fromCharCode(ch)\n\t\t\t}\n\t\t}\n\n\t\tyieldRead()\n\t\to(GroupPre(loc(), GP_CloseQuote))\n\t}\n\n\tconst quoteEscape = ch => {\n\t\tswitch (ch) {\n\t\t\tcase OpBrace: return '{'\n\t\t\tcase LetterN: return '\\n'\n\t\t\tcase LetterT: return '\\t'\n\t\t\tcase Quote: return '\"'\n\t\t\tcase Backslash: return '\\\\'\n\t\t\tdefault: cx.fail(pos, `No need to escape ${showChar(ch)}`)\n\t\t}\n\t}\n\n\tungrouped(false)\n\treturn res\n}\n"],"sourceRoot":"/src"}