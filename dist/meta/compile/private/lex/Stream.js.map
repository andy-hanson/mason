{"version":3,"sources":["meta/compile/private/lex/Stream.js"],"names":[],"mappings":";;;;;;;;;KAAS,QAAQ,iBAAR,QAAQ;;KACV,IAAI;;KACF,MAAM,UAAN,MAAM;KAAE,GAAG,UAAH,GAAG;;KAEC,MAAM;AACf,WADS,MAAM,CACd,GAAG,EAAE;yBADG,MAAM;;AAEzB,OAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;AACjB,SAAM,CAAC,IAAI,YAAY,MAAM,CAAC,CAAA;AAC9B,SAAM,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;;AAElD,OAAI,CAAC,GAAG,GAAG,QAAQ,CAAA;AACnB,OAAI,CAAC,KAAK,GAAG,CAAC,CAAA;GACd;;eARmB,MAAM;AAU1B,UAAO;WAAA,mBAAG;AACT,YAAO,IAAI,CAAC,IAAI,EAAE,KAAK,KAAK,CAAA;KAC5B;;AAED,OAAI;WAAA,cAAC,MAAM,EAAE;AACZ,SAAI,MAAM,KAAK,SAAS,EACvB,MAAM,GAAG,CAAC,CAAA;AACX,SAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;AACpB,WAAM,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,CAAA;AACjC,WAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAA;AAClB,YAAO,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;KAChE;;AAED,SAAM;WAAA,gBAAC,EAAE,EAAE;AACV,WAAM,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAA;AACjC,SAAI,MAAM,EACT,IAAI,CAAC,IAAI,EAAE,CAAA;AACZ,YAAO,MAAM,CAAA;KACb;;AAED,UAAO;WAAA,mBAAG;AACT,YAAO,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;KACrB;;AAED,OAAI;WAAA,gBAAG;AACN,YAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;KACtC;;AAED,MAAG;WAAA,eAAG;AACL,WAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAC/B,SAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;AAC3B,SAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AAC5B,YAAO,EAAE,CAAA;KACT;;AAED,OAAI;WAAA,cAAC,CAAC,EAAE;AACP,SAAI,CAAC,KAAK,SAAS,EAAE,CAAC,GAAG,CAAC,CAAA;AAC1B,SAAI,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;AACf,WAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;AAC/B,YAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAC1D,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;KACtC;;AAGD,eAAY;;;;WAAA,sBAAC,MAAM,EAAE,cAAc,EAAE;AACpC,SAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,cAAc,CAAA;AACxC,SAAI,CAAC,GAAG,GAAG,MAAM,CAAA;KACjB;;AAGD,WAAQ;;;;WAAA,oBAAG;AACV,WAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AAC3B,SAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;AAC3B,SAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAA;KACpC;;AAED,YAAS;WAAA,mBAAC,GAAG,EAAE;AACd,WAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAA;AAC7B,WAAM,IAAI,GAAG,aAAa,CAAC,GAAG,CAAC,CAAA;AAC/B,YAAO,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EACzC,IAAI,CAAC,IAAI,EAAE,CAAA;AACZ,YAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;KAC7C;;AAED,WAAQ;WAAA,kBAAC,IAAI,EAAE;AACd,WAAM,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,CAAA;AAChC,YAAO,IAAI,CAAC,SAAS,CAAC,UAAA,EAAE;aAAG,CAAC,IAAI,CAAC,EAAE,CAAC;MAAA,CAAC,CAAA;KACrC;;;;SA7EmB,MAAM;;;kBAAN,MAAM;;AAgF3B,UAAS,aAAa,CAAC,GAAG,EAAE;AAC3B,MAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAC5B,SAAM,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAA;AACxB,UAAO,UAAA,EAAE;WAAI,EAAE,KAAK,GAAG;IAAA,CAAA;GACvB;AACD,MAAI,GAAG,YAAY,MAAM,EACxB,OAAO,UAAA,EAAE;UAAI,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;GAAA,CAAA;AAC1B,MAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;AACnB,SAAO,GAAG,CAAA;EACV","file":"meta/compile/private/lex/Stream.js","sourcesContent":["import { StartPos } from 'esast/dist/Loc'\nimport type from '../U/type'\nimport { assert, set } from '../U/util'\n\nexport default class Stream {\n\tconstructor(str) {\n\t\ttype(str, String)\n\t\tassert(this instanceof Stream)\n\t\tObject.defineProperty(this, 'str', { value: str })\n\t\t// pos and index are mutable. pos should always be the position at index.\n\t\tthis.pos = StartPos\n\t\tthis.index = 0\n\t}\n\n\thasNext() {\n\t\treturn this.peek() !== 'EOF'\n\t}\n\n\tpeek(offset) {\n\t\tif (offset === undefined)\n\t\t\toffset = 0\n\t\ttype(offset, Number)\n\t\tconst index = this.index + offset\n\t\tassert(index >= 0)\n\t\treturn index >= this.str.length ? 'EOF' : this.str.charAt(index)\n\t}\n\n\ttryEat(ch) {\n\t\tconst canEat = this.peek() === ch\n\t\tif (canEat)\n\t\t\tthis.skip()\n\t\treturn canEat\n\t}\n\n\thasPrev() {\n\t\treturn this.index > 0\n\t}\n\n\tprev() {\n\t\treturn this.str.charAt(this.index - 1)\n\t}\n\n\teat() {\n\t\tconst ch = this.str[this.index]\n\t\tthis.index = this.index + 1\n\t\tthis.pos = this.pos.next(ch)\n\t\treturn ch\n\t}\n\n\tskip(n) {\n\t\tif (n === undefined) n = 1\n\t\ttype(n, Number)\n\t\tconst endIndex = this.index + n\n\t\tfor (; this.index !== endIndex; this.index = this.index + 1)\n\t\t\tthis.pos = this.pos.next(this.peek())\n\t}\n\n\t// Caller must ensure that backing up nCharsToBackUp characters brings us to oldPos.\n\tstepBackMany(oldPos, nCharsToBackUp) {\n\t\tthis.index = this.index - nCharsToBackUp\n\t\tthis.pos = oldPos\n\t}\n\n\t// Call only if you know this isn't the start of a line.\n\tstepBack() {\n\t\tassert(this.pos.column > 1)\n\t\tthis.index = this.index - 1\n\t\tthis.pos = this.pos.withPrevColumn()\n\t}\n\n\ttakeWhile(whl) {\n\t\tconst startIndex = this.index\n\t\tconst pred = charClassPred(whl)\n\t\twhile (this.hasNext() && pred(this.peek()))\n\t\t\tthis.skip()\n\t\treturn this.str.slice(startIndex, this.index)\n\t}\n\n\ttakeUpTo(upTo) {\n\t\tconst pred = charClassPred(upTo)\n\t\treturn this.takeWhile(ch =>!pred(ch))\n\t}\n}\n\nfunction charClassPred(whl) {\n\tif (typeof whl === 'string') {\n\t\tassert(whl.length === 1)\n\t\treturn ch => ch === whl\n\t}\n\tif (whl instanceof RegExp)\n\t\treturn ch => whl.test(ch)\n\ttype(whl, Function)\n\treturn whl\n}\n"],"sourceRoot":"/src"}