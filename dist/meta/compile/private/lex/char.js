if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', '../../CompileError', '../Lang'], function (exports, _CompileError, _Lang) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const showChar = function (ch) {
		return _CompileError.code(String.fromCharCode(ch));
	};

	exports.showChar = showChar;
	const cc = function (ch) {
		return ch.charCodeAt(0);
	};
	const N0 = cc('0'),
	      N1 = cc('1'),
	      N2 = cc('2'),
	      N3 = cc('3'),
	      N4 = cc('4'),
	      N5 = cc('5'),
	      N6 = cc('6'),
	      N7 = cc('7'),
	      N8 = cc('8'),
	      N9 = cc('9'),
	      OpParen = cc('('),
	      OpBracket = cc('['),
	      OpBrace = cc('{'),
	      ClParen = cc(')'),
	      ClBracket = cc(']'),
	      ClBrace = cc('}'),
	      Space = cc(' '),
	      Dot = cc('.'),
	      Colon = cc(':'),
	      Tilde = cc('~'),
	      Bar = cc('|'),
	      Underscore = cc('_'),
	      Backslash = cc('\\'),
	      Hash = cc('#'),
	      Newline = cc('\n'),
	      Quote = cc('"'),
	      Tab = cc('\t'),
	      Hyphen = cc('-'),
	      LetterN = cc('n'),
	      LetterT = cc('t');

	exports.N0 = N0;
	exports.N1 = N1;
	exports.N2 = N2;
	exports.N3 = N3;
	exports.N4 = N4;
	exports.N5 = N5;
	exports.N6 = N6;
	exports.N7 = N7;
	exports.N8 = N8;
	exports.N9 = N9;
	exports.OpParen = OpParen;
	exports.OpBracket = OpBracket;
	exports.OpBrace = OpBrace;
	exports.ClParen = ClParen;
	exports.ClBracket = ClBracket;
	exports.ClBrace = ClBrace;
	exports.Space = Space;
	exports.Dot = Dot;
	exports.Colon = Colon;
	exports.Tilde = Tilde;
	exports.Bar = Bar;
	exports.Underscore = Underscore;
	exports.Backslash = Backslash;
	exports.Hash = Hash;
	exports.Newline = Newline;
	exports.Quote = Quote;
	exports.Tab = Tab;
	exports.Hyphen = Hyphen;
	exports.LetterN = LetterN;
	exports.LetterT = LetterT;
	const charPred = function (chars, reverse) {
		let src = 'switch(ch) {\n';
		for (let i = 0; i < chars.length; i = i + 1) src = '' + src + 'case ' + chars.charCodeAt(i) + ': ';
		const res = !reverse;
		src = '' + src + ' return ' + res + '\ndefault: return ' + !res + '\n}';
		return Function('ch', src);
	};
	const isDigit = charPred('0123456789'),
	      isNameCharacter = charPred(_Lang.NonNameCharacters, true),
	      isNumberCharacter = charPred('0123456789.e'),
	      isReservedCharacter = charPred(_Lang.ReservedCharacters);
	exports.isDigit = isDigit;
	exports.isNameCharacter = isNameCharacter;
	exports.isNumberCharacter = isNumberCharacter;
	exports.isReservedCharacter = isReservedCharacter;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL2xleC9jaGFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlPLE9BQ04sUUFBUSxHQUFHLFVBQUEsRUFBRTtTQUFJLGNBTFQsSUFBSSxDQUtVLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7RUFBQSxDQUFBOztTQUE5QyxRQUFRLEdBQVIsUUFBUTtBQUVULE9BQU0sRUFBRSxHQUFHLFVBQUEsRUFBRTtTQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQUEsQ0FBQTtBQUMxQixPQUNOLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO09BQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7T0FBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO09BQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7T0FDcEUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7T0FBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO09BQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7T0FBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUNwRSxPQUFPLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUFFLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO09BQUUsT0FBTyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7T0FDekQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7T0FBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUFFLE9BQU8sR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO09BQ3pELEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO09BQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7T0FDYixLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUNmLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO09BQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7T0FDYixVQUFVLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUNwQixTQUFTLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztPQUNwQixJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUNkLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO09BQ2xCLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO09BQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7T0FDZCxNQUFNLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUNoQixPQUFPLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztPQUNqQixPQUFPLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBOztTQWpCakIsRUFBRSxHQUFGLEVBQUU7U0FBWSxFQUFFLEdBQUYsRUFBRTtTQUFZLEVBQUUsR0FBRixFQUFFO1NBQVksRUFBRSxHQUFGLEVBQUU7U0FBWSxFQUFFLEdBQUYsRUFBRTtTQUMxRCxFQUFFLEdBQUYsRUFBRTtTQUFZLEVBQUUsR0FBRixFQUFFO1NBQVksRUFBRSxHQUFGLEVBQUU7U0FBWSxFQUFFLEdBQUYsRUFBRTtTQUFZLEVBQUUsR0FBRixFQUFFO1NBQzFELE9BQU8sR0FBUCxPQUFPO1NBQVksU0FBUyxHQUFULFNBQVM7U0FBWSxPQUFPLEdBQVAsT0FBTztTQUMvQyxPQUFPLEdBQVAsT0FBTztTQUFZLFNBQVMsR0FBVCxTQUFTO1NBQVksT0FBTyxHQUFQLE9BQU87U0FDL0MsS0FBSyxHQUFMLEtBQUs7U0FDTCxHQUFHLEdBQUgsR0FBRztTQUNILEtBQUssR0FBTCxLQUFLO1NBQ0wsS0FBSyxHQUFMLEtBQUs7U0FDTCxHQUFHLEdBQUgsR0FBRztTQUNILFVBQVUsR0FBVixVQUFVO1NBQ1YsU0FBUyxHQUFULFNBQVM7U0FDVCxJQUFJLEdBQUosSUFBSTtTQUNKLE9BQU8sR0FBUCxPQUFPO1NBQ1AsS0FBSyxHQUFMLEtBQUs7U0FDTCxHQUFHLEdBQUgsR0FBRztTQUNILE1BQU0sR0FBTixNQUFNO1NBQ04sT0FBTyxHQUFQLE9BQU87U0FDUCxPQUFPLEdBQVAsT0FBTztBQUVSLE9BQ0MsUUFBUSxHQUFHLFVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBSztBQUM5QixNQUFJLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQTtBQUMxQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDMUMsR0FBRyxRQUFNLEdBQUcsYUFBUSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFJLENBQUE7QUFDNUMsUUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUE7QUFDcEIsS0FBRyxRQUFNLEdBQUcsZ0JBQVcsR0FBRywwQkFBcUIsQ0FBQyxHQUFHLFFBQUssQ0FBQTtBQUN4RCxTQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7RUFDMUIsQ0FBQTtBQUNLLE9BQ04sT0FBTyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7T0FDaEMsZUFBZSxHQUFHLFFBQVEsT0F0Q2xCLGlCQUFpQixFQXNDcUIsSUFBSSxDQUFDO09BQ25ELGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUM7T0FDNUMsbUJBQW1CLEdBQUcsUUFBUSxPQXhDSCxrQkFBa0IsQ0F3Q0ssQ0FBQTtTQUhsRCxPQUFPLEdBQVAsT0FBTztTQUNQLGVBQWUsR0FBZixlQUFlO1NBQ2YsaUJBQWlCLEdBQWpCLGlCQUFpQjtTQUNqQixtQkFBbUIsR0FBbkIsbUJBQW1CIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL2xleC9jaGFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29kZSB9IGZyb20gJy4uLy4uL0NvbXBpbGVFcnJvcidcbmltcG9ydCB7IE5vbk5hbWVDaGFyYWN0ZXJzLCBSZXNlcnZlZENoYXJhY3RlcnMgfSBmcm9tICcuLi9MYW5nJ1xuXG5cbmV4cG9ydCBjb25zdFxuXHRzaG93Q2hhciA9IGNoID0+IGNvZGUoU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpXG5cbmNvbnN0IGNjID0gY2ggPT4gY2guY2hhckNvZGVBdCgwKVxuZXhwb3J0IGNvbnN0XG5cdE4wID0gY2MoJzAnKSwgTjEgPSBjYygnMScpLCBOMiA9IGNjKCcyJyksIE4zID0gY2MoJzMnKSwgTjQgPSBjYygnNCcpLFxuXHRONSA9IGNjKCc1JyksIE42ID0gY2MoJzYnKSwgTjcgPSBjYygnNycpLCBOOCA9IGNjKCc4JyksIE45ID0gY2MoJzknKSxcblx0T3BQYXJlbiA9IGNjKCcoJyksIE9wQnJhY2tldCA9IGNjKCdbJyksIE9wQnJhY2UgPSBjYygneycpLFxuXHRDbFBhcmVuID0gY2MoJyknKSwgQ2xCcmFja2V0ID0gY2MoJ10nKSwgQ2xCcmFjZSA9IGNjKCd9JyksXG5cdFNwYWNlID0gY2MoJyAnKSxcblx0RG90ID0gY2MoJy4nKSxcblx0Q29sb24gPSBjYygnOicpLFxuXHRUaWxkZSA9IGNjKCd+JyksXG5cdEJhciA9IGNjKCd8JyksXG5cdFVuZGVyc2NvcmUgPSBjYygnXycpLFxuXHRCYWNrc2xhc2ggPSBjYygnXFxcXCcpLFxuXHRIYXNoID0gY2MoJyMnKSxcblx0TmV3bGluZSA9IGNjKCdcXG4nKSxcblx0UXVvdGUgPSBjYygnXCInKSxcblx0VGFiID0gY2MoJ1xcdCcpLFxuXHRIeXBoZW4gPSBjYygnLScpLFxuXHRMZXR0ZXJOID0gY2MoJ24nKSxcblx0TGV0dGVyVCA9IGNjKCd0JylcblxuY29uc3Rcblx0Y2hhclByZWQgPSAoY2hhcnMsIHJldmVyc2UpID0+IHtcblx0XHRsZXQgc3JjID0gJ3N3aXRjaChjaCkge1xcbidcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSA9IGkgKyAxKVxuXHRcdFx0c3JjID0gYCR7c3JjfWNhc2UgJHtjaGFycy5jaGFyQ29kZUF0KGkpfTogYFxuXHRcdGNvbnN0IHJlcyA9ICFyZXZlcnNlXG5cdFx0c3JjID0gYCR7c3JjfSByZXR1cm4gJHtyZXN9XFxuZGVmYXVsdDogcmV0dXJuICR7IXJlc31cXG59YFxuXHRcdHJldHVybiBGdW5jdGlvbignY2gnLCBzcmMpXG5cdH1cbmV4cG9ydCBjb25zdFxuXHRpc0RpZ2l0ID0gY2hhclByZWQoJzAxMjM0NTY3ODknKSxcblx0aXNOYW1lQ2hhcmFjdGVyID0gY2hhclByZWQoTm9uTmFtZUNoYXJhY3RlcnMsIHRydWUpLFxuXHRpc051bWJlckNoYXJhY3RlciA9IGNoYXJQcmVkKCcwMTIzNDU2Nzg5LmUnKSxcblx0aXNSZXNlcnZlZENoYXJhY3RlciA9IGNoYXJQcmVkKFJlc2VydmVkQ2hhcmFjdGVycylcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9