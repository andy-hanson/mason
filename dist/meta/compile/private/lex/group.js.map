{"version":3,"sources":["meta/compile/private/lex/group.js"],"names":[],"mappings":"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","file":"meta/compile/private/lex/group.js","sourcesContent":["import Loc, { Pos, StartPos } from 'esast/dist/Loc'\nimport { GroupOpenToClose } from '../Lang'\nimport Token, { Group, Keyword } from '../Token'\nimport { isEmpty, last } from '../U/Bag'\nimport Slice from '../U/Slice'\nimport { assert, newSet } from '../U/util'\nimport { ObjType } from '../U/types'\n\nexport default function group(lx, preGroupedTokens) {\n\t// Stack of GroupBuilders\n\tconst stack = []\n\n\t// Should always be last(stack)\n\tlet cur = null\n\n\tfunction newLevel(pos, k) {\n\t\t// console.log(`${'\\t'.repeat(stack.length)}>> ${k}`)\n\t\tcur = GroupBuilder({ startPos: pos, k: k, body: [] })\n\t\tstack.push(cur)\n\t}\n\n\tfunction finishLevels(closePos, k) {\n\t\twhile (true) {\n\t\t\tconst old = last(stack)\n\t\t\tconst oldClose = GroupOpenToClose.get(old.k)\n\t\t\tif (oldClose === k)\n\t\t\t\tbreak\n\t\t\telse {\n\t\t\t\tlx.check(AutoCloseableGroups.has(old.k), closePos,\n\t\t\t\t\t'Trying to close ' + showGroup(k) +\n\t\t\t\t\t', but last opened was a ' + showGroup(old.k))\n\t\t\t\tfinishLevel(closePos, oldClose)\n\t\t\t}\n\t\t}\n\t\tfinishLevel(closePos, k)\n\t}\n\n\tfunction finishLevel(closePos, k) {\n\t\tconst wrapped = wrapLevel(closePos, k)\n\t\t// cur is now the previous level on the stack\n\t\t// console.log(`${'\\t'.repeat(stack.length)}<< ${k})\n\t\t// Don't add line/spaced\n\t\tif ((k === 'sp' || k === 'ln') && wrapped.tokens.isEmpty())\n\t\t\treturn\n\t\tif (k === '<-' && wrapped.tokens.isEmpty())\n\t\t\tlx.fail(closePos, 'Empty block')\n\t\t// Spaced should always have at least two elements\n\t\tif (k === 'sp' && wrapped.tokens.size() === 1)\n\t\t\tcur.add(wrapped.tokens.head())\n\t\telse\n\t\t\tcur.add(wrapped)\n\t}\n\n\tfunction wrapLevel(closePos, k) {\n\t\tconst old = stack.pop()\n\t\tcur = isEmpty(stack) ? null : last(stack)\n\t\tconst loc = Loc(old.startPos, closePos)\n\t\tassert(GroupOpenToClose.get(old.k) === k)\n\t\tconst tokens = new Slice(old.body)\n\t\treturn Group(loc, tokens, old.k)\n\t}\n\n\tfunction startLine(pos) {\n\t\tnewLevel(pos, 'ln')\n\t\tnewLevel(pos, 'sp')\n\t}\n\tfunction endLine(pos) {\n\t\tfinishLevels(pos, 'sp')\n\t\tfinishLevels(pos, 'ln')\n\t}\n\n\tfunction endAndStart(loc, k) {\n\t\tfinishLevels(loc.start, k)\n\t\tnewLevel(loc.end, k)\n\t}\n\n\tnewLevel(StartPos, '->')\n\tstartLine(StartPos)\n\n\tlet endLoc = Loc(StartPos, StartPos)\n\tpreGroupedTokens.forEach(_ => {\n\t\tif (_ instanceof Token)\n\t\t\tcur.add(_)\n\t\telse {\n\t\t\t// U.log(_.k)\n\t\t\tconst loc = _.loc\n\t\t\tendLoc = loc\n\t\t\tconst k = _.k\n\t\t\tswitch (k) {\n\t\t\t\tcase '(': case '[': case '{':\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tnewLevel(loc.end, 'sp')\n\t\t\t\t\tbreak\n\t\t\t\tcase ')': case ']': case '}':\n\t\t\t\t\tfinishLevels(loc.end, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase '\"':\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'close\"':\n\t\t\t\t\tfinishLevels(loc.start, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase '->':\n\t\t\t\t\t//  ~ before block is OK\n\t\t\t\t\tif (isEmpty(cur.body) || !Keyword.isTilde(last(cur.body)))\n\t\t\t\t\t\tendAndStart(loc, 'sp')\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tstartLine(loc.end)\n\t\t\t\t\tbreak\n\t\t\t\tcase '<-':\n\t\t\t\t\tendLine(loc.start)\n\t\t\t\t\tfinishLevels(loc.end, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'ln':\n\t\t\t\t\tendLine(loc.start)\n\t\t\t\t\tstartLine(loc.end)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'sp':\n\t\t\t\t\tendAndStart(loc, k)\n\t\t\t\t\tbreak\n\t\t\t\tdefault: throw new Error(k)\n\t\t\t}\n\t\t}\n\t})\n\n\tendLine(endLoc.end)\n\tconst wholeModuleBlock = wrapLevel(endLoc.end, '<-')\n\tassert(isEmpty(stack))\n\treturn wholeModuleBlock\n}\n\nconst AutoCloseableGroups = newSet(['(', '[', 'sp'])\n\nconst GroupBuilder = ObjType('GroupBuilder', Object, {\n\tstartPos: Pos,\n\tk: String,\n\tbody: [Token]\n})\nObject.assign(GroupBuilder.prototype, {\n\tadd(t) {\n\t\tthis.body.push(t)\n\t}\n})\n\n// TODO: better names\nconst showGroup = k => k\n"],"sourceRoot":"/src"}