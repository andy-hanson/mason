{"version":3,"sources":["meta/compile/private/lex/group.js"],"names":[],"mappings":"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","file":"meta/compile/private/lex/group.js","sourcesContent":["import Loc, { Pos, StartPos } from 'esast/dist/Loc'\nimport tuple from 'esast/dist/private/tuple'\nimport Token, { Group, Keyword } from '../Token'\nimport { isEmpty, last } from '../U/Bag'\nimport { assert } from '../U/util'\nimport Slice from '../U/Slice'\nimport { groupOpenToClose, GP_OpenParen, GP_OpenBracket, GP_OpenBlock, GP_OpenQuote, GP_Line,\n\tGP_Space, GP_CloseParen, GP_CloseBracket, GP_CloseBlock, GP_CloseQuote} from './GroupPre'\n\n\nexport default function group(cx, preGroupedTokens) {\n\t// Stack of GroupBuilders\n\tconst stack = []\n\n\t// Should always be last(stack)\n\tlet cur = null\n\n\tconst\n\t\tnewLevel = (pos, k) => {\n\t\t\tcur = GroupBuilder(pos, k, [ ])\n\t\t\tstack.push(cur)\n\t\t},\n\n\t\tfinishLevels = (closePos, k) => {\n\t\t\t// We may close other groups. For example, a G_Line can close a G_Paren.\n\t\t\twhile (true) {\n\t\t\t\tconst old = last(stack)\n\t\t\t\tconst oldClose = groupOpenToClose(old.k)\n\t\t\t\tif (oldClose === k)\n\t\t\t\t\tbreak\n\t\t\t\telse {\n\t\t\t\t\tcx.check(\n\t\t\t\t\t\told.k === GP_OpenParen || old.k === GP_OpenBracket || old.k === GP_Space,\n\t\t\t\t\t\tclosePos,\n\t\t\t\t\t\t`Trying to close ${showGroup(k)}, but last opened was ${showGroup(old.k)}`)\n\t\t\t\t\tfinishLevel(closePos, oldClose)\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinishLevel(closePos, k)\n\t\t},\n\n\t\tfinishLevel = (closePos, k) => {\n\t\t\tlet wrapped = wrapLevel(closePos, k)\n\t\t\t// cur is now the previous level on the stack\n\t\t\t// Don't add line/spaced\n\t\t\tswitch (k) {\n\t\t\t\tcase GP_Space: {\n\t\t\t\t\tconst size = wrapped.tokens.size()\n\t\t\t\t\tif (size === 0)\n\t\t\t\t\t\treturn\n\t\t\t\t\telse if (size === 1)\n\t\t\t\t\t\t// Spaced should always have at least two elements\n\t\t\t\t\t\twrapped = wrapped.tokens.head()\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase GP_Line:\n\t\t\t\t\tif (wrapped.tokens.isEmpty())\n\t\t\t\t\t\treturn\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_CloseBlock:\n\t\t\t\t\tif (wrapped.tokens.isEmpty())\n\t\t\t\t\t\tcx.fail(closePos, 'Empty block')\n\t\t\t\tdefault:\n\t\t\t\t\t// fallthrough\n\t\t\t}\n\t\t\tcur.add(wrapped)\n\t\t},\n\n\t\twrapLevel = (closePos, k) => {\n\t\t\tconst old = stack.pop()\n\t\t\tcur = isEmpty(stack) ? null : last(stack)\n\t\t\tconst loc = Loc(old.startPos, closePos)\n\t\t\tassert(groupOpenToClose(old.k) === k)\n\t\t\tconst tokens = new Slice(old.body)\n\t\t\t// A GroupPre opener is also an equivalent Group kind. E.g. GP_OpenParen === G_Paren\n\t\t\treturn Group(loc, tokens, old.k)\n\t\t},\n\n\t\tstartLine = pos => {\n\t\t\tnewLevel(pos, GP_Line)\n\t\t\tnewLevel(pos, GP_Space)\n\t\t},\n\t\tendLine = pos => {\n\t\t\tfinishLevels(pos, GP_Space)\n\t\t\tfinishLevels(pos, GP_Line)\n\t\t},\n\n\t\tendAndStart = (loc, k) => {\n\t\t\tfinishLevels(loc.start, k)\n\t\t\tnewLevel(loc.end, k)\n\t\t}\n\n\tnewLevel(StartPos, GP_OpenBlock)\n\tstartLine(StartPos)\n\n\tlet endLoc = Loc(StartPos, StartPos)\n\tpreGroupedTokens.forEach(_ => {\n\t\tif (_ instanceof Token)\n\t\t\tcur.add(_)\n\t\telse {\n\t\t\t// It's a GroupPre\n\t\t\tconst loc = _.loc\n\t\t\tendLoc = loc\n\t\t\tconst k = _.k\n\t\t\tswitch (k) {\n\t\t\t\tcase GP_OpenParen: case GP_OpenBracket:\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tnewLevel(loc.end, GP_Space)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_CloseParen: case GP_CloseBracket:\n\t\t\t\t\tfinishLevels(loc.end, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_OpenQuote:\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_CloseQuote:\n\t\t\t\t\tfinishLevels(loc.start, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_OpenBlock:\n\t\t\t\t\t//  ~ before block is OK\n\t\t\t\t\tif (isEmpty(cur.body) || !Keyword.isTilde(last(cur.body)))\n\t\t\t\t\t\tendAndStart(loc, GP_Space)\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tstartLine(loc.end)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_CloseBlock:\n\t\t\t\t\tendLine(loc.start)\n\t\t\t\t\tfinishLevels(loc.end, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_Line:\n\t\t\t\t\tendLine(loc.start)\n\t\t\t\t\tstartLine(loc.end)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_Space:\n\t\t\t\t\tendAndStart(loc, k)\n\t\t\t\t\tbreak\n\t\t\t\tdefault: throw new Error(k)\n\t\t\t}\n\t\t}\n\t})\n\n\tendLine(endLoc.end)\n\tconst wholeModuleBlock = wrapLevel(endLoc.end, GP_CloseBlock)\n\tassert(isEmpty(stack))\n\treturn wholeModuleBlock\n}\n\nconst GroupBuilder = tuple('GroupBuilder', Object, 'doc',\n\t// k is a Group kind\n\t[ 'startPos', Pos, 'k', Number, 'body', [Token] ],\n\t{\n\t\tadd(t) { this.body.push(t) }\n\t})\n\n// TODO: better names\nconst showGroup = k => k\n"],"sourceRoot":"/src"}