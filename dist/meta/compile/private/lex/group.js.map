{"version":3,"sources":["meta/compile/private/lex/group.js"],"names":[],"mappings":"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","file":"meta/compile/private/lex/group.js","sourcesContent":["import Loc, { StartPos } from 'esast/dist/Loc'\nimport { Group, Keyword } from '../Token'\nimport { head, isEmpty, last } from '../U/Bag'\nimport { assert } from '../U/util'\nimport GroupPre, {\n\tgroupOpenToClose, GP_OpenParen, GP_OpenBracket, GP_OpenBlock, GP_OpenQuote, GP_Line,\n\tGP_Space, GP_CloseParen, GP_CloseBracket, GP_CloseBlock, GP_CloseQuote} from './GroupPre'\n\nexport default function group(cx, preGroupedTokens) {\n\t// Stack of GroupBuilders\n\tconst stack = []\n\tlet cur\n\n\tconst\n\t\tnewLevel = (pos, k) => {\n\t\t\tstack.push(cur)\n\t\t\tcur = Group(Loc(pos, null), [ ], k)\n\t\t},\n\n\t\tfinishLevels = (closePos, k) => {\n\t\t\t// We may close other groups. For example, a G_Line can close a G_Paren.\n\t\t\twhile (true) {\n\t\t\t\tconst close = groupOpenToClose(cur.k)\n\t\t\t\tif (close === k)\n\t\t\t\t\tbreak\n\t\t\t\telse {\n\t\t\t\t\tcx.check(\n\t\t\t\t\t\tcur.k === GP_OpenParen || cur.k === GP_OpenBracket || cur.k === GP_Space,\n\t\t\t\t\t\tclosePos, () =>\n\t\t\t\t\t\t`Trying to close ${showGroup(k)}, but last opened was ${showGroup(cur.k)}`)\n\t\t\t\t\tfinishLevel(closePos, close)\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinishLevel(closePos, k)\n\t\t},\n\n\t\tfinishLevel = (closePos, k) => {\n\t\t\tlet wrapped = wrapLevel(closePos)\n\t\t\t// cur is now the previous level on the stack\n\t\t\t// Don't add line/spaced\n\t\t\tswitch (k) {\n\t\t\t\tcase GP_Space: {\n\t\t\t\t\tconst size = wrapped.tokens.length\n\t\t\t\t\tif (size === 0)\n\t\t\t\t\t\treturn\n\t\t\t\t\telse if (size === 1)\n\t\t\t\t\t\t// Spaced should always have at least two elements\n\t\t\t\t\t\twrapped = head(wrapped.tokens)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase GP_Line:\n\t\t\t\t\tif (isEmpty(wrapped.tokens))\n\t\t\t\t\t\treturn\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_CloseBlock:\n\t\t\t\t\tif (isEmpty(wrapped.tokens))\n\t\t\t\t\t\tcx.fail(closePos, 'Empty block')\n\t\t\t\tdefault:\n\t\t\t\t\t// fallthrough\n\t\t\t}\n\t\t\tcur.tokens.push(wrapped)\n\t\t},\n\n\t\twrapLevel = closePos => {\n\t\t\tconst builtGroup = cur\n\t\t\tcur = stack.pop()\n\t\t\tbuiltGroup.loc.end = closePos\n\t\t\treturn builtGroup\n\t\t},\n\n\t\tstartLine = pos => {\n\t\t\tnewLevel(pos, GP_Line)\n\t\t\tnewLevel(pos, GP_Space)\n\t\t},\n\t\tendLine = pos => {\n\t\t\tfinishLevels(pos, GP_Space)\n\t\t\tfinishLevels(pos, GP_Line)\n\t\t},\n\n\t\tendAndStart = (loc, k) => {\n\t\t\tfinishLevels(loc.start, k)\n\t\t\tnewLevel(loc.end, k)\n\t\t}\n\n\tcur = Group(Loc(StartPos, null), [ ], GP_OpenBlock)\n\tstartLine(StartPos)\n\n\tlet endLoc = Loc(StartPos, StartPos)\n\tpreGroupedTokens.forEach(_ => {\n\t\tif (_ instanceof GroupPre) {\n\t\t\t// It's a GroupPre\n\t\t\tconst loc = _.loc\n\t\t\tendLoc = loc\n\t\t\tconst k = _.k\n\t\t\tswitch (k) {\n\t\t\t\tcase GP_OpenParen: case GP_OpenBracket:\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tnewLevel(loc.end, GP_Space)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_CloseParen: case GP_CloseBracket:\n\t\t\t\t\tfinishLevels(loc.end, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_OpenQuote:\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_CloseQuote:\n\t\t\t\t\tfinishLevels(loc.start, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_OpenBlock:\n\t\t\t\t\t//  ~ before block is OK\n\t\t\t\t\tif (isEmpty(cur.tokens) || !Keyword.isTilde(last(cur.tokens)))\n\t\t\t\t\t\tendAndStart(loc, GP_Space)\n\t\t\t\t\tnewLevel(loc.start, k)\n\t\t\t\t\tstartLine(loc.end)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_CloseBlock:\n\t\t\t\t\tendLine(loc.start)\n\t\t\t\t\tfinishLevels(loc.end, k)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_Line:\n\t\t\t\t\tendLine(loc.start)\n\t\t\t\t\tstartLine(loc.end)\n\t\t\t\t\tbreak\n\t\t\t\tcase GP_Space:\n\t\t\t\t\tendAndStart(loc, k)\n\t\t\t\t\tbreak\n\t\t\t\tdefault: throw new Error(k)\n\t\t\t}\n\t\t} else\n\t\t\tcur.tokens.push(_)\n\t})\n\n\tendLine(endLoc.end)\n\tassert(isEmpty(stack))\n\tcur.loc.end = endLoc.end\n\treturn cur\n}\n\n// TODO\nconst showGroup = k => k\n"],"sourceRoot":"/src"}