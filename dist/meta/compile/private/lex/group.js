if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', 'esast/dist/Loc', '../Token', '../U/Bag', '../U/util', './GroupPre'], function (exports, module, _esastDistLoc, _Token, _UBag, _UUtil, _GroupPre) {
	'use strict';

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj['default'] : obj; };

	module.exports = group;

	var _Loc = _interopRequire(_esastDistLoc);

	var _GroupPre2 = _interopRequire(_GroupPre);

	function group(cx, preGroupedTokens) {
		// Stack of GroupBuilders
		const stack = [];
		let cur;

		const newLevel = function (pos, k) {
			stack.push(cur);
			cur = _Token.Group(_Loc(pos, null), [], k);
		},
		      finishLevels = function (closePos, k) {
			// We may close other groups. For example, a G_Line can close a G_Paren.
			while (true) {
				const close = _GroupPre.groupOpenToClose(cur.k);
				if (close === k) break;else {
					cx.check(cur.k === _GroupPre.GP_OpenParen || cur.k === _GroupPre.GP_OpenBracket || cur.k === _GroupPre.GP_Space, closePos, function () {
						return 'Trying to close ' + showGroup(k) + ', but last opened was ' + showGroup(cur.k);
					});
					finishLevel(closePos, close);
				}
			}
			finishLevel(closePos, k);
		},
		      finishLevel = function (closePos, k) {
			let wrapped = wrapLevel(closePos);
			// cur is now the previous level on the stack
			// Don't add line/spaced
			switch (k) {
				case _GroupPre.GP_Space:
					{
						const size = wrapped.tokens.length;
						if (size === 0) return;else if (size === 1)
							// Spaced should always have at least two elements
							wrapped = _UBag.head(wrapped.tokens);
						break;
					}
				case _GroupPre.GP_Line:
					if (_UBag.isEmpty(wrapped.tokens)) return;
					break;
				case _GroupPre.GP_CloseBlock:
					if (_UBag.isEmpty(wrapped.tokens)) cx.fail(closePos, 'Empty block');
				default:
				// fallthrough
			}
			cur.tokens.push(wrapped);
		},
		      wrapLevel = function (closePos) {
			const builtGroup = cur;
			cur = stack.pop();
			builtGroup.loc.end = closePos;
			return builtGroup;
		},
		      startLine = function (pos) {
			newLevel(pos, _GroupPre.GP_Line);
			newLevel(pos, _GroupPre.GP_Space);
		},
		      endLine = function (pos) {
			finishLevels(pos, _GroupPre.GP_Space);
			finishLevels(pos, _GroupPre.GP_Line);
		},
		      endAndStart = function (loc, k) {
			finishLevels(loc.start, k);
			newLevel(loc.end, k);
		};

		cur = _Token.Group(_Loc(_esastDistLoc.StartPos, null), [], _GroupPre.GP_OpenBlock);
		startLine(_esastDistLoc.StartPos);

		let endLoc = _Loc(_esastDistLoc.StartPos, _esastDistLoc.StartPos);
		preGroupedTokens.forEach(function (_) {
			if (_ instanceof _GroupPre2) {
				// It's a GroupPre
				const loc = _.loc;
				endLoc = loc;
				const k = _.k;
				switch (k) {
					case _GroupPre.GP_OpenParen:case _GroupPre.GP_OpenBracket:
						newLevel(loc.start, k);
						newLevel(loc.end, _GroupPre.GP_Space);
						break;
					case _GroupPre.GP_CloseParen:case _GroupPre.GP_CloseBracket:
						finishLevels(loc.end, k);
						break;
					case _GroupPre.GP_OpenQuote:
						newLevel(loc.start, k);
						break;
					case _GroupPre.GP_CloseQuote:
						finishLevels(loc.start, k);
						break;
					case _GroupPre.GP_OpenBlock:
						//  ~ before block is OK
						if (_UBag.isEmpty(cur.tokens) || !_Token.Keyword.isTilde(_UBag.last(cur.tokens))) endAndStart(loc, _GroupPre.GP_Space);
						newLevel(loc.start, k);
						startLine(loc.end);
						break;
					case _GroupPre.GP_CloseBlock:
						endLine(loc.start);
						finishLevels(loc.end, k);
						break;
					case _GroupPre.GP_Line:
						endLine(loc.start);
						startLine(loc.end);
						break;
					case _GroupPre.GP_Space:
						endAndStart(loc, k);
						break;
					default:
						throw new Error(k);
				}
			} else cur.tokens.push(_);
		});

		endLine(endLoc.end);
		_UUtil.assert(_UBag.isEmpty(stack));
		cur.loc.end = endLoc.end;
		return cur;
	}

	// TODO
	const showGroup = function (k) {
		return k;
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL2xleC9ncm91cC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztrQkFRd0IsS0FBSzs7Ozs7O0FBQWQsVUFBUyxLQUFLLENBQUMsRUFBRSxFQUFFLGdCQUFnQixFQUFFOztBQUVuRCxRQUFNLEtBQUssR0FBRyxFQUFFLENBQUE7QUFDaEIsTUFBSSxHQUFHLENBQUE7O0FBRVAsUUFDQyxRQUFRLEdBQUcsVUFBQyxHQUFHLEVBQUUsQ0FBQyxFQUFLO0FBQ3RCLFFBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDZixNQUFHLEdBQUcsT0FmQSxLQUFLLENBZUMsS0FBSSxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQ25DO1FBRUQsWUFBWSxHQUFHLFVBQUMsUUFBUSxFQUFFLENBQUMsRUFBSzs7QUFFL0IsVUFBTyxJQUFJLEVBQUU7QUFDWixVQUFNLEtBQUssR0FBRyxVQWpCakIsZ0JBQWdCLENBaUJrQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDckMsUUFBSSxLQUFLLEtBQUssQ0FBQyxFQUNkLE1BQUssS0FDRDtBQUNKLE9BQUUsQ0FBQyxLQUFLLENBQ1AsR0FBRyxDQUFDLENBQUMsZUF0QlEsWUFBWSxBQXNCSCxJQUFJLEdBQUcsQ0FBQyxDQUFDLGVBdEJKLGNBQWMsQUFzQlMsSUFBSSxHQUFHLENBQUMsQ0FBQyxlQXJCaEUsUUFBUSxBQXFCcUUsRUFDeEUsUUFBUSxFQUFFO2tDQUNTLFNBQVMsQ0FBQyxDQUFDLENBQUMsOEJBQXlCLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO01BQUUsQ0FBQyxDQUFBO0FBQzVFLGdCQUFXLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO0tBQzVCO0lBQ0Q7QUFDRCxjQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQ3hCO1FBRUQsV0FBVyxHQUFHLFVBQUMsUUFBUSxFQUFFLENBQUMsRUFBSztBQUM5QixPQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7OztBQUdqQyxXQUFRLENBQUM7QUFDUixtQkFuQ0gsUUFBUTtBQW1DVTtBQUNkLFlBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFBO0FBQ2xDLFVBQUksSUFBSSxLQUFLLENBQUMsRUFDYixPQUFNLEtBQ0YsSUFBSSxJQUFJLEtBQUssQ0FBQzs7QUFFbEIsY0FBTyxHQUFHLE1BN0NQLElBQUksQ0E2Q1EsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQy9CLFlBQUs7TUFDTDtBQUFBLEFBQ0QsbUJBN0N5RSxPQUFPO0FBOEMvRSxTQUFJLE1BakRNLE9BQU8sQ0FpREwsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUMxQixPQUFNO0FBQ1AsV0FBSztBQUFBLEFBQ04sbUJBaER1QyxhQUFhO0FBaURuRCxTQUFJLE1BckRNLE9BQU8sQ0FxREwsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUMxQixFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQTtBQUFBLEFBQ2xDLFlBQVE7O0lBRVI7QUFDRCxNQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtHQUN4QjtRQUVELFNBQVMsR0FBRyxVQUFBLFFBQVEsRUFBSTtBQUN2QixTQUFNLFVBQVUsR0FBRyxHQUFHLENBQUE7QUFDdEIsTUFBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNqQixhQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUE7QUFDN0IsVUFBTyxVQUFVLENBQUE7R0FDakI7UUFFRCxTQUFTLEdBQUcsVUFBQSxHQUFHLEVBQUk7QUFDbEIsV0FBUSxDQUFDLEdBQUcsWUFsRThELE9BQU8sQ0FrRTNELENBQUE7QUFDdEIsV0FBUSxDQUFDLEdBQUcsWUFsRWQsUUFBUSxDQWtFaUIsQ0FBQTtHQUN2QjtRQUNELE9BQU8sR0FBRyxVQUFBLEdBQUcsRUFBSTtBQUNoQixlQUFZLENBQUMsR0FBRyxZQXJFbEIsUUFBUSxDQXFFcUIsQ0FBQTtBQUMzQixlQUFZLENBQUMsR0FBRyxZQXZFMEQsT0FBTyxDQXVFdkQsQ0FBQTtHQUMxQjtRQUVELFdBQVcsR0FBRyxVQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUs7QUFDekIsZUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDMUIsV0FBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDcEIsQ0FBQTs7QUFFRixLQUFHLEdBQUcsT0FuRkUsS0FBSyxDQW1GRCxtQkFwRkMsUUFBUSxFQW9GSyxJQUFJLENBQUMsRUFBRSxFQUFHLFlBL0VZLFlBQVksQ0ErRVQsQ0FBQTtBQUNuRCxXQUFTLGVBckZJLFFBQVEsQ0FxRkYsQ0FBQTs7QUFFbkIsTUFBSSxNQUFNLEdBQUcsbUJBdkZBLFFBQVEsZ0JBQVIsUUFBUSxDQXVGZSxDQUFBO0FBQ3BDLGtCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsRUFBSTtBQUM3QixPQUFJLENBQUMsc0JBQW9CLEVBQUU7O0FBRTFCLFVBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUE7QUFDakIsVUFBTSxHQUFHLEdBQUcsQ0FBQTtBQUNaLFVBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDYixZQUFRLENBQUM7QUFDUixvQkExRmUsWUFBWSxDQTBGVCxBQUFDLGVBMUZVLGNBQWM7QUEyRjFDLGNBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3RCLGNBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxZQTNGcEIsUUFBUSxDQTJGdUIsQ0FBQTtBQUMzQixZQUFLO0FBQUEsQUFDTixvQkE3Rk8sYUFBYSxDQTZGRCxBQUFDLGVBN0ZFLGVBQWU7QUE4RnBDLGtCQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN4QixZQUFLO0FBQUEsQUFDTixvQkFqRzJELFlBQVk7QUFrR3RFLGNBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3RCLFlBQUs7QUFBQSxBQUNOLG9CQW5Hc0QsYUFBYTtBQW9HbEUsa0JBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzFCLFlBQUs7QUFBQSxBQUNOLG9CQXZHNkMsWUFBWTs7QUF5R3hELFVBQUksTUE1R00sT0FBTyxDQTRHTCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQTdHakIsT0FBTyxDQTZHa0IsT0FBTyxDQUFDLE1BNUd6QixJQUFJLENBNEcwQixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDNUQsV0FBVyxDQUFDLEdBQUcsWUF6R3BCLFFBQVEsQ0F5R3VCLENBQUE7QUFDM0IsY0FBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDdEIsZUFBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNsQixZQUFLO0FBQUEsQUFDTixvQkE3R3VDLGFBQWE7QUE4R25ELGFBQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDbEIsa0JBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3hCLFlBQUs7QUFBQSxBQUNOLG9CQWxIeUUsT0FBTztBQW1IL0UsYUFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNsQixlQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ2xCLFlBQUs7QUFBQSxBQUNOLG9CQXJISCxRQUFRO0FBc0hKLGlCQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ25CLFlBQUs7QUFBQSxBQUNOO0FBQVMsWUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUFBLEtBQzNCO0lBQ0QsTUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUNuQixDQUFDLENBQUE7O0FBRUYsU0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNuQixTQWxJUSxNQUFNLENBa0lQLE1BbklPLE9BQU8sQ0FtSU4sS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN0QixLQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFBO0FBQ3hCLFNBQU8sR0FBRyxDQUFBO0VBQ1Y7OztBQUdELE9BQU0sU0FBUyxHQUFHLFVBQUEsQ0FBQztTQUFJLENBQUM7RUFBQSxDQUFBIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL2xleC9ncm91cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMb2MsIHsgU3RhcnRQb3MgfSBmcm9tICdlc2FzdC9kaXN0L0xvYydcbmltcG9ydCB7IEdyb3VwLCBLZXl3b3JkIH0gZnJvbSAnLi4vVG9rZW4nXG5pbXBvcnQgeyBoZWFkLCBpc0VtcHR5LCBsYXN0IH0gZnJvbSAnLi4vVS9CYWcnXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuLi9VL3V0aWwnXG5pbXBvcnQgR3JvdXBQcmUsIHtcblx0Z3JvdXBPcGVuVG9DbG9zZSwgR1BfT3BlblBhcmVuLCBHUF9PcGVuQnJhY2tldCwgR1BfT3BlbkJsb2NrLCBHUF9PcGVuUXVvdGUsIEdQX0xpbmUsXG5cdEdQX1NwYWNlLCBHUF9DbG9zZVBhcmVuLCBHUF9DbG9zZUJyYWNrZXQsIEdQX0Nsb3NlQmxvY2ssIEdQX0Nsb3NlUXVvdGV9IGZyb20gJy4vR3JvdXBQcmUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdyb3VwKGN4LCBwcmVHcm91cGVkVG9rZW5zKSB7XG5cdC8vIFN0YWNrIG9mIEdyb3VwQnVpbGRlcnNcblx0Y29uc3Qgc3RhY2sgPSBbXVxuXHRsZXQgY3VyXG5cblx0Y29uc3Rcblx0XHRuZXdMZXZlbCA9IChwb3MsIGspID0+IHtcblx0XHRcdHN0YWNrLnB1c2goY3VyKVxuXHRcdFx0Y3VyID0gR3JvdXAoTG9jKHBvcywgbnVsbCksIFsgXSwgaylcblx0XHR9LFxuXG5cdFx0ZmluaXNoTGV2ZWxzID0gKGNsb3NlUG9zLCBrKSA9PiB7XG5cdFx0XHQvLyBXZSBtYXkgY2xvc2Ugb3RoZXIgZ3JvdXBzLiBGb3IgZXhhbXBsZSwgYSBHX0xpbmUgY2FuIGNsb3NlIGEgR19QYXJlbi5cblx0XHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHRcdGNvbnN0IGNsb3NlID0gZ3JvdXBPcGVuVG9DbG9zZShjdXIuaylcblx0XHRcdFx0aWYgKGNsb3NlID09PSBrKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGN4LmNoZWNrKFxuXHRcdFx0XHRcdFx0Y3VyLmsgPT09IEdQX09wZW5QYXJlbiB8fCBjdXIuayA9PT0gR1BfT3BlbkJyYWNrZXQgfHwgY3VyLmsgPT09IEdQX1NwYWNlLFxuXHRcdFx0XHRcdFx0Y2xvc2VQb3MsICgpID0+XG5cdFx0XHRcdFx0XHRgVHJ5aW5nIHRvIGNsb3NlICR7c2hvd0dyb3VwKGspfSwgYnV0IGxhc3Qgb3BlbmVkIHdhcyAke3Nob3dHcm91cChjdXIuayl9YClcblx0XHRcdFx0XHRmaW5pc2hMZXZlbChjbG9zZVBvcywgY2xvc2UpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZpbmlzaExldmVsKGNsb3NlUG9zLCBrKVxuXHRcdH0sXG5cblx0XHRmaW5pc2hMZXZlbCA9IChjbG9zZVBvcywgaykgPT4ge1xuXHRcdFx0bGV0IHdyYXBwZWQgPSB3cmFwTGV2ZWwoY2xvc2VQb3MpXG5cdFx0XHQvLyBjdXIgaXMgbm93IHRoZSBwcmV2aW91cyBsZXZlbCBvbiB0aGUgc3RhY2tcblx0XHRcdC8vIERvbid0IGFkZCBsaW5lL3NwYWNlZFxuXHRcdFx0c3dpdGNoIChrKSB7XG5cdFx0XHRcdGNhc2UgR1BfU3BhY2U6IHtcblx0XHRcdFx0XHRjb25zdCBzaXplID0gd3JhcHBlZC50b2tlbnMubGVuZ3RoXG5cdFx0XHRcdFx0aWYgKHNpemUgPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0XHRlbHNlIGlmIChzaXplID09PSAxKVxuXHRcdFx0XHRcdFx0Ly8gU3BhY2VkIHNob3VsZCBhbHdheXMgaGF2ZSBhdCBsZWFzdCB0d28gZWxlbWVudHNcblx0XHRcdFx0XHRcdHdyYXBwZWQgPSBoZWFkKHdyYXBwZWQudG9rZW5zKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSBHUF9MaW5lOlxuXHRcdFx0XHRcdGlmIChpc0VtcHR5KHdyYXBwZWQudG9rZW5zKSlcblx0XHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgR1BfQ2xvc2VCbG9jazpcblx0XHRcdFx0XHRpZiAoaXNFbXB0eSh3cmFwcGVkLnRva2VucykpXG5cdFx0XHRcdFx0XHRjeC5mYWlsKGNsb3NlUG9zLCAnRW1wdHkgYmxvY2snKVxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vIGZhbGx0aHJvdWdoXG5cdFx0XHR9XG5cdFx0XHRjdXIudG9rZW5zLnB1c2god3JhcHBlZClcblx0XHR9LFxuXG5cdFx0d3JhcExldmVsID0gY2xvc2VQb3MgPT4ge1xuXHRcdFx0Y29uc3QgYnVpbHRHcm91cCA9IGN1clxuXHRcdFx0Y3VyID0gc3RhY2sucG9wKClcblx0XHRcdGJ1aWx0R3JvdXAubG9jLmVuZCA9IGNsb3NlUG9zXG5cdFx0XHRyZXR1cm4gYnVpbHRHcm91cFxuXHRcdH0sXG5cblx0XHRzdGFydExpbmUgPSBwb3MgPT4ge1xuXHRcdFx0bmV3TGV2ZWwocG9zLCBHUF9MaW5lKVxuXHRcdFx0bmV3TGV2ZWwocG9zLCBHUF9TcGFjZSlcblx0XHR9LFxuXHRcdGVuZExpbmUgPSBwb3MgPT4ge1xuXHRcdFx0ZmluaXNoTGV2ZWxzKHBvcywgR1BfU3BhY2UpXG5cdFx0XHRmaW5pc2hMZXZlbHMocG9zLCBHUF9MaW5lKVxuXHRcdH0sXG5cblx0XHRlbmRBbmRTdGFydCA9IChsb2MsIGspID0+IHtcblx0XHRcdGZpbmlzaExldmVscyhsb2Muc3RhcnQsIGspXG5cdFx0XHRuZXdMZXZlbChsb2MuZW5kLCBrKVxuXHRcdH1cblxuXHRjdXIgPSBHcm91cChMb2MoU3RhcnRQb3MsIG51bGwpLCBbIF0sIEdQX09wZW5CbG9jaylcblx0c3RhcnRMaW5lKFN0YXJ0UG9zKVxuXG5cdGxldCBlbmRMb2MgPSBMb2MoU3RhcnRQb3MsIFN0YXJ0UG9zKVxuXHRwcmVHcm91cGVkVG9rZW5zLmZvckVhY2goXyA9PiB7XG5cdFx0aWYgKF8gaW5zdGFuY2VvZiBHcm91cFByZSkge1xuXHRcdFx0Ly8gSXQncyBhIEdyb3VwUHJlXG5cdFx0XHRjb25zdCBsb2MgPSBfLmxvY1xuXHRcdFx0ZW5kTG9jID0gbG9jXG5cdFx0XHRjb25zdCBrID0gXy5rXG5cdFx0XHRzd2l0Y2ggKGspIHtcblx0XHRcdFx0Y2FzZSBHUF9PcGVuUGFyZW46IGNhc2UgR1BfT3BlbkJyYWNrZXQ6XG5cdFx0XHRcdFx0bmV3TGV2ZWwobG9jLnN0YXJ0LCBrKVxuXHRcdFx0XHRcdG5ld0xldmVsKGxvYy5lbmQsIEdQX1NwYWNlKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgR1BfQ2xvc2VQYXJlbjogY2FzZSBHUF9DbG9zZUJyYWNrZXQ6XG5cdFx0XHRcdFx0ZmluaXNoTGV2ZWxzKGxvYy5lbmQsIGspXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Y2FzZSBHUF9PcGVuUXVvdGU6XG5cdFx0XHRcdFx0bmV3TGV2ZWwobG9jLnN0YXJ0LCBrKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgR1BfQ2xvc2VRdW90ZTpcblx0XHRcdFx0XHRmaW5pc2hMZXZlbHMobG9jLnN0YXJ0LCBrKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgR1BfT3BlbkJsb2NrOlxuXHRcdFx0XHRcdC8vICB+IGJlZm9yZSBibG9jayBpcyBPS1xuXHRcdFx0XHRcdGlmIChpc0VtcHR5KGN1ci50b2tlbnMpIHx8ICFLZXl3b3JkLmlzVGlsZGUobGFzdChjdXIudG9rZW5zKSkpXG5cdFx0XHRcdFx0XHRlbmRBbmRTdGFydChsb2MsIEdQX1NwYWNlKVxuXHRcdFx0XHRcdG5ld0xldmVsKGxvYy5zdGFydCwgaylcblx0XHRcdFx0XHRzdGFydExpbmUobG9jLmVuZClcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRjYXNlIEdQX0Nsb3NlQmxvY2s6XG5cdFx0XHRcdFx0ZW5kTGluZShsb2Muc3RhcnQpXG5cdFx0XHRcdFx0ZmluaXNoTGV2ZWxzKGxvYy5lbmQsIGspXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Y2FzZSBHUF9MaW5lOlxuXHRcdFx0XHRcdGVuZExpbmUobG9jLnN0YXJ0KVxuXHRcdFx0XHRcdHN0YXJ0TGluZShsb2MuZW5kKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgR1BfU3BhY2U6XG5cdFx0XHRcdFx0ZW5kQW5kU3RhcnQobG9jLCBrKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihrKVxuXHRcdFx0fVxuXHRcdH0gZWxzZVxuXHRcdFx0Y3VyLnRva2Vucy5wdXNoKF8pXG5cdH0pXG5cblx0ZW5kTGluZShlbmRMb2MuZW5kKVxuXHRhc3NlcnQoaXNFbXB0eShzdGFjaykpXG5cdGN1ci5sb2MuZW5kID0gZW5kTG9jLmVuZFxuXHRyZXR1cm4gY3VyXG59XG5cbi8vIFRPRE9cbmNvbnN0IHNob3dHcm91cCA9IGsgPT4ga1xuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=