if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', 'esast/dist/Loc', '../Token', '../util', './GroupPre'], function (exports, module, _esastDistLoc, _Token, _util, _GroupPre) {
	'use strict';

	module.exports = group;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Loc = _interopRequire(_esastDistLoc);

	var _GroupPre2 = _interopRequire(_GroupPre);

	function group(cx, preGroupedTokens) {
		// Stack of GroupBuilders
		const stack = [];
		let cur;

		const newLevel = function (pos, k) {
			stack.push(cur);
			cur = (0, _Token.Group)((0, _Loc)(pos, null), [], k);
		},
		      finishLevels = function (closePos, k) {
			// We may close other groups. For example, a G_Line can close a G_Paren.
			while (true) {
				const close = (0, _GroupPre.groupOpenToClose)(cur.kind);
				if (close === k) break;else {
					cx.check(cur.kind === _GroupPre.GP_OpenParen || cur.kind === _GroupPre.GP_OpenBracket || cur.kind === _GroupPre.GP_Space, closePos, function () {
						return 'Trying to close ' + showG(k) + ', but last opened was ' + showG(cur.kind);
					});
					finishLevel(closePos, close);
				}
			}
			finishLevel(closePos, k);
		},
		      finishLevel = function (closePos, k) {
			let wrapped = wrapLevel(closePos);
			// cur is now the previous level on the stack
			// Don't add line/spaced
			switch (k) {
				case _GroupPre.GP_Space:
					{
						const size = wrapped.tokens.length;
						if (size === 0) return;else if (size === 1)
							// Spaced should always have at least two elements
							wrapped = wrapped.tokens[0];
						break;
					}
				case _GroupPre.GP_Line:
					if ((0, _util.isEmpty)(wrapped.tokens)) return;
					break;
				case _GroupPre.GP_CloseBlock:
					if ((0, _util.isEmpty)(wrapped.tokens)) cx.fail(closePos, 'Empty block');
				default:
				// fallthrough
			}
			cur.tokens.push(wrapped);
		},
		      wrapLevel = function (closePos) {
			const builtGroup = cur;
			cur = stack.pop();
			builtGroup.loc.end = closePos;
			return builtGroup;
		},
		      startLine = function (pos) {
			newLevel(pos, _GroupPre.GP_Line);
			newLevel(pos, _GroupPre.GP_Space);
		},
		      endLine = function (pos) {
			finishLevels(pos, _GroupPre.GP_Space);
			finishLevels(pos, _GroupPre.GP_Line);
		},
		      endAndStart = function (loc, k) {
			finishLevels(loc.start, k);
			newLevel(loc.end, k);
		};

		cur = (0, _Token.Group)((0, _Loc)(_esastDistLoc.StartPos, null), [], _GroupPre.GP_OpenBlock);
		startLine(_esastDistLoc.StartPos);

		let endLoc = (0, _Loc)(_esastDistLoc.StartPos, _esastDistLoc.StartPos);
		preGroupedTokens.forEach(function (_) {
			if (_ instanceof _GroupPre2) {
				// It's a GroupPre
				const loc = _.loc;
				endLoc = loc;
				const kind = _.kind;
				switch (kind) {
					case _GroupPre.GP_OpenParen:case _GroupPre.GP_OpenBracket:
						newLevel(loc.start, kind);
						newLevel(loc.end, _GroupPre.GP_Space);
						break;
					case _GroupPre.GP_CloseParen:case _GroupPre.GP_CloseBracket:
						finishLevels(loc.end, kind);
						break;
					case _GroupPre.GP_OpenQuote:
						newLevel(loc.start, kind);
						break;
					case _GroupPre.GP_CloseQuote:
						finishLevels(loc.start, kind);
						break;
					case _GroupPre.GP_OpenBlock:
						//  ~ before block is OK
						if ((0, _util.isEmpty)(cur.tokens) || !(0, _Token.isKeyword)(_Token.KW_Lazy, (0, _util.last)(cur.tokens))) endAndStart(loc, _GroupPre.GP_Space);
						newLevel(loc.start, kind);
						startLine(loc.end);
						break;
					case _GroupPre.GP_CloseBlock:
						endLine(loc.start);
						finishLevels(loc.end, kind);
						break;
					case _GroupPre.GP_Line:
						endLine(loc.start);
						startLine(loc.end);
						break;
					case _GroupPre.GP_Space:
						endAndStart(loc, kind);
						break;
					default:
						throw new Error(kind);
				}
			} else cur.tokens.push(_);
		});

		endLine(endLoc.end);
		(0, _util.assert)((0, _util.isEmpty)(stack));
		cur.loc.end = endLoc.end;
		return cur;
	}

	// TODO
	const showG = function (kind) {
		return kind;
	};
});
//# sourceMappingURL=data:application/json;base64,