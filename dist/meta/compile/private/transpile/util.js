if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', 'esast/dist/specialize', 'esast/dist/util', './ast-constants', './ms-call'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _esastDistSpecialize, _esastDistUtil, _astConstants, _msCall) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _mangleIdentifier = _interopRequire(_esastDistMangleIdentifier);

	var _specialize = _interopRequire(_esastDistSpecialize);

	const accessLocalDeclare = function (localDeclare) {
		return localDeclare.isLazy ? (0, _msCall.msUnlazy)(idForDeclareCached(localDeclare)) : (0, _esastDistAst.Identifier)(idForDeclareCached(localDeclare).name);
	},
	      binaryExpressionNotEqual = (0, _specialize)(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '!==' }),
	      binaryExpressionPlus = (0, _specialize)(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '+' }),
	      declare = function (localDeclare, val) {
		return (0, _esastDistSpecialize.variableDeclarationConst)([(0, _esastDistAst.VariableDeclarator)(idForDeclareCached(localDeclare), val)]);
	},
	     

	// Make declare from a string. This is for compiler-generated temporary locals.
	declareSpecial = function (name, val) {
		return (0, _esastDistSpecialize.variableDeclarationConst)([(0, _esastDistAst.VariableDeclarator)((0, _esastDistUtil.idCached)(name), val)]);
	},
	      idForDeclareCached = function (localDeclare) {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = (0, _esastDistAst.Identifier)((0, _mangleIdentifier)(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      throwError = function (msg) {
		return (0, _esastDistAst.ThrowStatement)((0, _esastDistAst.NewExpression)(_astConstants.IdError, [(0, _esastDistAst.Literal)(msg)]));
	},
	      unaryExpressionNegate = (0, _specialize)(_esastDistAst.UnaryExpression, ['argument', _esastDistAst.Expression], { operator: '-' }),
	      unaryExpressionVoid = (0, _specialize)(_esastDistAst.UnaryExpression, ['argument', _esastDistAst.Expression], { operator: 'void' }),
	      whileStatementInfinite = (0, _specialize)(_esastDistAst.WhileStatement, ['body', _esastDistAst.Statement], { test: (0, _esastDistAst.Literal)(true) });

	exports.accessLocalDeclare = accessLocalDeclare;
	exports.binaryExpressionNotEqual = binaryExpressionNotEqual;
	exports.binaryExpressionPlus = binaryExpressionPlus;
	exports.declare = declare;
	exports.declareSpecial = declareSpecial;
	exports.idForDeclareCached = idForDeclareCached;
	exports.throwError = throwError;
	exports.unaryExpressionNegate = unaryExpressionNegate;
	exports.unaryExpressionVoid = unaryExpressionVoid;
	exports.whileStatementInfinite = whileStatementInfinite;
	const declareToId = new WeakMap();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFRTyxPQUNOLGtCQUFrQixHQUFHLFVBQUEsWUFBWTtTQUNoQyxZQUFZLENBQUMsTUFBTSxHQUNsQixZQUxNLFFBQVEsRUFLTCxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUMxQyxrQkFab0MsVUFBVSxFQVluQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUM7RUFBQTtPQUVuRCx3QkFBd0IsR0FBRywrQkFkbkIsZ0JBQWdCLEVBZXZCLENBQUUsTUFBTSxnQkFmaUIsVUFBVSxFQWViLE9BQU8sZ0JBZkosVUFBVSxDQWVRLEVBQzNDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO09BRXJCLG9CQUFvQixHQUFHLCtCQWxCZixnQkFBZ0IsRUFtQnZCLENBQUUsTUFBTSxnQkFuQmlCLFVBQVUsRUFtQmIsT0FBTyxnQkFuQkosVUFBVSxDQW1CUSxFQUMzQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQztPQUVuQixPQUFPLEdBQUcsVUFBQyxZQUFZLEVBQUUsR0FBRztTQUMzQix5QkFwQm1CLHdCQUF3QixFQW9CbEIsQ0FBRSxrQkF0Qk0sa0JBQWtCLEVBc0JMLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7RUFBQTs7OztBQUd4RixlQUFjLEdBQUcsVUFBQyxJQUFJLEVBQUUsR0FBRztTQUMxQix5QkF4Qm1CLHdCQUF3QixFQXdCbEIsQ0FBRSxrQkExQk0sa0JBQWtCLEVBMEJMLG1CQXZCdkMsUUFBUSxFQXVCd0MsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUUsQ0FBQztFQUFBO09BRXRFLGtCQUFrQixHQUFHLFVBQUEsWUFBWSxFQUFJO0FBQ3BDLE1BQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDckMsTUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ3BCLElBQUMsR0FBRyxrQkFoQ2dDLFVBQVUsRUFnQy9CLHVCQUFpQixZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUNuRCxjQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQTtHQUNoQztBQUNELFNBQU8sQ0FBQyxDQUFBO0VBQ1I7T0FFRCxVQUFVLEdBQUcsVUFBQSxHQUFHO1NBQ2Ysa0JBdENBLGNBQWMsRUFzQ0Msa0JBdkMyQyxhQUFhLGdCQUtoRSxPQUFPLEVBa0N3QixDQUFFLGtCQXZDUyxPQUFPLEVBdUNSLEdBQUcsQ0FBQyxDQUFFLENBQUMsQ0FBQztFQUFBO09BRXpELHFCQUFxQixHQUFHLCtCQXhDUCxlQUFlLEVBeUMvQixDQUFFLFVBQVUsZ0JBMUNhLFVBQVUsQ0EwQ1QsRUFDMUIsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUM7T0FFbkIsbUJBQW1CLEdBQUcsK0JBNUNMLGVBQWUsRUE2Qy9CLENBQUUsVUFBVSxnQkE5Q2EsVUFBVSxDQThDVCxFQUMxQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQztPQUV0QixzQkFBc0IsR0FBRywrQkFoRDZCLGNBQWMsRUFpRG5FLENBQUUsTUFBTSxnQkFsRGlFLFNBQVMsQ0FrRDdELEVBQ3JCLEVBQUUsSUFBSSxFQUFFLGtCQW5EeUMsT0FBTyxFQW1EeEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBOztTQTFDekIsa0JBQWtCLEdBQWxCLGtCQUFrQjtTQUtsQix3QkFBd0IsR0FBeEIsd0JBQXdCO1NBSXhCLG9CQUFvQixHQUFwQixvQkFBb0I7U0FJcEIsT0FBTyxHQUFQLE9BQU87U0FJUCxjQUFjLEdBQWQsY0FBYztTQUdkLGtCQUFrQixHQUFsQixrQkFBa0I7U0FTbEIsVUFBVSxHQUFWLFVBQVU7U0FHVixxQkFBcUIsR0FBckIscUJBQXFCO1NBSXJCLG1CQUFtQixHQUFuQixtQkFBbUI7U0FJbkIsc0JBQXNCLEdBQXRCLHNCQUFzQjtBQUl2QixPQUNDLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFBIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmluYXJ5RXhwcmVzc2lvbiwgRXhwcmVzc2lvbiwgSWRlbnRpZmllciwgTGl0ZXJhbCwgTmV3RXhwcmVzc2lvbiwgU3RhdGVtZW50LFxuXHRcdFRocm93U3RhdGVtZW50LCBVbmFyeUV4cHJlc3Npb24sIFZhcmlhYmxlRGVjbGFyYXRvciwgV2hpbGVTdGF0ZW1lbnQgfSBmcm9tICdlc2FzdC9kaXN0L2FzdCdcbmltcG9ydCBtYW5nbGVJZGVudGlmaWVyIGZyb20gJ2VzYXN0L2Rpc3QvbWFuZ2xlLWlkZW50aWZpZXInXG5pbXBvcnQgc3BlY2lhbGl6ZSwgeyB2YXJpYWJsZURlY2xhcmF0aW9uQ29uc3QgfSBmcm9tICdlc2FzdC9kaXN0L3NwZWNpYWxpemUnXG5pbXBvcnQgeyBpZENhY2hlZCB9IGZyb20gJ2VzYXN0L2Rpc3QvdXRpbCdcbmltcG9ydCB7IElkRXJyb3IgfSBmcm9tICcuL2FzdC1jb25zdGFudHMnXG5pbXBvcnQgeyBtc1VubGF6eSB9IGZyb20gJy4vbXMtY2FsbCdcblxuZXhwb3J0IGNvbnN0XG5cdGFjY2Vzc0xvY2FsRGVjbGFyZSA9IGxvY2FsRGVjbGFyZSA9PlxuXHRcdGxvY2FsRGVjbGFyZS5pc0xhenkgP1xuXHRcdFx0bXNVbmxhenkoaWRGb3JEZWNsYXJlQ2FjaGVkKGxvY2FsRGVjbGFyZSkpIDpcblx0XHRcdElkZW50aWZpZXIoaWRGb3JEZWNsYXJlQ2FjaGVkKGxvY2FsRGVjbGFyZSkubmFtZSksXG5cblx0YmluYXJ5RXhwcmVzc2lvbk5vdEVxdWFsID0gc3BlY2lhbGl6ZShCaW5hcnlFeHByZXNzaW9uLFxuXHRcdFsgJ2xlZnQnLCBFeHByZXNzaW9uLCAncmlnaHQnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBvcGVyYXRvcjogJyE9PScgfSksXG5cblx0YmluYXJ5RXhwcmVzc2lvblBsdXMgPSBzcGVjaWFsaXplKEJpbmFyeUV4cHJlc3Npb24sXG5cdFx0WyAnbGVmdCcsIEV4cHJlc3Npb24sICdyaWdodCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IG9wZXJhdG9yOiAnKycgfSksXG5cblx0ZGVjbGFyZSA9IChsb2NhbERlY2xhcmUsIHZhbCkgPT5cblx0XHR2YXJpYWJsZURlY2xhcmF0aW9uQ29uc3QoWyBWYXJpYWJsZURlY2xhcmF0b3IoaWRGb3JEZWNsYXJlQ2FjaGVkKGxvY2FsRGVjbGFyZSksIHZhbCkgXSksXG5cblx0Ly8gTWFrZSBkZWNsYXJlIGZyb20gYSBzdHJpbmcuIFRoaXMgaXMgZm9yIGNvbXBpbGVyLWdlbmVyYXRlZCB0ZW1wb3JhcnkgbG9jYWxzLlxuXHRkZWNsYXJlU3BlY2lhbCA9IChuYW1lLCB2YWwpID0+XG5cdFx0dmFyaWFibGVEZWNsYXJhdGlvbkNvbnN0KFsgVmFyaWFibGVEZWNsYXJhdG9yKGlkQ2FjaGVkKG5hbWUpLCB2YWwpIF0pLFxuXG5cdGlkRm9yRGVjbGFyZUNhY2hlZCA9IGxvY2FsRGVjbGFyZSA9PiB7XG5cdFx0bGV0IF8gPSBkZWNsYXJlVG9JZC5nZXQobG9jYWxEZWNsYXJlKVxuXHRcdGlmIChfID09PSB1bmRlZmluZWQpIHtcblx0XHRcdF8gPSBJZGVudGlmaWVyKG1hbmdsZUlkZW50aWZpZXIobG9jYWxEZWNsYXJlLm5hbWUpKVxuXHRcdFx0ZGVjbGFyZVRvSWQuc2V0KGxvY2FsRGVjbGFyZSwgXylcblx0XHR9XG5cdFx0cmV0dXJuIF9cblx0fSxcblxuXHR0aHJvd0Vycm9yID0gbXNnID0+XG5cdFx0VGhyb3dTdGF0ZW1lbnQoTmV3RXhwcmVzc2lvbihJZEVycm9yLCBbIExpdGVyYWwobXNnKSBdKSksXG5cblx0dW5hcnlFeHByZXNzaW9uTmVnYXRlID0gc3BlY2lhbGl6ZShVbmFyeUV4cHJlc3Npb24sXG5cdFx0WyAnYXJndW1lbnQnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBvcGVyYXRvcjogJy0nIH0pLFxuXG5cdHVuYXJ5RXhwcmVzc2lvblZvaWQgPSBzcGVjaWFsaXplKFVuYXJ5RXhwcmVzc2lvbixcblx0XHRbICdhcmd1bWVudCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IG9wZXJhdG9yOiAndm9pZCcgfSksXG5cblx0d2hpbGVTdGF0ZW1lbnRJbmZpbml0ZSA9IHNwZWNpYWxpemUoV2hpbGVTdGF0ZW1lbnQsXG5cdFx0WyAnYm9keScsIFN0YXRlbWVudCBdLFxuXHRcdHsgdGVzdDogTGl0ZXJhbCh0cnVlKSB9KVxuXG5jb25zdFxuXHRkZWNsYXJlVG9JZCA9IG5ldyBXZWFrTWFwKClcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9