if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', 'esast/dist/specialize', 'esast/dist/util', './ast-constants', './ms-call'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _esastDistSpecialize, _esastDistUtil, _astConstants, _msCall) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _mangleIdentifier = _interopRequire(_esastDistMangleIdentifier);

	var _specialize = _interopRequire(_esastDistSpecialize);

	const accessLocalDeclare = function (localDeclare) {
		return localDeclare.isLazy() ? (0, _msCall.msUnlazy)(idForDeclareCached(localDeclare)) : (0, _esastDistAst.Identifier)(idForDeclareCached(localDeclare).name);
	},
	      binaryExpressionNotEqual = (0, _specialize)(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '!==' }),
	      binaryExpressionPlus = (0, _specialize)(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '+' }),
	      declare = function (localDeclare, val) {
		return (0, _esastDistSpecialize.variableDeclarationConst)([(0, _esastDistAst.VariableDeclarator)(idForDeclareCached(localDeclare), val)]);
	},
	     

	// Make declare from a string. This is for compiler-generated temporary locals.
	declareSpecial = function (name, val) {
		return (0, _esastDistSpecialize.variableDeclarationConst)([(0, _esastDistAst.VariableDeclarator)((0, _esastDistUtil.idCached)(name), val)]);
	},
	      idForDeclareCached = function (localDeclare) {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = (0, _esastDistAst.Identifier)((0, _mangleIdentifier)(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      throwError = function (msg) {
		return (0, _esastDistAst.ThrowStatement)((0, _esastDistAst.NewExpression)(_astConstants.IdError, [(0, _esastDistAst.Literal)(msg)]));
	},
	      unaryExpressionNegate = (0, _specialize)(_esastDistAst.UnaryExpression, ['argument', _esastDistAst.Expression], { operator: '-' }),
	      unaryExpressionVoid = (0, _specialize)(_esastDistAst.UnaryExpression, ['argument', _esastDistAst.Expression], { operator: 'void' }),
	      whileStatementInfinite = (0, _specialize)(_esastDistAst.WhileStatement, ['body', _esastDistAst.Statement], { test: (0, _esastDistAst.Literal)(true) });

	exports.accessLocalDeclare = accessLocalDeclare;
	exports.binaryExpressionNotEqual = binaryExpressionNotEqual;
	exports.binaryExpressionPlus = binaryExpressionPlus;
	exports.declare = declare;
	exports.declareSpecial = declareSpecial;
	exports.idForDeclareCached = idForDeclareCached;
	exports.throwError = throwError;
	exports.unaryExpressionNegate = unaryExpressionNegate;
	exports.unaryExpressionVoid = unaryExpressionVoid;
	exports.whileStatementInfinite = whileStatementInfinite;
	const declareToId = new WeakMap();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFRTyxPQUNOLGtCQUFrQixHQUFHLFVBQUEsWUFBWTtTQUNoQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQ3BCLFlBTE0sUUFBUSxFQUtMLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQzFDLGtCQVpvQyxVQUFVLEVBWW5DLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQztFQUFBO09BRW5ELHdCQUF3QixHQUFHLCtCQWRuQixnQkFBZ0IsRUFldkIsQ0FBRSxNQUFNLGdCQWZpQixVQUFVLEVBZWIsT0FBTyxnQkFmSixVQUFVLENBZVEsRUFDM0MsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7T0FFckIsb0JBQW9CLEdBQUcsK0JBbEJmLGdCQUFnQixFQW1CdkIsQ0FBRSxNQUFNLGdCQW5CaUIsVUFBVSxFQW1CYixPQUFPLGdCQW5CSixVQUFVLENBbUJRLEVBQzNDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDO09BRW5CLE9BQU8sR0FBRyxVQUFDLFlBQVksRUFBRSxHQUFHO1NBQzNCLHlCQXBCbUIsd0JBQXdCLEVBb0JsQixDQUFFLGtCQXRCTSxrQkFBa0IsRUFzQkwsa0JBQWtCLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUUsQ0FBQztFQUFBOzs7O0FBR3hGLGVBQWMsR0FBRyxVQUFDLElBQUksRUFBRSxHQUFHO1NBQzFCLHlCQXhCbUIsd0JBQXdCLEVBd0JsQixDQUFFLGtCQTFCTSxrQkFBa0IsRUEwQkwsbUJBdkJ2QyxRQUFRLEVBdUJ3QyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBRSxDQUFDO0VBQUE7T0FFdEUsa0JBQWtCLEdBQUcsVUFBQSxZQUFZLEVBQUk7QUFDcEMsTUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUNyQyxNQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7QUFDcEIsSUFBQyxHQUFHLGtCQWhDZ0MsVUFBVSxFQWdDL0IsdUJBQWlCLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ25ELGNBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQ2hDO0FBQ0QsU0FBTyxDQUFDLENBQUE7RUFDUjtPQUVELFVBQVUsR0FBRyxVQUFBLEdBQUc7U0FDZixrQkF0Q0EsY0FBYyxFQXNDQyxrQkF2QzJDLGFBQWEsZ0JBS2hFLE9BQU8sRUFrQ3dCLENBQUUsa0JBdkNTLE9BQU8sRUF1Q1IsR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDO0VBQUE7T0FFekQscUJBQXFCLEdBQUcsK0JBeENQLGVBQWUsRUF5Qy9CLENBQUUsVUFBVSxnQkExQ2EsVUFBVSxDQTBDVCxFQUMxQixFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQztPQUVuQixtQkFBbUIsR0FBRywrQkE1Q0wsZUFBZSxFQTZDL0IsQ0FBRSxVQUFVLGdCQTlDYSxVQUFVLENBOENULEVBQzFCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDO09BRXRCLHNCQUFzQixHQUFHLCtCQWhENkIsY0FBYyxFQWlEbkUsQ0FBRSxNQUFNLGdCQWxEaUUsU0FBUyxDQWtEN0QsRUFDckIsRUFBRSxJQUFJLEVBQUUsa0JBbkR5QyxPQUFPLEVBbUR4QyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7O1NBMUN6QixrQkFBa0IsR0FBbEIsa0JBQWtCO1NBS2xCLHdCQUF3QixHQUF4Qix3QkFBd0I7U0FJeEIsb0JBQW9CLEdBQXBCLG9CQUFvQjtTQUlwQixPQUFPLEdBQVAsT0FBTztTQUlQLGNBQWMsR0FBZCxjQUFjO1NBR2Qsa0JBQWtCLEdBQWxCLGtCQUFrQjtTQVNsQixVQUFVLEdBQVYsVUFBVTtTQUdWLHFCQUFxQixHQUFyQixxQkFBcUI7U0FJckIsbUJBQW1CLEdBQW5CLG1CQUFtQjtTQUluQixzQkFBc0IsR0FBdEIsc0JBQXNCO0FBSXZCLE9BQ0MsV0FBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUEiLCJmaWxlIjoibWV0YS9jb21waWxlL3ByaXZhdGUvdHJhbnNwaWxlL3V0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaW5hcnlFeHByZXNzaW9uLCBFeHByZXNzaW9uLCBJZGVudGlmaWVyLCBMaXRlcmFsLCBOZXdFeHByZXNzaW9uLCBTdGF0ZW1lbnQsXG5cdFx0VGhyb3dTdGF0ZW1lbnQsIFVuYXJ5RXhwcmVzc2lvbiwgVmFyaWFibGVEZWNsYXJhdG9yLCBXaGlsZVN0YXRlbWVudCB9IGZyb20gJ2VzYXN0L2Rpc3QvYXN0J1xuaW1wb3J0IG1hbmdsZUlkZW50aWZpZXIgZnJvbSAnZXNhc3QvZGlzdC9tYW5nbGUtaWRlbnRpZmllcidcbmltcG9ydCBzcGVjaWFsaXplLCB7IHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdCB9IGZyb20gJ2VzYXN0L2Rpc3Qvc3BlY2lhbGl6ZSdcbmltcG9ydCB7IGlkQ2FjaGVkIH0gZnJvbSAnZXNhc3QvZGlzdC91dGlsJ1xuaW1wb3J0IHsgSWRFcnJvciB9IGZyb20gJy4vYXN0LWNvbnN0YW50cydcbmltcG9ydCB7IG1zVW5sYXp5IH0gZnJvbSAnLi9tcy1jYWxsJ1xuXG5leHBvcnQgY29uc3Rcblx0YWNjZXNzTG9jYWxEZWNsYXJlID0gbG9jYWxEZWNsYXJlID0+XG5cdFx0bG9jYWxEZWNsYXJlLmlzTGF6eSgpID9cblx0XHRcdG1zVW5sYXp5KGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpKSA6XG5cdFx0XHRJZGVudGlmaWVyKGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpLm5hbWUpLFxuXG5cdGJpbmFyeUV4cHJlc3Npb25Ob3RFcXVhbCA9IHNwZWNpYWxpemUoQmluYXJ5RXhwcmVzc2lvbixcblx0XHRbICdsZWZ0JywgRXhwcmVzc2lvbiwgJ3JpZ2h0JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgb3BlcmF0b3I6ICchPT0nIH0pLFxuXG5cdGJpbmFyeUV4cHJlc3Npb25QbHVzID0gc3BlY2lhbGl6ZShCaW5hcnlFeHByZXNzaW9uLFxuXHRcdFsgJ2xlZnQnLCBFeHByZXNzaW9uLCAncmlnaHQnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBvcGVyYXRvcjogJysnIH0pLFxuXG5cdGRlY2xhcmUgPSAobG9jYWxEZWNsYXJlLCB2YWwpID0+XG5cdFx0dmFyaWFibGVEZWNsYXJhdGlvbkNvbnN0KFsgVmFyaWFibGVEZWNsYXJhdG9yKGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpLCB2YWwpIF0pLFxuXG5cdC8vIE1ha2UgZGVjbGFyZSBmcm9tIGEgc3RyaW5nLiBUaGlzIGlzIGZvciBjb21waWxlci1nZW5lcmF0ZWQgdGVtcG9yYXJ5IGxvY2Fscy5cblx0ZGVjbGFyZVNwZWNpYWwgPSAobmFtZSwgdmFsKSA9PlxuXHRcdHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdChbIFZhcmlhYmxlRGVjbGFyYXRvcihpZENhY2hlZChuYW1lKSwgdmFsKSBdKSxcblxuXHRpZEZvckRlY2xhcmVDYWNoZWQgPSBsb2NhbERlY2xhcmUgPT4ge1xuXHRcdGxldCBfID0gZGVjbGFyZVRvSWQuZ2V0KGxvY2FsRGVjbGFyZSlcblx0XHRpZiAoXyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfID0gSWRlbnRpZmllcihtYW5nbGVJZGVudGlmaWVyKGxvY2FsRGVjbGFyZS5uYW1lKSlcblx0XHRcdGRlY2xhcmVUb0lkLnNldChsb2NhbERlY2xhcmUsIF8pXG5cdFx0fVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0dGhyb3dFcnJvciA9IG1zZyA9PlxuXHRcdFRocm93U3RhdGVtZW50KE5ld0V4cHJlc3Npb24oSWRFcnJvciwgWyBMaXRlcmFsKG1zZykgXSkpLFxuXG5cdHVuYXJ5RXhwcmVzc2lvbk5lZ2F0ZSA9IHNwZWNpYWxpemUoVW5hcnlFeHByZXNzaW9uLFxuXHRcdFsgJ2FyZ3VtZW50JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgb3BlcmF0b3I6ICctJyB9KSxcblxuXHR1bmFyeUV4cHJlc3Npb25Wb2lkID0gc3BlY2lhbGl6ZShVbmFyeUV4cHJlc3Npb24sXG5cdFx0WyAnYXJndW1lbnQnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBvcGVyYXRvcjogJ3ZvaWQnIH0pLFxuXG5cdHdoaWxlU3RhdGVtZW50SW5maW5pdGUgPSBzcGVjaWFsaXplKFdoaWxlU3RhdGVtZW50LFxuXHRcdFsgJ2JvZHknLCBTdGF0ZW1lbnQgXSxcblx0XHR7IHRlc3Q6IExpdGVyYWwodHJ1ZSkgfSlcblxuY29uc3Rcblx0ZGVjbGFyZVRvSWQgPSBuZXcgV2Vha01hcCgpXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==