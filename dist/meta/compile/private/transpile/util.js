if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', 'esast/dist/specialize', 'esast/dist/util', './ast-constants', './ms-call'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _esastDistSpecialize, _esastDistUtil, _astConstants, _msCall) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _mangleIdentifier = _interopRequire(_esastDistMangleIdentifier);

	var _specialize = _interopRequire(_esastDistSpecialize);

	const accessLocalDeclare = function (localDeclare) {
		return localDeclare.isLazy ? (0, _msCall.msUnlazy)(idForDeclareCached(localDeclare)) : (0, _esastDistAst.Identifier)(idForDeclareCached(localDeclare).name);
	},
	      binaryExpressionNotEqual = (0, _specialize)(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '!==' }),
	      binaryExpressionPlus = (0, _specialize)(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '+' }),
	      declare = function (localDeclare, val) {
		return (0, _esastDistSpecialize.variableDeclarationConst)([(0, _esastDistAst.VariableDeclarator)(idForDeclareCached(localDeclare), val)]);
	},
	     

	// Make declare from a string. This is for compiler-generated temporary locals.
	declareSpecial = function (name, val) {
		return (0, _esastDistSpecialize.variableDeclarationConst)([(0, _esastDistAst.VariableDeclarator)((0, _esastDistUtil.idCached)(name), val)]);
	},
	      idForDeclareCached = function (localDeclare) {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = (0, _esastDistAst.Identifier)((0, _mangleIdentifier)(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      throwError = function (msg) {
		return (0, _esastDistAst.ThrowStatement)((0, _esastDistAst.NewExpression)(_astConstants.IdError, [(0, _esastDistAst.Literal)(msg)]));
	},
	      unaryExpressionNegate = (0, _specialize)(_esastDistAst.UnaryExpression, ['argument', _esastDistAst.Expression], { operator: '-' }),
	      whileStatementInfinite = (0, _specialize)(_esastDistAst.WhileStatement, ['body', _esastDistAst.Statement], { test: (0, _esastDistAst.Literal)(true) });

	exports.accessLocalDeclare = accessLocalDeclare;
	exports.binaryExpressionNotEqual = binaryExpressionNotEqual;
	exports.binaryExpressionPlus = binaryExpressionPlus;
	exports.declare = declare;
	exports.declareSpecial = declareSpecial;
	exports.idForDeclareCached = idForDeclareCached;
	exports.throwError = throwError;
	exports.unaryExpressionNegate = unaryExpressionNegate;
	exports.whileStatementInfinite = whileStatementInfinite;
	const declareToId = new WeakMap();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFRTyxPQUNOLGtCQUFrQixHQUFHLFVBQUEsWUFBWTtTQUNoQyxZQUFZLENBQUMsTUFBTSxHQUNsQixZQUxNLFFBQVEsRUFLTCxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUMxQyxrQkFab0MsVUFBVSxFQVluQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUM7RUFBQTtPQUVuRCx3QkFBd0IsR0FBRywrQkFkbkIsZ0JBQWdCLEVBZXZCLENBQUUsTUFBTSxnQkFmaUIsVUFBVSxFQWViLE9BQU8sZ0JBZkosVUFBVSxDQWVRLEVBQzNDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO09BRXJCLG9CQUFvQixHQUFHLCtCQWxCZixnQkFBZ0IsRUFtQnZCLENBQUUsTUFBTSxnQkFuQmlCLFVBQVUsRUFtQmIsT0FBTyxnQkFuQkosVUFBVSxDQW1CUSxFQUMzQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQztPQUVuQixPQUFPLEdBQUcsVUFBQyxZQUFZLEVBQUUsR0FBRztTQUMzQix5QkFwQm1CLHdCQUF3QixFQW9CbEIsQ0FBRSxrQkF0Qk0sa0JBQWtCLEVBc0JMLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7RUFBQTs7OztBQUd4RixlQUFjLEdBQUcsVUFBQyxJQUFJLEVBQUUsR0FBRztTQUMxQix5QkF4Qm1CLHdCQUF3QixFQXdCbEIsQ0FBRSxrQkExQk0sa0JBQWtCLEVBMEJMLG1CQXZCdkMsUUFBUSxFQXVCd0MsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUUsQ0FBQztFQUFBO09BRXRFLGtCQUFrQixHQUFHLFVBQUEsWUFBWSxFQUFJO0FBQ3BDLE1BQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDckMsTUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ3BCLElBQUMsR0FBRyxrQkFoQ2dDLFVBQVUsRUFnQy9CLHVCQUFpQixZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUNuRCxjQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQTtHQUNoQztBQUNELFNBQU8sQ0FBQyxDQUFBO0VBQ1I7T0FFRCxVQUFVLEdBQUcsVUFBQSxHQUFHO1NBQ2Ysa0JBdENBLGNBQWMsRUFzQ0Msa0JBdkMyQyxhQUFhLGdCQUtoRSxPQUFPLEVBa0N3QixDQUFFLGtCQXZDUyxPQUFPLEVBdUNSLEdBQUcsQ0FBQyxDQUFFLENBQUMsQ0FBQztFQUFBO09BRXpELHFCQUFxQixHQUFHLCtCQXhDUCxlQUFlLEVBeUMvQixDQUFFLFVBQVUsZ0JBMUNhLFVBQVUsQ0EwQ1QsRUFDMUIsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUM7T0FFbkIsc0JBQXNCLEdBQUcsK0JBNUM2QixjQUFjLEVBNkNuRSxDQUFFLE1BQU0sZ0JBOUNpRSxTQUFTLENBOEM3RCxFQUNyQixFQUFFLElBQUksRUFBRSxrQkEvQ3lDLE9BQU8sRUErQ3hDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTs7U0F0Q3pCLGtCQUFrQixHQUFsQixrQkFBa0I7U0FLbEIsd0JBQXdCLEdBQXhCLHdCQUF3QjtTQUl4QixvQkFBb0IsR0FBcEIsb0JBQW9CO1NBSXBCLE9BQU8sR0FBUCxPQUFPO1NBSVAsY0FBYyxHQUFkLGNBQWM7U0FHZCxrQkFBa0IsR0FBbEIsa0JBQWtCO1NBU2xCLFVBQVUsR0FBVixVQUFVO1NBR1YscUJBQXFCLEdBQXJCLHFCQUFxQjtTQUlyQixzQkFBc0IsR0FBdEIsc0JBQXNCO0FBSXZCLE9BQ0MsV0FBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUEiLCJmaWxlIjoibWV0YS9jb21waWxlL3ByaXZhdGUvdHJhbnNwaWxlL3V0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaW5hcnlFeHByZXNzaW9uLCBFeHByZXNzaW9uLCBJZGVudGlmaWVyLCBMaXRlcmFsLCBOZXdFeHByZXNzaW9uLCBTdGF0ZW1lbnQsXG5cdFx0VGhyb3dTdGF0ZW1lbnQsIFVuYXJ5RXhwcmVzc2lvbiwgVmFyaWFibGVEZWNsYXJhdG9yLCBXaGlsZVN0YXRlbWVudCB9IGZyb20gJ2VzYXN0L2Rpc3QvYXN0J1xuaW1wb3J0IG1hbmdsZUlkZW50aWZpZXIgZnJvbSAnZXNhc3QvZGlzdC9tYW5nbGUtaWRlbnRpZmllcidcbmltcG9ydCBzcGVjaWFsaXplLCB7IHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdCB9IGZyb20gJ2VzYXN0L2Rpc3Qvc3BlY2lhbGl6ZSdcbmltcG9ydCB7IGlkQ2FjaGVkIH0gZnJvbSAnZXNhc3QvZGlzdC91dGlsJ1xuaW1wb3J0IHsgSWRFcnJvciB9IGZyb20gJy4vYXN0LWNvbnN0YW50cydcbmltcG9ydCB7IG1zVW5sYXp5IH0gZnJvbSAnLi9tcy1jYWxsJ1xuXG5leHBvcnQgY29uc3Rcblx0YWNjZXNzTG9jYWxEZWNsYXJlID0gbG9jYWxEZWNsYXJlID0+XG5cdFx0bG9jYWxEZWNsYXJlLmlzTGF6eSA/XG5cdFx0XHRtc1VubGF6eShpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKSkgOlxuXHRcdFx0SWRlbnRpZmllcihpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKS5uYW1lKSxcblxuXHRiaW5hcnlFeHByZXNzaW9uTm90RXF1YWwgPSBzcGVjaWFsaXplKEJpbmFyeUV4cHJlc3Npb24sXG5cdFx0WyAnbGVmdCcsIEV4cHJlc3Npb24sICdyaWdodCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IG9wZXJhdG9yOiAnIT09JyB9KSxcblxuXHRiaW5hcnlFeHByZXNzaW9uUGx1cyA9IHNwZWNpYWxpemUoQmluYXJ5RXhwcmVzc2lvbixcblx0XHRbICdsZWZ0JywgRXhwcmVzc2lvbiwgJ3JpZ2h0JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgb3BlcmF0b3I6ICcrJyB9KSxcblxuXHRkZWNsYXJlID0gKGxvY2FsRGVjbGFyZSwgdmFsKSA9PlxuXHRcdHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdChbIFZhcmlhYmxlRGVjbGFyYXRvcihpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKSwgdmFsKSBdKSxcblxuXHQvLyBNYWtlIGRlY2xhcmUgZnJvbSBhIHN0cmluZy4gVGhpcyBpcyBmb3IgY29tcGlsZXItZ2VuZXJhdGVkIHRlbXBvcmFyeSBsb2NhbHMuXG5cdGRlY2xhcmVTcGVjaWFsID0gKG5hbWUsIHZhbCkgPT5cblx0XHR2YXJpYWJsZURlY2xhcmF0aW9uQ29uc3QoWyBWYXJpYWJsZURlY2xhcmF0b3IoaWRDYWNoZWQobmFtZSksIHZhbCkgXSksXG5cblx0aWRGb3JEZWNsYXJlQ2FjaGVkID0gbG9jYWxEZWNsYXJlID0+IHtcblx0XHRsZXQgXyA9IGRlY2xhcmVUb0lkLmdldChsb2NhbERlY2xhcmUpXG5cdFx0aWYgKF8gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XyA9IElkZW50aWZpZXIobWFuZ2xlSWRlbnRpZmllcihsb2NhbERlY2xhcmUubmFtZSkpXG5cdFx0XHRkZWNsYXJlVG9JZC5zZXQobG9jYWxEZWNsYXJlLCBfKVxuXHRcdH1cblx0XHRyZXR1cm4gX1xuXHR9LFxuXG5cdHRocm93RXJyb3IgPSBtc2cgPT5cblx0XHRUaHJvd1N0YXRlbWVudChOZXdFeHByZXNzaW9uKElkRXJyb3IsIFsgTGl0ZXJhbChtc2cpIF0pKSxcblxuXHR1bmFyeUV4cHJlc3Npb25OZWdhdGUgPSBzcGVjaWFsaXplKFVuYXJ5RXhwcmVzc2lvbixcblx0XHRbICdhcmd1bWVudCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IG9wZXJhdG9yOiAnLScgfSksXG5cblx0d2hpbGVTdGF0ZW1lbnRJbmZpbml0ZSA9IHNwZWNpYWxpemUoV2hpbGVTdGF0ZW1lbnQsXG5cdFx0WyAnYm9keScsIFN0YXRlbWVudCBdLFxuXHRcdHsgdGVzdDogTGl0ZXJhbCh0cnVlKSB9KVxuXG5jb25zdFxuXHRkZWNsYXJlVG9JZCA9IG5ldyBXZWFrTWFwKClcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9