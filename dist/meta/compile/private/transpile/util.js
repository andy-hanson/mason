if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', 'esast/dist/specialize', '../util', './ms-call', './transpile'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _esastDistSpecialize, _util, _msCall, _transpile) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mangleIdentifier = _interopRequireDefault(_esastDistMangleIdentifier);

	var _specialize = _interopRequireDefault(_esastDistSpecialize);

	// Define this here to avoid circular dependency with ast-constants.
	const _IdError = (0, _esastDistAst.Identifier)('Error');

	exports._IdError = _IdError;
	const accessLocalDeclare = localDeclare => localDeclare.isLazy() ? (0, _msCall.msUnlazy)(idForDeclareCached(localDeclare)) : (0, _esastDistAst.Identifier)(idForDeclareCached(localDeclare).name),
	      declare = (localDeclare, val) => (0, _esastDistSpecialize.variableDeclarationConst)([(0, _esastDistAst.VariableDeclarator)(idForDeclareCached(localDeclare), val)]),
	      forStatementInfinite = (0, _specialize.default)(_esastDistAst.ForStatement, ['body', _esastDistAst.Statement], { init: null, test: null, update: null }),
	      idForDeclareCached = localDeclare => {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = (0, _esastDistAst.Identifier)((0, _mangleIdentifier.default)(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      opTypeCheckForLocalDeclare = localDeclare =>
	// TODO: Way to typecheck lazies
	(0, _util.opIf)(!localDeclare.isLazy(), () => (0, _util.opMap)(localDeclare.opType, type => (0, _esastDistAst.ExpressionStatement)((0, _msCall.msCheckContains)((0, _transpile.t0)(type), accessLocalDeclare(localDeclare), (0, _esastDistAst.Literal)(localDeclare.name))))),
	      throwErrorFromString = msg => (0, _esastDistAst.ThrowStatement)((0, _esastDistAst.NewExpression)(_IdError, [(0, _esastDistAst.Literal)(msg)])),
	      templateElementForString = str => (0, _esastDistAst.TemplateElement)(false, { cooked: str, raw: strEscapeForTemplate(str) });

	exports.accessLocalDeclare = accessLocalDeclare;
	exports.declare = declare;
	exports.forStatementInfinite = forStatementInfinite;
	exports.idForDeclareCached = idForDeclareCached;
	exports.opTypeCheckForLocalDeclare = opTypeCheckForLocalDeclare;
	exports.throwErrorFromString = throwErrorFromString;
	exports.templateElementForString = templateElementForString;
	const declareToId = new WeakMap(),
	      strEscapeForTemplate = str => str.replace(/[\\`\n\t\b\f\v\r\u2028\u2029]/g, ch => _strEscapes[ch]),
	      _strEscapes = {
		'`': '\\`',
		'\\': '\\\\',
		'\n': '\\n',
		'\t': '\\t',
		'\b': '\\b',
		'\f': '\\f',
		'\u000b': '\\v',
		'\r': '\\r',
		'\u2028': '\\u2028',
		'\u2029': '\\u2029'
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBU08sT0FBTSxRQUFRLEdBQUcsa0JBVG9CLFVBQVUsRUFTbkIsT0FBTyxDQUFDLENBQUE7O1NBQTlCLFFBQVEsR0FBUixRQUFRO0FBRWQsT0FDTixrQkFBa0IsR0FBRyxZQUFZLElBQ2hDLFlBQVksQ0FBQyxNQUFNLEVBQUUsR0FDcEIsWUFUdUIsUUFBUSxFQVN0QixrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUMxQyxrQkFmeUMsVUFBVSxFQWV4QyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUM7T0FFbkQsT0FBTyxHQUFHLENBQUMsWUFBWSxFQUFFLEdBQUcsS0FDM0IseUJBZm1CLHdCQUF3QixFQWVsQixDQUFFLGtCQWpCSyxrQkFBa0IsRUFpQkosa0JBQWtCLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUUsQ0FBQztPQUV4RixvQkFBb0IsR0FBRyx1Q0FwQk0sWUFBWSxFQXFCeEMsQ0FBRSxNQUFNLGdCQXJCc0UsU0FBUyxDQXFCbEUsRUFDckIsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO09BRTFDLGtCQUFrQixHQUFHLFlBQVksSUFBSTtBQUNwQyxNQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ3JDLE1BQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtBQUNwQixJQUFDLEdBQUcsa0JBM0JxQyxVQUFVLEVBMkJwQywrQkFBaUIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDbkQsY0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDaEM7QUFDRCxTQUFPLENBQUMsQ0FBQTtFQUNSO09BRUQsMEJBQTBCLEdBQUcsWUFBWTs7QUFFeEMsV0EvQk8sSUFBSSxFQStCTixDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUM1QixVQWhDWSxLQUFLLEVBZ0NYLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUM5QixrQkFyQ0ssbUJBQW1CLEVBcUNKLFlBaENmLGVBQWUsRUFpQ25CLGVBaENJLEVBQUUsRUFnQ0gsSUFBSSxDQUFDLEVBQ1Isa0JBQWtCLENBQUMsWUFBWSxDQUFDLEVBQ2hDLGtCQXhDbUQsT0FBTyxFQXdDbEQsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BRWxDLG9CQUFvQixHQUFHLEdBQUcsSUFDekIsa0JBMUNnQixjQUFjLEVBMENmLGtCQTNDZ0QsYUFBYSxFQTJDL0MsUUFBUSxFQUFFLENBQUUsa0JBM0NhLE9BQU8sRUEyQ1osR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDO09BRTFELHdCQUF3QixHQUFHLEdBQUcsSUFDN0Isa0JBN0NELGVBQWUsRUE2Q0UsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBOztTQWxDeEUsa0JBQWtCLEdBQWxCLGtCQUFrQjtTQUtsQixPQUFPLEdBQVAsT0FBTztTQUdQLG9CQUFvQixHQUFwQixvQkFBb0I7U0FJcEIsa0JBQWtCLEdBQWxCLGtCQUFrQjtTQVNsQiwwQkFBMEIsR0FBMUIsMEJBQTBCO1NBUzFCLG9CQUFvQixHQUFwQixvQkFBb0I7U0FHcEIsd0JBQXdCLEdBQXhCLHdCQUF3QjtBQUd6QixPQUNDLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRTtPQUUzQixvQkFBb0IsR0FBRyxHQUFHLElBQ3pCLEdBQUcsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLEVBQUUsRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztPQUNyRSxXQUFXLEdBQUc7QUFDYixLQUFHLEVBQUUsS0FBSztBQUNWLE1BQUksRUFBRSxNQUFNO0FBQ1osTUFBSSxFQUFFLEtBQUs7QUFDWCxNQUFJLEVBQUUsS0FBSztBQUNYLE1BQUksRUFBRSxLQUFLO0FBQ1gsTUFBSSxFQUFFLEtBQUs7QUFDWCxVQUFJLEVBQUUsS0FBSztBQUNYLE1BQUksRUFBRSxLQUFLO0FBQ1gsVUFBUSxFQUFFLFNBQVM7QUFDbkIsVUFBUSxFQUFFLFNBQVM7RUFDbkIsQ0FBQSIsImZpbGUiOiJtZXRhL2NvbXBpbGUvcHJpdmF0ZS90cmFuc3BpbGUvdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3Npb25TdGF0ZW1lbnQsIEZvclN0YXRlbWVudCwgSWRlbnRpZmllciwgTGl0ZXJhbCwgTmV3RXhwcmVzc2lvbiwgU3RhdGVtZW50LFxuXHRUZW1wbGF0ZUVsZW1lbnQsIFRocm93U3RhdGVtZW50LCBWYXJpYWJsZURlY2xhcmF0b3IgfSBmcm9tICdlc2FzdC9kaXN0L2FzdCdcbmltcG9ydCBtYW5nbGVJZGVudGlmaWVyIGZyb20gJ2VzYXN0L2Rpc3QvbWFuZ2xlLWlkZW50aWZpZXInXG5pbXBvcnQgc3BlY2lhbGl6ZSwgeyB2YXJpYWJsZURlY2xhcmF0aW9uQ29uc3QgfSBmcm9tICdlc2FzdC9kaXN0L3NwZWNpYWxpemUnXG5pbXBvcnQgeyBvcElmLCBvcE1hcCB9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBtc0NoZWNrQ29udGFpbnMsIG1zVW5sYXp5IH0gZnJvbSAnLi9tcy1jYWxsJ1xuaW1wb3J0IHsgdDAgfSBmcm9tICcuL3RyYW5zcGlsZSdcblxuLy8gRGVmaW5lIHRoaXMgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5IHdpdGggYXN0LWNvbnN0YW50cy5cbmV4cG9ydCBjb25zdCBfSWRFcnJvciA9IElkZW50aWZpZXIoJ0Vycm9yJylcblxuZXhwb3J0IGNvbnN0XG5cdGFjY2Vzc0xvY2FsRGVjbGFyZSA9IGxvY2FsRGVjbGFyZSA9PlxuXHRcdGxvY2FsRGVjbGFyZS5pc0xhenkoKSA/XG5cdFx0XHRtc1VubGF6eShpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKSkgOlxuXHRcdFx0SWRlbnRpZmllcihpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKS5uYW1lKSxcblxuXHRkZWNsYXJlID0gKGxvY2FsRGVjbGFyZSwgdmFsKSA9PlxuXHRcdHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdChbIFZhcmlhYmxlRGVjbGFyYXRvcihpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKSwgdmFsKSBdKSxcblxuXHRmb3JTdGF0ZW1lbnRJbmZpbml0ZSA9IHNwZWNpYWxpemUoRm9yU3RhdGVtZW50LFxuXHRcdFsgJ2JvZHknLCBTdGF0ZW1lbnQgXSxcblx0XHR7IGluaXQ6IG51bGwsIHRlc3Q6IG51bGwsIHVwZGF0ZTogbnVsbCB9KSxcblxuXHRpZEZvckRlY2xhcmVDYWNoZWQgPSBsb2NhbERlY2xhcmUgPT4ge1xuXHRcdGxldCBfID0gZGVjbGFyZVRvSWQuZ2V0KGxvY2FsRGVjbGFyZSlcblx0XHRpZiAoXyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfID0gSWRlbnRpZmllcihtYW5nbGVJZGVudGlmaWVyKGxvY2FsRGVjbGFyZS5uYW1lKSlcblx0XHRcdGRlY2xhcmVUb0lkLnNldChsb2NhbERlY2xhcmUsIF8pXG5cdFx0fVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0b3BUeXBlQ2hlY2tGb3JMb2NhbERlY2xhcmUgPSBsb2NhbERlY2xhcmUgPT5cblx0XHQvLyBUT0RPOiBXYXkgdG8gdHlwZWNoZWNrIGxhemllc1xuXHRcdG9wSWYoIWxvY2FsRGVjbGFyZS5pc0xhenkoKSwgKCkgPT5cblx0XHRcdG9wTWFwKGxvY2FsRGVjbGFyZS5vcFR5cGUsIHR5cGUgPT5cblx0XHRcdFx0RXhwcmVzc2lvblN0YXRlbWVudChtc0NoZWNrQ29udGFpbnMoXG5cdFx0XHRcdFx0dDAodHlwZSksXG5cdFx0XHRcdFx0YWNjZXNzTG9jYWxEZWNsYXJlKGxvY2FsRGVjbGFyZSksXG5cdFx0XHRcdFx0TGl0ZXJhbChsb2NhbERlY2xhcmUubmFtZSkpKSkpLFxuXG5cdHRocm93RXJyb3JGcm9tU3RyaW5nID0gbXNnID0+XG5cdFx0VGhyb3dTdGF0ZW1lbnQoTmV3RXhwcmVzc2lvbihfSWRFcnJvciwgWyBMaXRlcmFsKG1zZykgXSkpLFxuXG5cdHRlbXBsYXRlRWxlbWVudEZvclN0cmluZyA9IHN0ciA9PlxuXHRcdFRlbXBsYXRlRWxlbWVudChmYWxzZSwgeyBjb29rZWQ6IHN0ciwgcmF3OiBzdHJFc2NhcGVGb3JUZW1wbGF0ZShzdHIpIH0pXG5cbmNvbnN0XG5cdGRlY2xhcmVUb0lkID0gbmV3IFdlYWtNYXAoKSxcblxuXHRzdHJFc2NhcGVGb3JUZW1wbGF0ZSA9IHN0ciA9PlxuXHRcdHN0ci5yZXBsYWNlKC9bXFxcXGBcXG5cXHRcXGJcXGZcXHZcXHJcXHUyMDI4XFx1MjAyOV0vZywgY2ggPT4gX3N0ckVzY2FwZXNbY2hdKSxcblx0X3N0ckVzY2FwZXMgPSB7XG5cdFx0J2AnOiAnXFxcXGAnLFxuXHRcdCdcXFxcJzogJ1xcXFxcXFxcJyxcblx0XHQnXFxuJzogJ1xcXFxuJyxcblx0XHQnXFx0JzogJ1xcXFx0Jyxcblx0XHQnXFxiJzogJ1xcXFxiJyxcblx0XHQnXFxmJzogJ1xcXFxmJyxcblx0XHQnXFx2JzogJ1xcXFx2Jyxcblx0XHQnXFxyJzogJ1xcXFxyJyxcblx0XHQnXFx1MjAyOCc6ICdcXFxcdTIwMjgnLFxuXHRcdCdcXHUyMDI5JzogJ1xcXFx1MjAyOSdcblx0fVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=