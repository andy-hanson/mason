if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/util', 'esast/dist/specialize', '../U/Bag', '../U/Op', '../U/util', './transpile', './util'], function (exports, _esastDistAst, _esastDistUtil, _esastDistSpecialize, _UBag, _UOp, _UUtil, _transpile, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	const transpileObjReturn = function (_, cx) {
		const nonDebugKeys = _.keys;
		// TODO: includeTypeChecks() is not the right method for this
		const keys = cx.opts.includeTypeChecks() ? _.keys.concat(_.debugKeys) : _.keys;
		// Make compilation deterministic.
		keys.sort();

		return _UOp.ifElse(_.opObjed, function (objed) {
			const astObjed = _transpile.t0(objed);
			if (_UBag.isEmpty(keys)) {
				_UUtil.assert(_UBag.isEmpty(nonDebugKeys));
				return astObjed;
			} else {
				const keysVals = _UBag.cat(_UBag.flatMap(keys, function (key) {
					return [_esastDistAst.Literal(key.name), _util.accessLocalDeclare(key)];
				}), _UBag.flatMap(_.opDisplayName, function (dn) {
					return [_util.LitStrDisplayName, _esastDistAst.Literal(dn)];
				}));
				const anyLazy = keys.some(function (key) {
					return key.isLazy;
				});
				return (anyLazy ? _util.msLset : _util.msSet).apply(undefined, [astObjed].concat(_toConsumableArray(keysVals)));
			}
		}, function () {
			_UUtil.assert(!_UBag.isEmpty(keys));
			const props = keys.map(function (key) {
				const val = _util.accessLocalDeclare(key);
				const id = _esastDistUtil.propertyIdOrLiteralCached(key.name);
				return key.isLazy ? _esastDistSpecialize.property('get', id, _esastDistUtil.thunk(val)) : _esastDistSpecialize.property('init', id, val);
			});
			const opPropDisplayName = _.opDisplayName.map(function (dn) {
				return _esastDistSpecialize.property('init', _util.IdDisplayName, _esastDistAst.Literal(dn));
			});
			return _esastDistAst.ObjectExpression(_UBag.cat(props, opPropDisplayName));
		});
	};
	exports.transpileObjReturn = transpileObjReturn;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS90cmFuc3BpbGVPYmouanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBU08sT0FDTixrQkFBa0IsR0FBRyxVQUFDLENBQUMsRUFBRSxFQUFFLEVBQUs7QUFDL0IsUUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQTs7QUFFM0IsUUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFBOztBQUU5RSxNQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7O0FBRVgsU0FBTyxLQWJBLE1BQU0sQ0FhQyxDQUFDLENBQUMsT0FBTyxFQUN0QixVQUFBLEtBQUssRUFBSTtBQUNSLFNBQU0sUUFBUSxHQUFHLFdBYlosRUFBRSxDQWFhLEtBQUssQ0FBQyxDQUFBO0FBQzFCLE9BQUksTUFqQmUsT0FBTyxDQWlCZCxJQUFJLENBQUMsRUFBRTtBQUNsQixXQWhCSSxNQUFNLENBZ0JILE1BbEJXLE9BQU8sQ0FrQlYsWUFBWSxDQUFDLENBQUMsQ0FBQTtBQUM3QixXQUFPLFFBQVEsQ0FBQTtJQUNmLE1BQU07QUFDTixVQUFNLFFBQVEsR0FBRyxNQXJCYixHQUFHLENBc0JOLE1BdEJRLE9BQU8sQ0FzQlAsSUFBSSxFQUFFLFVBQUEsR0FBRztZQUFJLENBQUUsY0F6QnBCLE9BQU8sQ0F5QnFCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQWxCdkMsa0JBQWtCLENBa0J3QyxHQUFHLENBQUMsQ0FBRTtLQUFBLENBQUMsRUFDcEUsTUF2QlEsT0FBTyxDQXVCUCxDQUFDLENBQUMsYUFBYSxFQUFFLFVBQUEsRUFBRTtZQUFJLE9BbkJzQixpQkFBaUIsRUFtQm5CLGNBMUJoRCxPQUFPLENBMEJpRCxFQUFFLENBQUMsQ0FBQztLQUFBLENBQUMsQ0FBQyxDQUFBO0FBQ2xFLFVBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHO1lBQUksR0FBRyxDQUFDLE1BQU07S0FBQSxDQUFDLENBQUE7QUFDNUMsV0FBTyxDQUFDLE9BQU8sU0FyQlMsTUFBTSxTQUFFLEtBQUssQ0FxQkwsbUJBQUUsUUFBUSw0QkFBSyxRQUFRLEdBQUMsQ0FBQTtJQUN4RDtHQUNELEVBQ0QsWUFBTTtBQUNMLFVBM0JLLE1BQU0sQ0EyQkosQ0FBQyxNQTdCVyxPQUFPLENBNkJWLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDdEIsU0FBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsRUFBSTtBQUM3QixVQUFNLEdBQUcsR0FBRyxNQTNCUixrQkFBa0IsQ0EyQlMsR0FBRyxDQUFDLENBQUE7QUFDbkMsVUFBTSxFQUFFLEdBQUcsZUFsQ1AseUJBQXlCLENBa0NRLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM5QyxXQUFPLEdBQUcsQ0FBQyxNQUFNLEdBQ2hCLHFCQW5DRyxRQUFRLENBbUNGLEtBQUssRUFBRSxFQUFFLEVBQUUsZUFwQ1UsS0FBSyxDQW9DVCxHQUFHLENBQUMsQ0FBQyxHQUMvQixxQkFwQ0csUUFBUSxDQW9DRixNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLENBQUMsQ0FBQTtBQUNGLFNBQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBQSxFQUFFO1dBQy9DLHFCQXZDSSxRQUFRLENBdUNILE1BQU0sUUFsQ3dCLGFBQWEsRUFrQ3BCLGNBekM1QixPQUFPLENBeUM2QixFQUFFLENBQUMsQ0FBQztJQUFBLENBQUMsQ0FBQTtBQUM5QyxVQUFPLGNBMUNPLGdCQUFnQixDQTBDTixNQXZDbkIsR0FBRyxDQXVDb0IsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQTtHQUN0RCxDQUFDLENBQUE7RUFDSCxDQUFBO1NBbENELGtCQUFrQixHQUFsQixrQkFBa0IiLCJmaWxlIjoibWV0YS9jb21waWxlL3ByaXZhdGUvdHJhbnNwaWxlL3RyYW5zcGlsZU9iai5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpdGVyYWwsIE9iamVjdEV4cHJlc3Npb24gfSBmcm9tICdlc2FzdC9kaXN0L2FzdCdcbmltcG9ydCB7IHByb3BlcnR5SWRPckxpdGVyYWxDYWNoZWQsIHRodW5rIH0gZnJvbSAnZXNhc3QvZGlzdC91dGlsJ1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICdlc2FzdC9kaXN0L3NwZWNpYWxpemUnXG5pbXBvcnQgeyBjYXQsIGZsYXRNYXAsIGlzRW1wdHkgfSBmcm9tICcuLi9VL0JhZydcbmltcG9ydCB7IGlmRWxzZSB9IGZyb20gJy4uL1UvT3AnXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuLi9VL3V0aWwnXG5pbXBvcnQgeyB0MCB9IGZyb20gJy4vdHJhbnNwaWxlJ1xuaW1wb3J0IHsgYWNjZXNzTG9jYWxEZWNsYXJlLCBtc0xzZXQsIG1zU2V0LCBJZERpc3BsYXlOYW1lLCBMaXRTdHJEaXNwbGF5TmFtZSB9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGNvbnN0XG5cdHRyYW5zcGlsZU9ialJldHVybiA9IChfLCBjeCkgPT4ge1xuXHRcdGNvbnN0IG5vbkRlYnVnS2V5cyA9IF8ua2V5c1xuXHRcdC8vIFRPRE86IGluY2x1ZGVUeXBlQ2hlY2tzKCkgaXMgbm90IHRoZSByaWdodCBtZXRob2QgZm9yIHRoaXNcblx0XHRjb25zdCBrZXlzID0gY3gub3B0cy5pbmNsdWRlVHlwZUNoZWNrcygpID8gXy5rZXlzLmNvbmNhdChfLmRlYnVnS2V5cykgOiBfLmtleXNcblx0XHQvLyBNYWtlIGNvbXBpbGF0aW9uIGRldGVybWluaXN0aWMuXG5cdFx0a2V5cy5zb3J0KClcblxuXHRcdHJldHVybiBpZkVsc2UoXy5vcE9iamVkLFxuXHRcdFx0b2JqZWQgPT4ge1xuXHRcdFx0XHRjb25zdCBhc3RPYmplZCA9IHQwKG9iamVkKVxuXHRcdFx0XHRpZiAoaXNFbXB0eShrZXlzKSkge1xuXHRcdFx0XHRcdGFzc2VydChpc0VtcHR5KG5vbkRlYnVnS2V5cykpXG5cdFx0XHRcdFx0cmV0dXJuIGFzdE9iamVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3Qga2V5c1ZhbHMgPSBjYXQoXG5cdFx0XHRcdFx0XHRmbGF0TWFwKGtleXMsIGtleSA9PiBbIExpdGVyYWwoa2V5Lm5hbWUpLCBhY2Nlc3NMb2NhbERlY2xhcmUoa2V5KSBdKSxcblx0XHRcdFx0XHRcdGZsYXRNYXAoXy5vcERpc3BsYXlOYW1lLCBkbiA9PiBbTGl0U3RyRGlzcGxheU5hbWUsIExpdGVyYWwoZG4pXSkpXG5cdFx0XHRcdFx0Y29uc3QgYW55TGF6eSA9IGtleXMuc29tZShrZXkgPT4ga2V5LmlzTGF6eSlcblx0XHRcdFx0XHRyZXR1cm4gKGFueUxhenkgPyBtc0xzZXQgOiBtc1NldCkoYXN0T2JqZWQsIC4uLmtleXNWYWxzKVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRhc3NlcnQoIWlzRW1wdHkoa2V5cykpXG5cdFx0XHRcdGNvbnN0IHByb3BzID0ga2V5cy5tYXAoa2V5ID0+IHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhY2Nlc3NMb2NhbERlY2xhcmUoa2V5KVxuXHRcdFx0XHRcdGNvbnN0IGlkID0gcHJvcGVydHlJZE9yTGl0ZXJhbENhY2hlZChrZXkubmFtZSlcblx0XHRcdFx0XHRyZXR1cm4ga2V5LmlzTGF6eSA/XG5cdFx0XHRcdFx0XHRwcm9wZXJ0eSgnZ2V0JywgaWQsIHRodW5rKHZhbCkpIDpcblx0XHRcdFx0XHRcdHByb3BlcnR5KCdpbml0JywgaWQsIHZhbClcblx0XHRcdFx0fSlcblx0XHRcdFx0Y29uc3Qgb3BQcm9wRGlzcGxheU5hbWUgPSBfLm9wRGlzcGxheU5hbWUubWFwKGRuID0+XG5cdFx0XHRcdFx0cHJvcGVydHkoJ2luaXQnLCBJZERpc3BsYXlOYW1lLCBMaXRlcmFsKGRuKSkpXG5cdFx0XHRcdHJldHVybiBPYmplY3RFeHByZXNzaW9uKGNhdChwcm9wcywgb3BQcm9wRGlzcGxheU5hbWUpKVxuXHRcdFx0fSlcblx0fVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=