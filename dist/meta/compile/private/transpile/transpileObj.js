if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/util', 'esast/dist/specialize', '../U/Bag', '../U/Op', '../U/util', './transpile', './util'], function (exports, _esastDistAst, _esastDistUtil, _esastDistSpecialize, _UBag, _UOp, _UUtil, _transpile, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const transpileObjReturn = function (_, cx) {
		const nonDebugKeys = _.keys;
		// TODO: includeTypeChecks() is not the right method for this
		const keys = cx.opts.includeTypeChecks() ? _.keys.concat(_.debugKeys) : _.keys;
		// Make compilation deterministic.
		keys.sort();

		return _UOp.ifElse(_.opObjed, function (objed) {
			const astObjed = _transpile.t(objed);
			if (_UBag.isEmpty(keys)) {
				_UUtil.assert(_UBag.isEmpty(nonDebugKeys));
				return astObjed;
			} else {
				const keysVals = _UBag.cat(_UBag.flatMap(keys, function (key) {
					return [_esastDistAst.Literal(key.name), _util.accessLocalDeclare(key)];
				}), _UBag.flatMap(_.opDisplayName, function (dn) {
					return [_util.LitStrDisplayName, _esastDistAst.Literal(dn)];
				}));
				const anyLazy = keys.some(function (key) {
					return key.isLazy;
				});
				const args = _UBag.unshift(astObjed, keysVals);
				return (anyLazy ? _util.msLset : _util.msSet)(args);
			}
		}, function () {
			_UUtil.assert(!_UBag.isEmpty(keys));
			const props = keys.map(function (key) {
				const val = _util.accessLocalDeclare(key);
				const id = _esastDistUtil.propertyIdOrLiteralCached(key.name);
				return key.isLazy ? _esastDistSpecialize.property('get', id, _esastDistUtil.thunk(val)) : _esastDistSpecialize.property('init', id, val);
			});
			const opPropDisplayName = _.opDisplayName.map(function (dn) {
				return _esastDistSpecialize.property('init', _util.IdDisplayName, _esastDistAst.Literal(dn));
			});
			return _esastDistAst.ObjectExpression(_UBag.cat(props, opPropDisplayName));
		});
	},
	      transpileObjSimple = function (_) {
		// Sort to keep compilation deterministic.
		const keys = Object.getOwnPropertyNames(_.keysVals).sort();
		return _esastDistAst.ObjectExpression(keys.map(function (key) {
			return _esastDistSpecialize.property('init', _esastDistUtil.propertyIdOrLiteralCached(key), _transpile.t(_.keysVals[key]));
		}));
	};
	exports.transpileObjReturn = transpileObjReturn;
	exports.transpileObjSimple = transpileObjSimple;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS90cmFuc3BpbGVPYmouanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU08sT0FDTixrQkFBa0IsR0FBRyxVQUFDLENBQUMsRUFBRSxFQUFFLEVBQUs7QUFDL0IsUUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQTs7QUFFM0IsUUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFBOztBQUU5RSxNQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7O0FBRVgsU0FBTyxLQWJBLE1BQU0sQ0FhQyxDQUFDLENBQUMsT0FBTyxFQUN0QixVQUFBLEtBQUssRUFBSTtBQUNSLFNBQU0sUUFBUSxHQUFHLFdBYlosQ0FBQyxDQWFhLEtBQUssQ0FBQyxDQUFBO0FBQ3pCLE9BQUksTUFqQmUsT0FBTyxDQWlCZCxJQUFJLENBQUMsRUFBRTtBQUNsQixXQWhCSSxNQUFNLENBZ0JILE1BbEJXLE9BQU8sQ0FrQlYsWUFBWSxDQUFDLENBQUMsQ0FBQTtBQUM3QixXQUFPLFFBQVEsQ0FBQTtJQUNmLE1BQU07QUFDTixVQUFNLFFBQVEsR0FBRyxNQXJCYixHQUFHLENBc0JOLE1BdEJRLE9BQU8sQ0FzQlAsSUFBSSxFQUFFLFVBQUEsR0FBRztZQUFJLENBQUUsY0F6QnBCLE9BQU8sQ0F5QnFCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQWxCdkMsa0JBQWtCLENBa0J3QyxHQUFHLENBQUMsQ0FBRTtLQUFBLENBQUMsRUFDcEUsTUF2QlEsT0FBTyxDQXVCUCxDQUFDLENBQUMsYUFBYSxFQUFFLFVBQUEsRUFBRTtZQUFJLE9BbkJzQixpQkFBaUIsRUFtQm5CLGNBMUJoRCxPQUFPLENBMEJpRCxFQUFFLENBQUMsQ0FBQztLQUFBLENBQUMsQ0FBQyxDQUFBO0FBQ2xFLFVBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHO1lBQUksR0FBRyxDQUFDLE1BQU07S0FBQSxDQUFDLENBQUE7QUFDNUMsVUFBTSxJQUFJLEdBQUcsTUF6QmMsT0FBTyxDQXlCYixRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDeEMsV0FBTyxDQUFDLE9BQU8sU0F0QlMsTUFBTSxTQUFFLEtBQUssQ0FzQkwsQ0FBRSxJQUFJLENBQUMsQ0FBQTtJQUN2QztHQUNELEVBQ0QsWUFBTTtBQUNMLFVBNUJLLE1BQU0sQ0E0QkosQ0FBQyxNQTlCVyxPQUFPLENBOEJWLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDdEIsU0FBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsRUFBSTtBQUM3QixVQUFNLEdBQUcsR0FBRyxNQTVCUixrQkFBa0IsQ0E0QlMsR0FBRyxDQUFDLENBQUE7QUFDbkMsVUFBTSxFQUFFLEdBQUcsZUFuQ1AseUJBQXlCLENBbUNRLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM5QyxXQUFPLEdBQUcsQ0FBQyxNQUFNLEdBQ2hCLHFCQXBDRyxRQUFRLENBb0NGLEtBQUssRUFBRSxFQUFFLEVBQUUsZUFyQ1UsS0FBSyxDQXFDVCxHQUFHLENBQUMsQ0FBQyxHQUMvQixxQkFyQ0csUUFBUSxDQXFDRixNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLENBQUMsQ0FBQTtBQUNGLFNBQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBQSxFQUFFO1dBQy9DLHFCQXhDSSxRQUFRLENBd0NILE1BQU0sUUFuQ3dCLGFBQWEsRUFtQ3BCLGNBMUM1QixPQUFPLENBMEM2QixFQUFFLENBQUMsQ0FBQztJQUFBLENBQUMsQ0FBQTtBQUM5QyxVQUFPLGNBM0NPLGdCQUFnQixDQTJDTixNQXhDbkIsR0FBRyxDQXdDb0IsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQTtHQUN0RCxDQUFDLENBQUE7RUFDSDtPQUVELGtCQUFrQixHQUFHLFVBQUEsQ0FBQyxFQUFJOztBQUV6QixRQUFNLElBQUksR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQzFELFNBQU8sY0FsRFMsZ0JBQWdCLENBa0RSLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHO1VBQ25DLHFCQWpETSxRQUFRLENBaURMLE1BQU0sRUFBRSxlQWxEWCx5QkFBeUIsQ0FrRFksR0FBRyxDQUFDLEVBQUUsV0E3QzNDLENBQUMsQ0E2QzRDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUFBLENBQUMsQ0FBQyxDQUFBO0VBQ3ZFLENBQUE7U0ExQ0Qsa0JBQWtCLEdBQWxCLGtCQUFrQjtTQXFDbEIsa0JBQWtCLEdBQWxCLGtCQUFrQiIsImZpbGUiOiJtZXRhL2NvbXBpbGUvcHJpdmF0ZS90cmFuc3BpbGUvdHJhbnNwaWxlT2JqLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGl0ZXJhbCwgT2JqZWN0RXhwcmVzc2lvbiB9IGZyb20gJ2VzYXN0L2Rpc3QvYXN0J1xuaW1wb3J0IHsgcHJvcGVydHlJZE9yTGl0ZXJhbENhY2hlZCwgdGh1bmsgfSBmcm9tICdlc2FzdC9kaXN0L3V0aWwnXG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gJ2VzYXN0L2Rpc3Qvc3BlY2lhbGl6ZSdcbmltcG9ydCB7IGNhdCwgZmxhdE1hcCwgaXNFbXB0eSwgdW5zaGlmdCB9IGZyb20gJy4uL1UvQmFnJ1xuaW1wb3J0IHsgaWZFbHNlIH0gZnJvbSAnLi4vVS9PcCdcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4uL1UvdXRpbCdcbmltcG9ydCB7IHQgfSBmcm9tICcuL3RyYW5zcGlsZSdcbmltcG9ydCB7IGFjY2Vzc0xvY2FsRGVjbGFyZSwgbXNMc2V0LCBtc1NldCwgSWREaXNwbGF5TmFtZSwgTGl0U3RyRGlzcGxheU5hbWUgfSBmcm9tICcuL3V0aWwnXG5cbmV4cG9ydCBjb25zdFxuXHR0cmFuc3BpbGVPYmpSZXR1cm4gPSAoXywgY3gpID0+IHtcblx0XHRjb25zdCBub25EZWJ1Z0tleXMgPSBfLmtleXNcblx0XHQvLyBUT0RPOiBpbmNsdWRlVHlwZUNoZWNrcygpIGlzIG5vdCB0aGUgcmlnaHQgbWV0aG9kIGZvciB0aGlzXG5cdFx0Y29uc3Qga2V5cyA9IGN4Lm9wdHMuaW5jbHVkZVR5cGVDaGVja3MoKSA/IF8ua2V5cy5jb25jYXQoXy5kZWJ1Z0tleXMpIDogXy5rZXlzXG5cdFx0Ly8gTWFrZSBjb21waWxhdGlvbiBkZXRlcm1pbmlzdGljLlxuXHRcdGtleXMuc29ydCgpXG5cblx0XHRyZXR1cm4gaWZFbHNlKF8ub3BPYmplZCxcblx0XHRcdG9iamVkID0+IHtcblx0XHRcdFx0Y29uc3QgYXN0T2JqZWQgPSB0KG9iamVkKVxuXHRcdFx0XHRpZiAoaXNFbXB0eShrZXlzKSkge1xuXHRcdFx0XHRcdGFzc2VydChpc0VtcHR5KG5vbkRlYnVnS2V5cykpXG5cdFx0XHRcdFx0cmV0dXJuIGFzdE9iamVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3Qga2V5c1ZhbHMgPSBjYXQoXG5cdFx0XHRcdFx0XHRmbGF0TWFwKGtleXMsIGtleSA9PiBbIExpdGVyYWwoa2V5Lm5hbWUpLCBhY2Nlc3NMb2NhbERlY2xhcmUoa2V5KSBdKSxcblx0XHRcdFx0XHRcdGZsYXRNYXAoXy5vcERpc3BsYXlOYW1lLCBkbiA9PiBbTGl0U3RyRGlzcGxheU5hbWUsIExpdGVyYWwoZG4pXSkpXG5cdFx0XHRcdFx0Y29uc3QgYW55TGF6eSA9IGtleXMuc29tZShrZXkgPT4ga2V5LmlzTGF6eSlcblx0XHRcdFx0XHRjb25zdCBhcmdzID0gdW5zaGlmdChhc3RPYmplZCwga2V5c1ZhbHMpXG5cdFx0XHRcdFx0cmV0dXJuIChhbnlMYXp5ID8gbXNMc2V0IDogbXNTZXQpKGFyZ3MpXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQoKSA9PiB7XG5cdFx0XHRcdGFzc2VydCghaXNFbXB0eShrZXlzKSlcblx0XHRcdFx0Y29uc3QgcHJvcHMgPSBrZXlzLm1hcChrZXkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFjY2Vzc0xvY2FsRGVjbGFyZShrZXkpXG5cdFx0XHRcdFx0Y29uc3QgaWQgPSBwcm9wZXJ0eUlkT3JMaXRlcmFsQ2FjaGVkKGtleS5uYW1lKVxuXHRcdFx0XHRcdHJldHVybiBrZXkuaXNMYXp5ID9cblx0XHRcdFx0XHRcdHByb3BlcnR5KCdnZXQnLCBpZCwgdGh1bmsodmFsKSkgOlxuXHRcdFx0XHRcdFx0cHJvcGVydHkoJ2luaXQnLCBpZCwgdmFsKVxuXHRcdFx0XHR9KVxuXHRcdFx0XHRjb25zdCBvcFByb3BEaXNwbGF5TmFtZSA9IF8ub3BEaXNwbGF5TmFtZS5tYXAoZG4gPT5cblx0XHRcdFx0XHRwcm9wZXJ0eSgnaW5pdCcsIElkRGlzcGxheU5hbWUsIExpdGVyYWwoZG4pKSlcblx0XHRcdFx0cmV0dXJuIE9iamVjdEV4cHJlc3Npb24oY2F0KHByb3BzLCBvcFByb3BEaXNwbGF5TmFtZSkpXG5cdFx0XHR9KVxuXHR9LFxuXG5cdHRyYW5zcGlsZU9ialNpbXBsZSA9IF8gPT4ge1xuXHRcdC8vIFNvcnQgdG8ga2VlcCBjb21waWxhdGlvbiBkZXRlcm1pbmlzdGljLlxuXHRcdGNvbnN0IGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhfLmtleXNWYWxzKS5zb3J0KClcblx0XHRyZXR1cm4gT2JqZWN0RXhwcmVzc2lvbihrZXlzLm1hcChrZXkgPT5cblx0XHRcdHByb3BlcnR5KCdpbml0JywgcHJvcGVydHlJZE9yTGl0ZXJhbENhY2hlZChrZXkpLCB0KF8ua2V5c1ZhbHNba2V5XSkpKSlcblx0fVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=