{"version":3,"sources":["meta/compile/private/transpile/transpile.js"],"names":[],"mappings":"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","file":"meta/compile/private/transpile/transpile.js","sourcesContent":["import { ArrayExpression, AssignmentExpression, BlockStatement, BreakStatement,\n\tCallExpression, DebuggerStatement, Identifier, LabeledStatement, Literal,\n\tSwitchCase, SwitchStatement, ThisExpression, VariableDeclarator } from 'esast/dist/ast'\nimport Loc from 'esast/dist/Loc'\nimport { idCached, member, throwError, toStatement, toStatements } from 'esast/dist/util'\nimport {\n\tbinaryExpressionPlus, callExpressionThunk, functionExpressionPlain, functionExpressionThunk,\n\tswitchStatementOnTrue,\n\tunaryExpressionNegate, variableDeclarationConst, whileStatementInfinite,\n\tyieldExpressionDelegate, yieldExpressionNoDelegate } from 'esast/dist/specialize'\nimport Expression, * as EExports from '../../Expression'\nimport { KAssign } from '../Lang'\nimport Opts from '../Opts'\nimport { cat, cons, flatMap, isEmpty, push, range, tail, unshift } from '../U/Bag'\nimport { ifElse, opIf, None, some } from '../U/Op'\nimport type from '../U/type'\nimport { assert, implementMany, isPositive, log } from '../U/util'\nimport Vr from '../Vr'\nimport { declare, declareSpecial, idForDeclareCached } from './esast-util'\nimport transpileBlock from './transpileBlock'\nimport { transpileObjReturn, transpileObjSimple } from './transpileObj'\nimport transpileModule from './transpileModule'\nimport { t,\n\tIdExports, IdArguments, IdArraySliceCall, IdFunctionApplyCall, IdMs,\n\tLitEmptyArray, LitEmptyString, LitNull, Break,\n\taccessLocal, lazyWrap, makeDeclarator, makeDestructureDeclarators,\n\topLocalCheck, msArr, msBool, msMap, msShow } from './util'\nimport Tx from './Tx'\n\nexport default function transpile(cx, e, vr) {\n\tconst tx = new Tx(cx, vr)\n\tconst ast = t(tx)(e)\n\tif (tx.opts().sourceMap())\n\t\tast.loc.source = tx.opts().modulePath()\n\treturn ast\n}\n\nimplementMany(EExports, 'transpileSubtree', {\n\tAssign: (_, tx) => variableDeclarationConst([\n\t\tmakeDeclarator(tx, _.loc, _.assignee, _.k, t(tx)(_.value)) ]),\n\t// TODO:ES6 Just use native destructuring assign\n\tAssignDestructure: (_, tx) => variableDeclarationConst(\n\t\tmakeDestructureDeclarators(tx, _.loc, _.assignees, _.isLazy, t(tx)(_.value), _.k, false)),\n\tBlockDo: transpileBlock,\n\tBlockVal: transpileBlock,\n\tBlockWrap: (_, tx) => blockWrap(_, tx, t(tx)(_.block)),\n\tCall(_, tx) {\n\t\tconst anySplat = _.args.some(arg => arg instanceof EExports.Splat)\n\t\tif (anySplat) {\n\t\t\tconst args = _.args.map(arg =>\n\t\t\t\targ instanceof EExports.Splat ?\n\t\t\t\t\tmsArr([ t(tx)(arg.splatted) ]) :\n\t\t\t\t\tt(tx)(arg))\n\t\t\treturn CallExpression(IdFunctionApplyCall, [\n\t\t\t\tt(tx)(_.called),\n\t\t\t\tLitNull,\n\t\t\t\tCallExpression(member(LitEmptyArray, 'concat'), args)])\n\t\t}\n\t\telse return CallExpression(t(tx)(_.called), _.args.map(t(tx)))\n\t},\n\tCaseDo: (_, tx) =>\n\t\tifElse(_.opCased,\n\t\t\tcased => BlockStatement([ t(tx)(cased), caseBody(tx, _.parts, _.opElse) ]),\n\t\t\t() => caseBody(tx, _.parts, _.opElse)),\n\tCaseVal: (_, tx) => {\n\t\tconst body = caseBody(tx, _.parts, _.opElse)\n\t\tconst block = ifElse(_.opCased, cased => [ t(tx)(cased), body ], () => [ body ])\n\t\treturn blockWrap(_, tx, BlockStatement(block))\n\t},\n\tCaseDoPart: (_, tx) => casePart(tx, _.test, _.result, true),\n\tCaseValPart: (_, tx) => casePart(tx, _.test, _.result, false),\n\t// TODO: includeInoutChecks is misnamed\n\tDebug: (_, tx) => tx.opts().includeInoutChecks() ?\n\t\tflatMap(_.lines, line => toStatements(t(tx)(line))) :\n\t\t[ ],\n\tObjReturn: transpileObjReturn,\n\tObjSimple: transpileObjSimple,\n\tEndLoop: (_, tx) => BreakStatement(loopId(tx.vr.endLoopToLoop.get(_))),\n\tFun(_, tx) {\n\t\t// TODO: cache literals for small numbers\n\t\tconst nArgs = Literal(_.args.length)\n\t\tconst opDeclareRest = _.opRestArg.map(rest =>\n\t\t\tdeclare(rest, CallExpression(IdArraySliceCall, [IdArguments, nArgs])))\n\t\tconst argChecks = flatMap(_.args, arg => opLocalCheck(tx, arg, arg.isLazy))\n\t\tconst _in = flatMap(_.opIn, i => toStatements(t(tx)(i)))\n\t\tconst lead = opDeclareRest.concat(argChecks, _in)\n\n\t\tconst _out = flatMap(_.opOut, o => toStatements(t(tx)(o)))\n\t\tconst body = t(tx, lead, _.opResDeclare, _out)(_.block)\n\t\tconst args = _.args.map(t(tx))\n\t\treturn functionExpressionPlain(args, body, _.k === '~|')\n\t},\n\tLazy: (_, tx) => lazyWrap(t(tx)(_.value)),\n\tListReturn: _ => ArrayExpression(range(0, _.length).map(i => idCached(`_${i}`))),\n\tListSimple: (_, tx) => ArrayExpression(_.parts.map(t(tx))),\n\tListEntry: (_, tx) => declareSpecial(`_${_.index}`, t(tx)(_.value)),\n\tELiteral(_) {\n\t\tswitch (_.k) {\n\t\t\tcase Number: {\n\t\t\t\t// TODO: Number literals should store Numbers...\n\t\t\t\tconst n = Number.parseFloat(_.value)\n\t\t\t\t// Negative numbers are not part of ES spec.\n\t\t\t\t// http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.3\n\t\t\t\tconst lit = Literal(Math.abs(n))\n\t\t\t\treturn isPositive(n) ? lit : unaryExpressionNegate(lit)\n\t\t\t}\n\t\t\tcase String:\n\t\t\t\treturn Literal(_.value)\n\t\t\tcase 'js':\n\t\t\t\tswitch (_.value) {\n\t\t\t\t\t// TODO:USE* Get rid of this!\n\t\t\t\t\tcase 'msGetModule': return member(IdMs, 'getModule')\n\t\t\t\t\tcase 'require': return idCached('require')\n\t\t\t\t\tdefault: throw new Error('This js literal not supported.')\n\t\t\t\t}\n\t\t\tdefault: throw new Error(_.k)\n\t\t}\n\t},\n\tGlobalAccess: _ => Identifier(_.name),\n\tLocalAccess: (_, tx) => accessLocal(tx, _),\n\tLocalDeclare: _ => idForDeclareCached(_),\n\t// TODO: Don't always label!\n\tLoop: (_, tx) =>\n\t\tLabeledStatement(loopId(_), whileStatementInfinite(t(tx)(_.block))),\n\tMapReturn: _ => msMap(flatMap(range(0, _.length), i =>\n\t\t[ idCached('_k' + i.toString()), idCached('_v' + i.toString()) ])),\n\tMapEntry: (_, tx) => variableDeclarationConst([\n\t\tVariableDeclarator(idCached(`_k${_.index}`), t(tx)(_.key)),\n\t\tVariableDeclarator(idCached(`_v${_.index}`), t(tx)(_.val))\n\t]),\n\tMember: (_, tx) => member(t(tx)(_.object), _.name),\n\tModule: transpileModule,\n\t// TODO:ES6 Use `export default`\n\tModuleDefaultExport(_, tx) {\n\t\tconst m = member(IdExports, 'default')\n\t\treturn AssignmentExpression('=', m, t(tx)(_.value))\n\t},\n\tQuote(_, tx) {\n\t\t// TODO:ES6 use template strings\n\t\tconst isStrLit = _ => _ instanceof EExports.ELiteral && _.k === String\n\t\tconst part0 = _.parts[0]\n\t\tconst [ first, restParts ] =\n\t\t\tisStrLit(part0) ? [ t(tx)(part0), tail(_.parts) ] : [ LitEmptyString, _.parts ]\n\t\treturn restParts.reduce(\n\t\t\t(ex, _) =>\n\t\t\t\tbinaryExpressionPlus(ex, isStrLit(_) ? t(tx)(_) : msShow([ t(tx)(_) ])),\n\t\t\tfirst)\n\t},\n\tSpecial(_) {\n\t\t// Make new objects because we will assign `loc` to them.\n\t\tswitch (_.k) {\n\t\t\tcase 'contains': return member(IdMs, 'contains')\n\t\t\tcase 'debugger': return DebuggerStatement()\n\t\t\tcase 'sub': return member(IdMs, 'sub')\n\t\t\tcase 'this': return \tThisExpression()\n\t\t\tcase 'this-module-directory': return Identifier('__dirname')\n\t\t\tdefault: throw new Error(_.k)\n\t\t}\n\t},\n\tSplat: (_, tx) => tx.fail(_.loc, 'Splat must appear as argument to a call.'),\n\tYield: (_, tx) => yieldExpressionNoDelegate(t(tx)(_.yielded)),\n\tYieldTo: (_, tx) => yieldExpressionDelegate(t(tx)(_.yieldedTo))\n})\n\nconst blockWrap = (_, tx, block) => {\n\tconst g = tx.vr.eIsInGenerator(_)\n\tconst invoke = callExpressionThunk(functionExpressionThunk(block, g))\n\treturn g ? yieldExpressionDelegate(invoke) : invoke\n}\n\nconst caseFail = SwitchCase(null, [ throwError('No branch of `case` matches.') ])\nfunction caseBody(tx, parts, opElse) {\n\tconst elze = ifElse(opElse,\n\t\t_ => SwitchCase(null, [ t(tx)(_) ]),\n\t\t() => caseFail)\n\tconst cases = push(parts.map(part => t(tx)(part)), elze)\n\treturn switchStatementOnTrue(cases)\n}\n\nfunction casePart(tx, test, result, needBreak) {\n\tconst checkedTest = tx.opts().includeCaseChecks() ? msBool([ t(tx)(test) ]) : t(tx)(test)\n\tconst lines = needBreak ? [ t(tx)(result), Break ] : [ t(tx)(result) ]\n\treturn SwitchCase(checkedTest, lines)\n}\n\n// TODO: MOVE\n\nconst loopId = loop => {\n\ttype(loop.loc.start.line, Number)\n\treturn idCached(`loop${loop.loc.start.line}`)\n}\n"],"sourceRoot":"/src"}