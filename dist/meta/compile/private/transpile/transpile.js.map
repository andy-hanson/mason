{"version":3,"sources":["meta/compile/private/transpile/transpile.js"],"names":[],"mappings":"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","file":"meta/compile/private/transpile/transpile.js","sourcesContent":["import { ArrayExpression, AssignmentExpression, BlockStatement, BreakStatement,\n\tCallExpression, DebuggerStatement, Identifier, LabeledStatement, Literal,\n\tSwitchCase, ThisExpression, VariableDeclarator, ReturnStatement } from 'esast/dist/ast'\nimport { idCached, member, throwError, toStatements } from 'esast/dist/util'\nimport {\n\tbinaryExpressionPlus, callExpressionThunk, functionExpressionPlain, functionExpressionThunk,\n\tswitchStatementOnTrue,\n\tunaryExpressionNegate, variableDeclarationConst, whileStatementInfinite,\n\tyieldExpressionDelegate, yieldExpressionNoDelegate } from 'esast/dist/specialize'\nimport * as EExports from '../../Expression'\nimport { flatMap, push, range, tail } from '../U/Bag'\nimport { ifElse, None, opIf } from '../U/Op'\nimport type from '../U/type'\nimport { assert, implementMany, isPositive } from '../U/util'\nimport { declare, declareSpecial, idForDeclareCached } from './esast-util'\nimport { transpileObjReturn, transpileObjSimple } from './transpileObj'\nimport transpileModule from './transpileModule'\nimport {\n\tIdExports, IdArguments, IdArraySliceCall, IdFunctionApplyCall, IdMs,\n\tLitEmptyArray, LitEmptyString, LitNull, Break, ReturnRes,\n\taccessLocal, lazyWrap, makeDeclarator, makeDestructureDeclarators,\n\tmaybeWrapInCheckContains,\n\topLocalCheck, msArr, msBool, msMap, msShow } from './util'\n\nlet cx, vr, isInGenerator\n\n//TODO:MOVE\n//TODO: Don't do higher-order version at all!\nconst withInGenerator = (_isInGenerator, fun) => {\n\tconst g = isInGenerator\n\tisInGenerator = _isInGenerator\n\tconst res = fun()\n\tisInGenerator = g\n\treturn res\n}\n\n\nexport default function transpile(_cx, e, _vr) {\n\tcx = _cx\n\tvr = _vr\n\tisInGenerator = false\n\tconst res = t(e)\n\t// Release for garbage collection\n\tcx = vr = undefined\n\treturn res\n}\n\nexport const t = (expr, arg, arg2, arg3) => {\n\tconst ast = expr.transpileSubtree(arg, arg2, arg3)\n\tif (cx.opts.sourceMap() && !(ast instanceof Array))\n\t\t// Array is only allowed for statement groups inside of Blocks, such as Debug.\n\t\tast.loc = expr.loc\n\treturn ast\n}\n\nfunction transpileBlock(lead, opResDeclare, opOut) {\n\tif (lead === undefined)\n\t\tlead = []\n\tif (opResDeclare === undefined)\n\t\topResDeclare = opOut = None\n\tconst body = flatMap(this.lines, line => toStatements(t(line)))\n\tconst isVal = this instanceof EExports.BlockVal\n\tconst fin = ifElse(opResDeclare,\n\t\trd => {\n\t\t\tassert(isVal)\n\t\t\tconst returned = maybeWrapInCheckContains(cx, t(this.returned), rd.opType, 'res')\n\t\t\treturn ifElse(opOut,\n\t\t\t\to => [ declare(rd, returned) ].concat(o, [ ReturnRes ]),\n\t\t\t\t() => [ ReturnStatement(returned) ])\n\t\t},\n\t\t() => opOut.concat(opIf(isVal, () => ReturnStatement(t(this.returned)))))\n\treturn BlockStatement(lead.concat(body, fin))\n}\n\nimplementMany(EExports, 'transpileSubtree', {\n\tAssign() {\n\t\treturn variableDeclarationConst([\n\t\t\tmakeDeclarator(cx, this.loc, this.assignee, this.k, t(this.value)) ])\n\t},\n\t// TODO:ES6 Just use native destructuring assign\n\tAssignDestructure() {\n\t\treturn variableDeclarationConst(\n\t\t\tmakeDestructureDeclarators(\n\t\t\t\tcx,\n\t\t\t\tthis.loc,\n\t\t\t\tthis.assignees,\n\t\t\t\tthis.isLazy,\n\t\t\t\tt(this.value),\n\t\t\t\tthis.k,\n\t\t\t\tfalse))\n\t},\n\tBlockDo: transpileBlock,\n\tBlockVal: transpileBlock,\n\tBlockWrap() { return blockWrap(this, t(this.block)) },\n\tCall() {\n\t\tconst anySplat = this.args.some(arg => arg instanceof EExports.Splat)\n\t\tif (anySplat) {\n\t\t\tconst args = this.args.map(arg =>\n\t\t\t\targ instanceof EExports.Splat ?\n\t\t\t\t\tmsArr([ t(arg.splatted) ]) :\n\t\t\t\t\tt(arg))\n\t\t\treturn CallExpression(IdFunctionApplyCall, [\n\t\t\t\tt(this.called),\n\t\t\t\tLitNull,\n\t\t\t\tCallExpression(member(LitEmptyArray, 'concat'), args)])\n\t\t}\n\t\telse return CallExpression(t(this.called), this.args.map(t))\n\t},\n\tCaseDo() {\n\t\treturn ifElse(this.opCased,\n\t\t\tcased => BlockStatement([ t(cased), caseBody(this.parts, this.opElse) ]),\n\t\t\t() => caseBody(this.parts, this.opElse))\n\t},\n\tCaseVal() {\n\t\tconst body = caseBody(this.parts, this.opElse)\n\t\tconst block = ifElse(this.opCased, cased => [ t(cased), body ], () => [ body ])\n\t\treturn blockWrap(this, BlockStatement(block))\n\t},\n\tCaseDoPart() { return casePart(this.test, this.result, true) },\n\tCaseValPart() { return casePart(this.test, this.result, false) },\n\t// TODO: includeInoutChecks is misnamed\n\tDebug() {\n\t\treturn cx.opts.includeInoutChecks() ?\n\t\t\tflatMap(this.lines, line => toStatements(t(line))) :\n\t\t\t[ ]\n\t},\n\tObjReturn() { return transpileObjReturn(this, cx) },\n\tObjSimple() { return transpileObjSimple(this, cx) },\n\tEndLoop() { return BreakStatement(loopId(vr.endLoopToLoop.get(this))) },\n\tFun() {\n\t\treturn withInGenerator(this.k === '~|', () => {\n\t\t\t// TODO: cache literals for small numbers\n\t\t\tconst nArgs = Literal(this.args.length)\n\t\t\tconst opDeclareRest = this.opRestArg.map(rest =>\n\t\t\t\tdeclare(rest, CallExpression(IdArraySliceCall, [IdArguments, nArgs])))\n\t\t\tconst argChecks = flatMap(this.args, arg => opLocalCheck(cx, arg, arg.isLazy))\n\t\t\tconst _in = flatMap(this.opIn, i => toStatements(t(i)))\n\t\t\tconst lead = opDeclareRest.concat(argChecks, _in)\n\n\t\t\tconst _out = flatMap(this.opOut, o => toStatements(t(o)))\n\t\t\tconst body = t(this.block, lead, this.opResDeclare, _out)\n\t\t\tconst args = this.args.map(t)\n\t\t\t//TODO: isInGenerator\n\t\t\treturn functionExpressionPlain(args, body, this.k === '~|')\n\t\t})\n\t},\n\tLazy() { return lazyWrap(t(this.value)) },\n\tListReturn() {\n\t\treturn ArrayExpression(range(0, this.length).map(i => idCached(`_${i}`)))\n\t},\n\tListSimple() { return ArrayExpression(this.parts.map(t)) },\n\tListEntry() { return declareSpecial(`_${this.index}`, t(this.value)) },\n\tELiteral() {\n\t\tswitch (this.k) {\n\t\t\tcase Number: {\n\t\t\t\t// TODO: Number literals should store Numbers...\n\t\t\t\tconst n = Number.parseFloat(this.value)\n\t\t\t\t// Negative numbers are not part of ES spec.\n\t\t\t\t// http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.3\n\t\t\t\tconst lit = Literal(Math.abs(n))\n\t\t\t\treturn isPositive(n) ? lit : unaryExpressionNegate(lit)\n\t\t\t}\n\t\t\tcase String:\n\t\t\t\treturn Literal(this.value)\n\t\t\tcase 'js':\n\t\t\t\tswitch (this.value) {\n\t\t\t\t\t// TODO:USE* Get rid of this!\n\t\t\t\t\tcase 'msGetModule': return member(IdMs, 'getModule')\n\t\t\t\t\tcase 'require': return idCached('require')\n\t\t\t\t\tdefault: throw new Error('This js literal not supported.')\n\t\t\t\t}\n\t\t\tdefault: throw new Error(this.k)\n\t\t}\n\t},\n\tGlobalAccess() { return Identifier(this.name) },\n\tLocalAccess() { return accessLocal(this, vr) },\n\tLocalDeclare() { return idForDeclareCached(this) },\n\t// TODO: Don't always label!\n\tLoop() {\n\t\treturn LabeledStatement(loopId(this), whileStatementInfinite(t(this.block)))\n\t},\n\tMapReturn() {\n\t\treturn msMap(flatMap(range(0, this.length), i =>\n\t\t\t[ idCached('_k' + i.toString()), idCached('_v' + i.toString()) ]))\n\t},\n\tMapEntry() {\n\t\treturn variableDeclarationConst([\n\t\t\tVariableDeclarator(idCached(`_k${this.index}`), t(this.key)),\n\t\t\tVariableDeclarator(idCached(`_v${this.index}`), t(this.val))\n\t\t])\n\t},\n\tMember() {\n\t\treturn member(t(this.object), this.name)\n\t},\n\tModule() { return transpileModule(this, cx) },\n\t// TODO:ES6 Use `export default`\n\tModuleDefaultExport() {\n\t\tconst m = member(IdExports, 'default')\n\t\treturn AssignmentExpression('=', m, t(this.value))\n\t},\n\tQuote() {\n\t\t// TODO:ES6 use template strings\n\t\tconst isStrLit = _ => _ instanceof EExports.ELiteral && _.k === String\n\t\tconst part0 = this.parts[0]\n\t\tconst [ first, restParts ] =\n\t\t\tisStrLit(part0) ? [ t(part0), tail(this.parts) ] : [ LitEmptyString, this.parts ]\n\t\treturn restParts.reduce(\n\t\t\t(ex, _) =>\n\t\t\t\tbinaryExpressionPlus(ex, isStrLit(_) ? t(_) : msShow([ t(_) ])),\n\t\t\tfirst)\n\t},\n\tSpecial() {\n\t\t// Make new objects because we will assign `loc` to them.\n\t\tswitch (this.k) {\n\t\t\tcase 'contains': return member(IdMs, 'contains')\n\t\t\tcase 'debugger': return DebuggerStatement()\n\t\t\tcase 'sub': return member(IdMs, 'sub')\n\t\t\tcase 'this': return \tThisExpression()\n\t\t\tcase 'this-module-directory': return Identifier('__dirname')\n\t\t\tdefault: throw new Error(this.k)\n\t\t}\n\t},\n\tSplat() { cx.fail(this.loc, 'Splat must appear as argument to a call.') },\n\tYield() { return yieldExpressionNoDelegate(t(this.yielded)) },\n\tYieldTo() { return yieldExpressionDelegate(t(this.yieldedTo)) }\n})\n\nconst blockWrap = (_, block) => {\n\tconst g = isInGenerator//vr.eIsInGenerator(_)\n\tconst invoke = callExpressionThunk(functionExpressionThunk(block, g))\n\treturn g ? yieldExpressionDelegate(invoke) : invoke\n}\n\nconst caseFail = SwitchCase(null, [ throwError('No branch of `case` matches.') ])\nfunction caseBody(parts, opElse) {\n\tconst elze = ifElse(opElse,\n\t\t_ => SwitchCase(null, [ t(_) ]),\n\t\t() => caseFail)\n\tconst cases = push(parts.map(part => t(part)), elze)\n\treturn switchStatementOnTrue(cases)\n}\n\nfunction casePart(test, result, needBreak) {\n\tconst checkedTest = cx.opts.includeCaseChecks() ? msBool([ t(test) ]) : t(test)\n\tconst lines = needBreak ? [ t(result), Break ] : [ t(result) ]\n\treturn SwitchCase(checkedTest, lines)\n}\n\n// TODO: MOVE\n\nconst loopId = loop => {\n\ttype(loop.loc.start.line, Number)\n\treturn idCached(`loop${loop.loc.start.line}`)\n}\n"],"sourceRoot":"/src"}