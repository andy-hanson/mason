if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', 'esast/dist/specialize', 'esast/dist/util'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _esastDistSpecialize, _esastDistUtil) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _mangleIdentifier = _interopRequire(_esastDistMangleIdentifier);

	var _specialize = _interopRequire(_esastDistSpecialize);

	const declareToId = new WeakMap(),
	      LitTrue = _esastDistAst.Literal(true);

	const idForDeclareCached = function (localDeclare) {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = _esastDistAst.Identifier(_mangleIdentifier(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      idForDeclareNew = function (localDeclare) {
		return _esastDistAst.Identifier(idForDeclareCached(localDeclare).name);
	},
	      declare = function (localDeclare, val) {
		return _esastDistSpecialize.variableDeclarationConst([_esastDistAst.VariableDeclarator(idForDeclareCached(localDeclare), val)]);
	},
	      declareSpecial = function (name, val) {
		return _esastDistSpecialize.variableDeclarationConst([_esastDistAst.VariableDeclarator(_esastDistUtil.idCached(name), val)]);
	},
	      throwError = function (msg) {
		return _esastDistAst.ThrowStatement(_esastDistAst.NewExpression(_esastDistAst.Identifier('Error'), [_esastDistAst.Literal(msg)]));
	},
	      binaryExpressionPlus = _specialize(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '+' }),
	      binaryExpressionNotEqual = _specialize(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '!==' }),
	      unaryExpressionNegate = _specialize(_esastDistAst.UnaryExpression, ['argument', _esastDistAst.Expression], { operator: '-' }),
	      whileStatementInfinite = _specialize(_esastDistAst.WhileStatement, ['body', _esastDistAst.Statement], { test: LitTrue });
	exports.idForDeclareCached = idForDeclareCached;
	exports.idForDeclareNew = idForDeclareNew;
	exports.declare = declare;
	exports.declareSpecial = declareSpecial;
	exports.throwError = throwError;
	exports.binaryExpressionPlus = binaryExpressionPlus;
	exports.binaryExpressionNotEqual = binaryExpressionNotEqual;
	exports.unaryExpressionNegate = unaryExpressionNegate;
	exports.whileStatementInfinite = whileStatementInfinite;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS9lc2FzdC11dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFNQSxPQUNDLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRTtPQUMzQixPQUFPLEdBQUcsY0FSd0MsT0FBTyxDQVF2QyxJQUFJLENBQUMsQ0FBQTs7QUFFakIsT0FDTixrQkFBa0IsR0FBRyxVQUFBLFlBQVksRUFBSTtBQUNwQyxNQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ3JDLE1BQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtBQUNwQixJQUFDLEdBQUcsY0FkZ0MsVUFBVSxDQWMvQixrQkFBaUIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDbkQsY0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDaEM7QUFDRCxTQUFPLENBQUMsQ0FBQTtFQUNSO09BRUQsZUFBZSxHQUFHLFVBQUEsWUFBWTtTQUFJLGNBcEJJLFVBQVUsQ0FvQkgsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDO0VBQUE7T0FFbkYsT0FBTyxHQUFHLFVBQUMsWUFBWSxFQUFFLEdBQUc7U0FDM0IscUJBcEJtQix3QkFBd0IsQ0FvQmxCLENBQUUsY0F0Qkssa0JBQWtCLENBc0JKLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7RUFBQTtPQUV4RixjQUFjLEdBQUcsVUFBQyxJQUFJLEVBQUUsR0FBRztTQUMxQixxQkF2Qm1CLHdCQUF3QixDQXVCbEIsQ0FBRSxjQXpCSyxrQkFBa0IsQ0F5QkosZUF0QnZDLFFBQVEsQ0FzQndDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7RUFBQTtPQUV0RSxVQUFVLEdBQUcsVUFBQSxHQUFHO1NBQ2YsY0E1QkQsY0FBYyxDQTRCRSxjQTdCMkMsYUFBYSxDQTZCMUMsY0E3QlEsVUFBVSxDQTZCUCxPQUFPLENBQUMsRUFBRSxDQUFFLGNBN0JILE9BQU8sQ0E2QkksR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDO0VBQUE7T0FFckUsb0JBQW9CLEdBQUcsMEJBL0JILGdCQUFnQixFQWdDbkMsQ0FBRSxNQUFNLGdCQWhDRCxVQUFVLEVBZ0NLLE9BQU8sZ0JBaEN0QixVQUFVLENBZ0MwQixFQUMzQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQztPQUNuQix3QkFBd0IsR0FBRywwQkFsQ1AsZ0JBQWdCLEVBbUNuQyxDQUFFLE1BQU0sZ0JBbkNELFVBQVUsRUFtQ0ssT0FBTyxnQkFuQ3RCLFVBQVUsQ0FtQzBCLEVBQzNDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO09BRXJCLHFCQUFxQixHQUFHLDBCQXJDUixlQUFlLEVBc0M5QixDQUFFLFVBQVUsZ0JBdkNMLFVBQVUsQ0F1Q1MsRUFDMUIsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUM7T0FFbkIsc0JBQXNCLEdBQUcsMEJBekM0QixjQUFjLEVBMENsRSxDQUFFLE1BQU0sZ0JBM0NpRSxTQUFTLENBMkM3RCxFQUNyQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO1NBakNuQixrQkFBa0IsR0FBbEIsa0JBQWtCO1NBU2xCLGVBQWUsR0FBZixlQUFlO1NBRWYsT0FBTyxHQUFQLE9BQU87U0FHUCxjQUFjLEdBQWQsY0FBYztTQUdkLFVBQVUsR0FBVixVQUFVO1NBR1Ysb0JBQW9CLEdBQXBCLG9CQUFvQjtTQUdwQix3QkFBd0IsR0FBeEIsd0JBQXdCO1NBSXhCLHFCQUFxQixHQUFyQixxQkFBcUI7U0FJckIsc0JBQXNCLEdBQXRCLHNCQUFzQiIsImZpbGUiOiJtZXRhL2NvbXBpbGUvcHJpdmF0ZS90cmFuc3BpbGUvZXNhc3QtdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3Npb24sIEJpbmFyeUV4cHJlc3Npb24sIElkZW50aWZpZXIsIExpdGVyYWwsIE5ld0V4cHJlc3Npb24sIFN0YXRlbWVudCxcblx0VGhyb3dTdGF0ZW1lbnQsIFVuYXJ5RXhwcmVzc2lvbiwgVmFyaWFibGVEZWNsYXJhdG9yLCBXaGlsZVN0YXRlbWVudCB9IGZyb20gJ2VzYXN0L2Rpc3QvYXN0J1xuaW1wb3J0IG1hbmdsZUlkZW50aWZpZXIgZnJvbSAnZXNhc3QvZGlzdC9tYW5nbGUtaWRlbnRpZmllcidcbmltcG9ydCBzcGVjaWFsaXplLCB7IHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdCB9IGZyb20gJ2VzYXN0L2Rpc3Qvc3BlY2lhbGl6ZSdcbmltcG9ydCB7IGlkQ2FjaGVkIH0gZnJvbSAnZXNhc3QvZGlzdC91dGlsJ1xuXG5jb25zdFxuXHRkZWNsYXJlVG9JZCA9IG5ldyBXZWFrTWFwKCksXG5cdExpdFRydWUgPSBMaXRlcmFsKHRydWUpXG5cbmV4cG9ydCBjb25zdFxuXHRpZEZvckRlY2xhcmVDYWNoZWQgPSBsb2NhbERlY2xhcmUgPT4ge1xuXHRcdGxldCBfID0gZGVjbGFyZVRvSWQuZ2V0KGxvY2FsRGVjbGFyZSlcblx0XHRpZiAoXyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfID0gSWRlbnRpZmllcihtYW5nbGVJZGVudGlmaWVyKGxvY2FsRGVjbGFyZS5uYW1lKSlcblx0XHRcdGRlY2xhcmVUb0lkLnNldChsb2NhbERlY2xhcmUsIF8pXG5cdFx0fVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0aWRGb3JEZWNsYXJlTmV3ID0gbG9jYWxEZWNsYXJlID0+IElkZW50aWZpZXIoaWRGb3JEZWNsYXJlQ2FjaGVkKGxvY2FsRGVjbGFyZSkubmFtZSksXG5cblx0ZGVjbGFyZSA9IChsb2NhbERlY2xhcmUsIHZhbCkgPT5cblx0XHR2YXJpYWJsZURlY2xhcmF0aW9uQ29uc3QoWyBWYXJpYWJsZURlY2xhcmF0b3IoaWRGb3JEZWNsYXJlQ2FjaGVkKGxvY2FsRGVjbGFyZSksIHZhbCkgXSksXG5cblx0ZGVjbGFyZVNwZWNpYWwgPSAobmFtZSwgdmFsKSA9PlxuXHRcdHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdChbIFZhcmlhYmxlRGVjbGFyYXRvcihpZENhY2hlZChuYW1lKSwgdmFsKSBdKSxcblxuXHR0aHJvd0Vycm9yID0gbXNnID0+XG5cdFx0VGhyb3dTdGF0ZW1lbnQoTmV3RXhwcmVzc2lvbihJZGVudGlmaWVyKCdFcnJvcicpLCBbIExpdGVyYWwobXNnKSBdKSksXG5cblx0YmluYXJ5RXhwcmVzc2lvblBsdXMgPSBzcGVjaWFsaXplKEJpbmFyeUV4cHJlc3Npb24sXG5cdFx0WyAnbGVmdCcsIEV4cHJlc3Npb24sICdyaWdodCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IG9wZXJhdG9yOiAnKycgfSksXG5cdGJpbmFyeUV4cHJlc3Npb25Ob3RFcXVhbCA9IHNwZWNpYWxpemUoQmluYXJ5RXhwcmVzc2lvbixcblx0XHRbICdsZWZ0JywgRXhwcmVzc2lvbiwgJ3JpZ2h0JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgb3BlcmF0b3I6ICchPT0nIH0pLFxuXG5cdHVuYXJ5RXhwcmVzc2lvbk5lZ2F0ZSA9IHNwZWNpYWxpemUoVW5hcnlFeHByZXNzaW9uLFxuXHRcdFsgJ2FyZ3VtZW50JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgb3BlcmF0b3I6ICctJyB9KSxcblxuXHR3aGlsZVN0YXRlbWVudEluZmluaXRlID0gc3BlY2lhbGl6ZShXaGlsZVN0YXRlbWVudCxcblx0XHRbICdib2R5JywgU3RhdGVtZW50IF0sXG5cdFx0eyB0ZXN0OiBMaXRUcnVlIH0pXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==