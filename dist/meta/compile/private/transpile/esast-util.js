if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', 'esast/dist/specialize', 'esast/dist/util'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _esastDistSpecialize, _esastDistUtil) {
	'use strict';

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj['default'] : obj; };

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _mangleIdentifier = _interopRequire(_esastDistMangleIdentifier);

	var _specialize = _interopRequire(_esastDistSpecialize);

	const declareToId = new WeakMap(),
	      LitTrue = _esastDistAst.Literal(true);

	const idForDeclareCached = function (localDeclare) {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = _esastDistAst.Identifier(_mangleIdentifier(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      idForDeclareNew = function (localDeclare) {
		return _esastDistAst.Identifier(idForDeclareCached(localDeclare).name);
	},
	      declare = function (localDeclare, val) {
		return _esastDistSpecialize.variableDeclarationConst([_esastDistAst.VariableDeclarator(idForDeclareCached(localDeclare), val)]);
	},
	      declareSpecial = function (name, val) {
		return _esastDistSpecialize.variableDeclarationConst([_esastDistAst.VariableDeclarator(_esastDistUtil.idCached(name), val)]);
	},
	      throwError = function (msg) {
		return _esastDistAst.ThrowStatement(_esastDistAst.NewExpression(_esastDistAst.Identifier('Error'), [_esastDistAst.Literal(msg)]));
	},
	      binaryExpressionPlus = _specialize(_esastDistAst.BinaryExpression, ['left', _esastDistAst.Expression, 'right', _esastDistAst.Expression], { operator: '+' }),
	      unaryExpressionNegate = _specialize(_esastDistAst.UnaryExpression, ['argument', _esastDistAst.Expression], { operator: '-' }),
	      whileStatementInfinite = _specialize(_esastDistAst.WhileStatement, ['body', _esastDistAst.Statement], { test: LitTrue });
	exports.idForDeclareCached = idForDeclareCached;
	exports.idForDeclareNew = idForDeclareNew;
	exports.declare = declare;
	exports.declareSpecial = declareSpecial;
	exports.throwError = throwError;
	exports.binaryExpressionPlus = binaryExpressionPlus;
	exports.unaryExpressionNegate = unaryExpressionNegate;
	exports.whileStatementInfinite = whileStatementInfinite;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS9lc2FzdC11dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFNQSxPQUNDLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRTtPQUMzQixPQUFPLEdBQUcsY0FSd0MsT0FBTyxDQVF2QyxJQUFJLENBQUMsQ0FBQTs7QUFFakIsT0FDTixrQkFBa0IsR0FBRyxVQUFBLFlBQVksRUFBSTtBQUNwQyxNQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ3JDLE1BQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtBQUNwQixJQUFDLEdBQUcsY0FkZ0MsVUFBVSxDQWMvQixrQkFBaUIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDbkQsY0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDaEM7QUFDRCxTQUFPLENBQUMsQ0FBQTtFQUNSO09BRUQsZUFBZSxHQUFHLFVBQUEsWUFBWTtTQUFJLGNBcEJJLFVBQVUsQ0FvQkgsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDO0VBQUE7T0FFbkYsT0FBTyxHQUFHLFVBQUMsWUFBWSxFQUFFLEdBQUc7U0FDM0IscUJBcEJtQix3QkFBd0IsQ0FvQmxCLENBQUUsY0F0Qkssa0JBQWtCLENBc0JKLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7RUFBQTtPQUV4RixjQUFjLEdBQUcsVUFBQyxJQUFJLEVBQUUsR0FBRztTQUMxQixxQkF2Qm1CLHdCQUF3QixDQXVCbEIsQ0FBRSxjQXpCSyxrQkFBa0IsQ0F5QkosZUF0QnZDLFFBQVEsQ0FzQndDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7RUFBQTtPQUV0RSxVQUFVLEdBQUcsVUFBQSxHQUFHO1NBQ2YsY0E1QkQsY0FBYyxDQTRCRSxjQTdCMkMsYUFBYSxDQTZCMUMsY0E3QlEsVUFBVSxDQTZCUCxPQUFPLENBQUMsRUFBRSxDQUFFLGNBN0JILE9BQU8sQ0E2QkksR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDO0VBQUE7T0FFckUsb0JBQW9CLEdBQUcsMEJBL0JILGdCQUFnQixFQWdDbkMsQ0FBRSxNQUFNLGdCQWhDRCxVQUFVLEVBZ0NLLE9BQU8sZ0JBaEN0QixVQUFVLENBZ0MwQixFQUMzQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQztPQUVuQixxQkFBcUIsR0FBRywwQkFsQ1IsZUFBZSxFQW1DOUIsQ0FBRSxVQUFVLGdCQXBDTCxVQUFVLENBb0NTLEVBQzFCLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDO09BRW5CLHNCQUFzQixHQUFHLDBCQXRDNEIsY0FBYyxFQXVDbEUsQ0FBRSxNQUFNLGdCQXhDaUUsU0FBUyxDQXdDN0QsRUFDckIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtTQTlCbkIsa0JBQWtCLEdBQWxCLGtCQUFrQjtTQVNsQixlQUFlLEdBQWYsZUFBZTtTQUVmLE9BQU8sR0FBUCxPQUFPO1NBR1AsY0FBYyxHQUFkLGNBQWM7U0FHZCxVQUFVLEdBQVYsVUFBVTtTQUdWLG9CQUFvQixHQUFwQixvQkFBb0I7U0FJcEIscUJBQXFCLEdBQXJCLHFCQUFxQjtTQUlyQixzQkFBc0IsR0FBdEIsc0JBQXNCIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS9lc2FzdC11dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwcmVzc2lvbiwgQmluYXJ5RXhwcmVzc2lvbiwgSWRlbnRpZmllciwgTGl0ZXJhbCwgTmV3RXhwcmVzc2lvbiwgU3RhdGVtZW50LFxuXHRUaHJvd1N0YXRlbWVudCwgVW5hcnlFeHByZXNzaW9uLCBWYXJpYWJsZURlY2xhcmF0b3IsIFdoaWxlU3RhdGVtZW50IH0gZnJvbSAnZXNhc3QvZGlzdC9hc3QnXG5pbXBvcnQgbWFuZ2xlSWRlbnRpZmllciBmcm9tICdlc2FzdC9kaXN0L21hbmdsZS1pZGVudGlmaWVyJ1xuaW1wb3J0IHNwZWNpYWxpemUsIHsgdmFyaWFibGVEZWNsYXJhdGlvbkNvbnN0IH0gZnJvbSAnZXNhc3QvZGlzdC9zcGVjaWFsaXplJ1xuaW1wb3J0IHsgaWRDYWNoZWQgfSBmcm9tICdlc2FzdC9kaXN0L3V0aWwnXG5cbmNvbnN0XG5cdGRlY2xhcmVUb0lkID0gbmV3IFdlYWtNYXAoKSxcblx0TGl0VHJ1ZSA9IExpdGVyYWwodHJ1ZSlcblxuZXhwb3J0IGNvbnN0XG5cdGlkRm9yRGVjbGFyZUNhY2hlZCA9IGxvY2FsRGVjbGFyZSA9PiB7XG5cdFx0bGV0IF8gPSBkZWNsYXJlVG9JZC5nZXQobG9jYWxEZWNsYXJlKVxuXHRcdGlmIChfID09PSB1bmRlZmluZWQpIHtcblx0XHRcdF8gPSBJZGVudGlmaWVyKG1hbmdsZUlkZW50aWZpZXIobG9jYWxEZWNsYXJlLm5hbWUpKVxuXHRcdFx0ZGVjbGFyZVRvSWQuc2V0KGxvY2FsRGVjbGFyZSwgXylcblx0XHR9XG5cdFx0cmV0dXJuIF9cblx0fSxcblxuXHRpZEZvckRlY2xhcmVOZXcgPSBsb2NhbERlY2xhcmUgPT4gSWRlbnRpZmllcihpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKS5uYW1lKSxcblxuXHRkZWNsYXJlID0gKGxvY2FsRGVjbGFyZSwgdmFsKSA9PlxuXHRcdHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdChbIFZhcmlhYmxlRGVjbGFyYXRvcihpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKSwgdmFsKSBdKSxcblxuXHRkZWNsYXJlU3BlY2lhbCA9IChuYW1lLCB2YWwpID0+XG5cdFx0dmFyaWFibGVEZWNsYXJhdGlvbkNvbnN0KFsgVmFyaWFibGVEZWNsYXJhdG9yKGlkQ2FjaGVkKG5hbWUpLCB2YWwpIF0pLFxuXG5cdHRocm93RXJyb3IgPSBtc2cgPT5cblx0XHRUaHJvd1N0YXRlbWVudChOZXdFeHByZXNzaW9uKElkZW50aWZpZXIoJ0Vycm9yJyksIFsgTGl0ZXJhbChtc2cpIF0pKSxcblxuXHRiaW5hcnlFeHByZXNzaW9uUGx1cyA9IHNwZWNpYWxpemUoQmluYXJ5RXhwcmVzc2lvbixcblx0XHRbICdsZWZ0JywgRXhwcmVzc2lvbiwgJ3JpZ2h0JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgb3BlcmF0b3I6ICcrJyB9KSxcblxuXHR1bmFyeUV4cHJlc3Npb25OZWdhdGUgPSBzcGVjaWFsaXplKFVuYXJ5RXhwcmVzc2lvbixcblx0XHRbICdhcmd1bWVudCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IG9wZXJhdG9yOiAnLScgfSksXG5cblx0d2hpbGVTdGF0ZW1lbnRJbmZpbml0ZSA9IHNwZWNpYWxpemUoV2hpbGVTdGF0ZW1lbnQsXG5cdFx0WyAnYm9keScsIFN0YXRlbWVudCBdLFxuXHRcdHsgdGVzdDogTGl0VHJ1ZSB9KVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=