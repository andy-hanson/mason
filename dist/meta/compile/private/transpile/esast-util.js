if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/util', 'esast/dist/specialize', 'esast/dist/mangle-identifier'], function (exports, _esastDistAst, _esastDistUtil, _esastDistSpecialize, _esastDistMangleIdentifier) {
	'use strict';

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj['default'] : obj; };

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _mangleIdentifier = _interopRequire(_esastDistMangleIdentifier);

	const declareToId = new WeakMap();
	const idForDeclareCached = function (localDeclare) {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = _esastDistAst.Identifier(_mangleIdentifier(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      idForDeclareNew = function (localDeclare) {
		return _esastDistAst.Identifier(idForDeclareCached(localDeclare).name);
	},
	      declare = function (localDeclare, val) {
		return _esastDistSpecialize.variableDeclarationConst([_esastDistAst.VariableDeclarator(idForDeclareCached(localDeclare), val)]);
	},
	      declareSpecial = function (name, val) {
		return _esastDistSpecialize.variableDeclarationConst([_esastDistAst.VariableDeclarator(_esastDistUtil.idCached(name), val)]);
	},
	      throwError = function (msg) {
		return _esastDistAst.ThrowStatement(_esastDistAst.NewExpression(_esastDistAst.Identifier('Error'), [_esastDistAst.Literal(msg)]));
	};
	exports.idForDeclareCached = idForDeclareCached;
	exports.idForDeclareNew = idForDeclareNew;
	exports.declare = declare;
	exports.declareSpecial = declareSpecial;
	exports.throwError = throwError;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9wcml2YXRlL3RyYW5zcGlsZS9lc2FzdC11dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBTUEsT0FBTSxXQUFXLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtBQUMxQixPQUNOLGtCQUFrQixHQUFHLFVBQUEsWUFBWSxFQUFJO0FBQ3BDLE1BQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDckMsTUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ3BCLElBQUMsR0FBRyxjQVhFLFVBQVUsQ0FXRCxrQkFBaUIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDbkQsY0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDaEM7QUFDRCxTQUFPLENBQUMsQ0FBQTtFQUNSO09BRUQsZUFBZSxHQUFHLFVBQUEsWUFBWTtTQUFJLGNBakIxQixVQUFVLENBaUIyQixrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUM7RUFBQTtPQUVuRixPQUFPLEdBQUcsVUFBQyxZQUFZLEVBQUUsR0FBRztTQUMzQixxQkFqQk8sd0JBQXdCLENBaUJOLENBQUUsY0FuQlosa0JBQWtCLENBbUJhLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7RUFBQTtPQUV4RixjQUFjLEdBQUcsVUFBQyxJQUFJLEVBQUUsR0FBRztTQUMxQixxQkFwQk8sd0JBQXdCLENBb0JOLENBQUUsY0F0Qlosa0JBQWtCLENBc0JhLGVBckJ2QyxRQUFRLENBcUJ3QyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBRSxDQUFDO0VBQUE7T0FFdEUsVUFBVSxHQUFHLFVBQUEsR0FBRztTQUNmLGNBekJELGNBQWMsQ0F5QkUsY0ExQmEsYUFBYSxDQTBCWixjQTFCdEIsVUFBVSxDQTBCdUIsT0FBTyxDQUFDLEVBQUUsQ0FBRSxjQTFCakMsT0FBTyxDQTBCa0MsR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDO0VBQUEsQ0FBQTtTQWxCckUsa0JBQWtCLEdBQWxCLGtCQUFrQjtTQVNsQixlQUFlLEdBQWYsZUFBZTtTQUVmLE9BQU8sR0FBUCxPQUFPO1NBR1AsY0FBYyxHQUFkLGNBQWM7U0FHZCxVQUFVLEdBQVYsVUFBVSIsImZpbGUiOiJtZXRhL2NvbXBpbGUvcHJpdmF0ZS90cmFuc3BpbGUvZXNhc3QtdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElkZW50aWZpZXIsIExpdGVyYWwsIE5ld0V4cHJlc3Npb24sXG5cdFRocm93U3RhdGVtZW50LCBWYXJpYWJsZURlY2xhcmF0b3IgfSBmcm9tICdlc2FzdC9kaXN0L2FzdCdcbmltcG9ydCB7IGlkQ2FjaGVkIH0gZnJvbSAnZXNhc3QvZGlzdC91dGlsJ1xuaW1wb3J0IHsgdmFyaWFibGVEZWNsYXJhdGlvbkNvbnN0IH0gZnJvbSAnZXNhc3QvZGlzdC9zcGVjaWFsaXplJ1xuaW1wb3J0IG1hbmdsZUlkZW50aWZpZXIgZnJvbSAnZXNhc3QvZGlzdC9tYW5nbGUtaWRlbnRpZmllcidcblxuY29uc3QgZGVjbGFyZVRvSWQgPSBuZXcgV2Vha01hcCgpXG5leHBvcnQgY29uc3Rcblx0aWRGb3JEZWNsYXJlQ2FjaGVkID0gbG9jYWxEZWNsYXJlID0+IHtcblx0XHRsZXQgXyA9IGRlY2xhcmVUb0lkLmdldChsb2NhbERlY2xhcmUpXG5cdFx0aWYgKF8gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XyA9IElkZW50aWZpZXIobWFuZ2xlSWRlbnRpZmllcihsb2NhbERlY2xhcmUubmFtZSkpXG5cdFx0XHRkZWNsYXJlVG9JZC5zZXQobG9jYWxEZWNsYXJlLCBfKVxuXHRcdH1cblx0XHRyZXR1cm4gX1xuXHR9LFxuXG5cdGlkRm9yRGVjbGFyZU5ldyA9IGxvY2FsRGVjbGFyZSA9PiBJZGVudGlmaWVyKGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpLm5hbWUpLFxuXG5cdGRlY2xhcmUgPSAobG9jYWxEZWNsYXJlLCB2YWwpID0+XG5cdFx0dmFyaWFibGVEZWNsYXJhdGlvbkNvbnN0KFsgVmFyaWFibGVEZWNsYXJhdG9yKGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpLCB2YWwpIF0pLFxuXG5cdGRlY2xhcmVTcGVjaWFsID0gKG5hbWUsIHZhbCkgPT5cblx0XHR2YXJpYWJsZURlY2xhcmF0aW9uQ29uc3QoWyBWYXJpYWJsZURlY2xhcmF0b3IoaWRDYWNoZWQobmFtZSksIHZhbCkgXSksXG5cblx0dGhyb3dFcnJvciA9IG1zZyA9PlxuXHRcdFRocm93U3RhdGVtZW50KE5ld0V4cHJlc3Npb24oSWRlbnRpZmllcignRXJyb3InKSwgWyBMaXRlcmFsKG1zZykgXSkpXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==