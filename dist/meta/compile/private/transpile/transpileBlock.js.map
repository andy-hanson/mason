{"version":3,"sources":["meta/compile/private/transpile/transpileBlock.js"],"names":[],"mappings":";;;KAAS,cAAc,iBAAd,cAAc;KAAE,eAAe,iBAAf,eAAe;KAC/B,YAAY,kBAAZ,YAAY;KACZ,QAAQ,eAAR,QAAQ;KAAE,YAAY,eAAZ,YAAY;KACtB,OAAO,SAAP,OAAO;KAAE,OAAO,SAAP,OAAO;KAChB,MAAM,QAAN,MAAM;KAAE,IAAI,QAAJ,IAAI;KAAE,IAAI,QAAJ,IAAI;KAClB,MAAM,UAAN,MAAM;KACN,OAAO,cAAP,OAAO;KACP,CAAC,SAAD,CAAC;KAAE,wBAAwB,SAAxB,wBAAwB;KAAE,SAAS,SAAT,SAAS;;kBAEhC,UAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAK;AACpD,MAAI,IAAI,KAAK,SAAS,EACrB,IAAI,GAAG,EAAE,CAAA;AACV,MAAI,YAAY,KAAK,SAAS,EAC7B,YAAY,GAAG,KAAK,GAAG,IAAI,CAAA;AAC5B,QAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,UAAA,IAAI;UAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;GAAA,CAAC,CAAA;AAChE,QAAM,GAAG,GAAG,MAAM,CAAC,YAAY,EAC9B,UAAA,EAAE,EAAI;AACL,SAAM,CAAC,CAAC,YAAY,QAAQ,CAAC,CAAA;AAC7B,SAAM,QAAQ,GAAG,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;AAClF,UAAO,MAAM,CAAC,KAAK,EAClB,UAAA,CAAC;WAAI,CAAE,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAE,SAAS,CAAE,CAAC;IAAA,EACvD;WAAM,CAAE,eAAe,CAAC,QAAQ,CAAC,CAAE;IAAA,CAAC,CAAA;GACrC,EACD;UAAM,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,YAAY,QAAQ,EAAE;WAAM,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;IAAA,CAAC,CAAC;GAAA,CAAC,CAAA;AAC3F,SAAO,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAA;EAC7C","file":"meta/compile/private/transpile/transpileBlock.js","sourcesContent":["import { BlockStatement, ReturnStatement } from 'esast/dist/ast'\nimport { toStatements } from 'esast/dist/util'\nimport { BlockVal, LocalDeclare } from '../../Expression'\nimport { flatMap, isEmpty } from '../U/Bag'\nimport { ifElse, opIf, None } from '../U/Op'\nimport { assert } from '../U/util'\nimport { declare } from './esast-util'\nimport { t, maybeWrapInCheckContains, ReturnRes } from './util'\n\nexport default (_, tx, lead, opResDeclare, opOut) => {\n\tif (lead === undefined)\n\t\tlead = []\n\tif (opResDeclare === undefined)\n\t\topResDeclare = opOut = None\n\tconst body = flatMap(_.lines, line => toStatements(t(tx)(line)))\n\tconst fin = ifElse(opResDeclare,\n\t\trd => {\n\t\t\tassert(_ instanceof BlockVal)\n\t\t\tconst returned = maybeWrapInCheckContains(t(tx)(_.returned), tx, rd.opType, 'res')\n\t\t\treturn ifElse(opOut,\n\t\t\t\to => [ declare(rd, returned) ].concat(o, [ ReturnRes ]),\n\t\t\t\t() => [ ReturnStatement(returned) ])\n\t\t},\n\t\t() => opOut.concat(opIf(_ instanceof BlockVal, () => ReturnStatement(t(tx)(_.returned)))))\n\treturn BlockStatement(lead.concat(body, fin))\n}\n"],"sourceRoot":"/src"}