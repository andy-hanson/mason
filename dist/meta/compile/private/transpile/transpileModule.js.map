{"version":3,"sources":["meta/compile/private/transpile/transpileModule.js"],"names":[],"mappings":"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","file":"meta/compile/private/transpile/transpileModule.js","sourcesContent":["import { ArrayExpression, BinaryExpression, BlockStatement, CallExpression, Identifier,\n\tExpressionStatement, FunctionExpression, IfStatement, Literal, ObjectExpression, Program,\n\tReturnStatement, UnaryExpression, VariableDeclaration, VariableDeclarator } from 'esast/dist/ast'\nimport { idCached, member } from 'esast/dist/util'\nimport { assignmentExpressionPlain } from 'esast/dist/specialize'\nimport { UseDo } from '../../Expression'\nimport manglePath from '../manglePath'\nimport { flatMap, isEmpty, last, push } from '../U/Bag'\nimport { None, opIf } from '../U/Op'\nimport { idForDeclareCached } from './esast-util'\nimport { t, IdDefine, IdExports, IdModule, lazyWrap,\n\tmsGetModule, msLazyGetModule, msGetDefaultExport,\n\tmakeDestructureDeclarators, msLazy } from './util'\n\n/*\n'use strict';\nif (typeof define !== 'function')\n\tvar define = require('amdefine')(module);\ndefine(['exports', 'a', 'b', 'c'], function(exports) {\n\t// Fake exports -- just a getter.\n\texports._get = _ms.lazy(function() {\n\t\tconst exports = {} // Real exports\n\t\t... imports ...\n\t\t{\n\t\t\t... exports ...\n\t\t}\n\t\treturn exports\n\t})\n})\n*/\nexport default (_, tx) => {\n\tconst allUses = _.doUses.concat(_.uses, _.debugUses)\n\tconst amdNames = ArrayExpression(AmdFirstUses.concat(\n\t\tallUses.map(use => Literal(manglePath(use.path, tx)))))\n\tconst useIdentifiers = allUses.map(useIdentifier)\n\tconst amdArgs = AmdFirstArgs.concat(useIdentifiers)\n\tconst useDos = _.doUses.map((use, i) => {\n\t\tconst d = ExpressionStatement(msGetModule([ useIdentifiers[i] ]))\n\t\td.loc = use.loc\n\t\treturn d\n\t})\n\tconst allUseDeclarators = flatMap(_.uses.concat(_.debugUses), (use, i) =>\n\t\tuseDeclarators(tx, use, useIdentifiers[i + _.doUses.length]))\n\tconst opUseDeclare = opIf(!isEmpty(allUseDeclarators),\n\t\t() => VariableDeclaration('const', allUseDeclarators))\n\n\t// TODO: Some way of determining when it's OK for a module to not be lazy.\n\tconst isLazy = tx.opts().lazyModule()\n\n\tconst lead = useDos.concat(opUseDeclare, opIf(isLazy, () => DeclareExports))\n\tconst trail = [ ReturnStatement(IdExports) ]\n\tconst moduleBody = t(tx, lead, None, trail)(_.block)\n\tconst body =\n\t\tisLazy ?\n\t\t\tBlockStatement([ lazyBody(moduleBody) ])\n\t\t\t: moduleBody\n\n\tconst doDefine = ExpressionStatement(\n\t\tCallExpression(IdDefine, [\n\t\t\tamdNames,\n\t\t\tFunctionExpression(null, amdArgs, body) ]))\n\n\treturn Program([ UseStrict ].concat(\n\t\topIf(tx.opts().amdefine(), () => AmdefineHeader),\n\t\t[ doDefine ]))\n}\n\nconst useDeclarators = (tx, _, moduleIdentifier) => {\n\t// TODO: Could be neater about this\n\tconst isLazy = (isEmpty(_.used) ? _.opUseDefault[0] : _.used[0]).isLazy\n\tconst value = (isLazy ? msLazyGetModule : msGetModule)([ moduleIdentifier ])\n\n\tconst usedDefault = _.opUseDefault.map(def => {\n\t\tconst defexp = msGetDefaultExport([ moduleIdentifier ])\n\t\tconst val = isLazy ? lazyWrap(defexp) : defexp\n\t\tconst vd = VariableDeclarator(idForDeclareCached(def), val)\n\t\tvd.loc = def.loc\n\t\treturn vd\n\t})\n\n\tconst usedDestruct = isEmpty(_.used) ? [] :\n\t\tmakeDestructureDeclarators(tx, _.loc, _.used, isLazy, value, '=', true)\n\tusedDestruct.forEach(_ => _.loc = _.loc)\n\n\treturn usedDefault.concat(usedDestruct)\n}\n\nconst\n\tuseIdentifier = (use, i) => idCached(`${last(use.path.split('/'))}_${i}`),\n\n\t// const exports = { }\n\tDeclareExports = VariableDeclaration('const', [\n\t\tVariableDeclarator(IdExports, ObjectExpression([]))]),\n\n\tlazyBody = body =>\n\t\tExpressionStatement(\n\t\t\tassignmentExpressionPlain(member(IdExports, '_get'), msLazy([\n\t\t\t\tFunctionExpression(null, [ ], body)]))),\n\n\t// if (typeof define !== 'function') var define = require('amdefine')(module)\n\tAmdefineHeader = IfStatement(\n\t\tBinaryExpression('!==', UnaryExpression('typeof', IdDefine), Literal('function')),\n\t\tVariableDeclaration('var', [\n\t\t\tVariableDeclarator(IdDefine, CallExpression(\n\t\t\t\tCallExpression(Identifier('require'), [ Literal('amdefine') ]),\n\t\t\t\t[ IdModule ])) ])),\n\n\tUseStrict = ExpressionStatement(Literal('use strict')),\n\n\tAmdFirstUses = [ Literal('exports') ],\n\tAmdFirstArgs = [ IdExports ]\n"],"sourceRoot":"/src"}