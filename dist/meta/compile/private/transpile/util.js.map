{"version":3,"sources":["meta/compile/private/transpile/util.js"],"names":[],"mappings":"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","file":"meta/compile/private/transpile/util.js","sourcesContent":["import { ArrayExpression, AssignmentExpression, BreakStatement, CallExpression, ExpressionStatement,\n\tIdentifier, Literal, ReturnStatement, VariableDeclarator } from 'esast/dist/ast'\nimport { member, thunk } from 'esast/dist/util'\nimport { unshift } from '../U/Bag'\nimport { ifElse, None } from '../U/Op'\nimport { assert } from '../U/util'\nimport { t } from './transpile'\nimport { idForDeclareCached, idForDeclareNew } from './esast-util'\n\nexport const\n\tLitEmptyArray = ArrayExpression([]),\n\tLitEmptyString = Literal(''),\n\tLitNull = Literal(null),\n\tLitStrDisplayName = Literal('displayName'),\n\tBreak = BreakStatement(),\n\tReturnRes = ReturnStatement(Identifier('res')),\n\tIdDefine = Identifier('define'),\n\tIdDisplayName = Identifier('displayName'),\n\tIdExports = Identifier('exports'),\n\tIdArguments = Identifier('arguments'),\n\tIdArraySliceCall = member(member(LitEmptyArray, 'slice'), 'call'),\n\tIdFunctionApplyCall = member(member(Identifier('Function'), 'apply'), 'call'),\n\tIdModule = Identifier('module'),\n\tIdMs = Identifier('_ms')\n\nconst ms = name => {\n\tconst m = member(IdMs, name)\n\treturn args => CallExpression(m, args)\n}\nexport const\n\tmsGetDefaultExport = ms('getDefaultExport'),\n\tmsGet = ms('get'),\n\tmsGetModule = ms('getModule'),\n\tmsLazyGetModule = ms('lazyGetModule'),\n\tmsArr = ms('arr'),\n\tmsBool = ms('bool'),\n\tmsLset = ms('lset'),\n\tmsSet = ms('set'),\n\tmsMap = ms('map'),\n\tmsShow = ms('show'),\n\tmsCheckContains = ms('checkContains'),\n\tmsUnlazy = ms('unlazy'),\n\tmsLazy = ms('lazy'),\n\tmsLazyGet = ms('lazyProp')\n\nexport const makeDestructureDeclarators = (cx, loc, assignees, isLazy, value, k, isModule) => {\n\tconst destructuredName = `_$${loc.start.line}`\n\tconst idDestructured = Identifier(destructuredName)\n\tconst declarators = assignees.map(assignee => {\n\t\t// TODO: Don't compile it if it's never accessed\n\t\tconst get = getMember(cx, idDestructured, assignee.name, isLazy, isModule)\n\t\treturn makeDeclarator(cx, assignee.loc, assignee, k, get, isLazy)\n\t})\n\t// Getting lazy module is done by ms.lazyGetModule.\n\tconst val = (isLazy && !isModule) ? lazyWrap(value) : value\n\treturn unshift(VariableDeclarator(idDestructured, val), declarators)\n}\n\nconst getMember = (cx, astObject, gotName, isLazy, isModule) => {\n\tif (isLazy)\n\t\treturn msLazyGet([ astObject, Literal(gotName) ])\n\telse if (isModule && cx.opts.includeUseChecks())\n\t\treturn msGet([ astObject, Literal(gotName) ])\n\telse\n\t\treturn member(astObject, gotName)\n}\n\nexport const makeDeclarator = (cx, loc, assignee, k, value, valueIsAlreadyLazy) => {\n\t// TODO: assert(isEmpty(assignee.opType))\n\t// or TODO: Allow type check on lazy value?\n\tvalue = assignee.isLazy ? value :\n\t\tmaybeWrapInCheckContains(cx, value, assignee.opType, assignee.name)\n\tswitch (k) {\n\t\tcase '=': case '. ': case '<~': case '<~~': {\n\t\t\tconst val = assignee.isLazy && !valueIsAlreadyLazy ? lazyWrap(value) : value\n\t\t\tassert(assignee.isLazy || !valueIsAlreadyLazy)\n\t\t\treturn VariableDeclarator(idForDeclareCached(assignee), val)\n\t\t}\n\t\tcase 'export': {\n\t\t\t// TODO:ES6\n\t\t\tassert(!assignee.isLazy)\n\t\t\treturn VariableDeclarator(\n\t\t\t\tidForDeclareCached(assignee),\n\t\t\t\tAssignmentExpression('=', member(IdExports, assignee.name), value))\n\t\t}\n\t\tdefault: throw new Error(k)\n\t}\n}\n\nexport const accessLocal = (localAccess, vr) =>\n\taccessLocalDeclare(vr.accessToLocal.get(localAccess))\n\nexport const accessLocalDeclare = localDeclare =>\n\tlocalDeclare.isLazy ?\n\t\tmsUnlazy([ idForDeclareCached(localDeclare) ]) :\n\t\tidForDeclareNew(localDeclare)\n\nexport const maybeWrapInCheckContains = (cx, ast, opType, name) =>\n\tcx.opts.includeTypeChecks() ?\n\t\tifElse(opType,\n\t\t\ttyp => msCheckContains([ t(typ), ast, Literal(name) ]),\n\t\t\t() => ast) :\n\t\tast\n\nexport const opLocalCheck = (cx, local, isLazy) => {\n\t// TODO: Way to typecheck lazies\n\tif (!cx.opts.includeTypeChecks() || isLazy)\n\t\treturn None\n\telse return local.opType.map(typ =>\n\t\tExpressionStatement(msCheckContains([\n\t\t\tt(typ),\n\t\t\taccessLocalDeclare(local),\n\t\t\tLiteral(local.name)])))\n}\n\nexport const lazyWrap = value => msLazy([ thunk(value) ])\n"],"sourceRoot":"/src"}