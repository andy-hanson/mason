{"version":3,"sources":["meta/compile/private/transpile/transpileObj.js"],"names":[],"mappings":"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","file":"meta/compile/private/transpile/transpileObj.js","sourcesContent":["import { Literal, ObjectExpression } from 'esast/dist/ast'\nimport { propertyIdOrLiteralCached, thunk } from 'esast/dist/util'\nimport { property } from 'esast/dist/specialize'\nimport { cat, flatMap, isEmpty, unshift } from '../U/Bag'\nimport { ifElse } from '../U/Op'\nimport { assert } from '../U/util'\nimport { t, accessLocalDeclare, msLset, msSet, IdDisplayName, LitStrDisplayName } from './util'\n\nexport const\n\ttranspileObjReturn = (_, tx) => {\n\t\tconst nonDebugKeys = _.keys\n\t\t// TODO: includeTypeChecks() is not the right method for this\n\t\tconst keys = tx.opts().includeTypeChecks() ? _.keys.concat(_.debugKeys) : _.keys\n\t\t// Make compilation deterministic.\n\t\tkeys.sort()\n\n\t\treturn ifElse(_.opObjed,\n\t\t\tobjed => {\n\t\t\t\tconst astObjed = t(tx)(objed)\n\t\t\t\tif (isEmpty(keys)) {\n\t\t\t\t\tassert(isEmpty(nonDebugKeys))\n\t\t\t\t\treturn astObjed\n\t\t\t\t} else {\n\t\t\t\t\tconst keysVals = cat(\n\t\t\t\t\t\tflatMap(keys, key => [ Literal(key.name), accessLocalDeclare(key) ]),\n\t\t\t\t\t\tflatMap(_.opDisplayName, dn => [LitStrDisplayName, Literal(dn)]))\n\t\t\t\t\tconst anyLazy = keys.some(key => key.isLazy)\n\t\t\t\t\tconst args = unshift(astObjed, keysVals)\n\t\t\t\t\treturn (anyLazy ? msLset : msSet)(args)\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tassert(!isEmpty(keys))\n\t\t\t\tconst props = keys.map(key => {\n\t\t\t\t\tconst val = accessLocalDeclare(key)\n\t\t\t\t\tconst id = propertyIdOrLiteralCached(key.name)\n\t\t\t\t\treturn key.isLazy ?\n\t\t\t\t\t\tproperty('get', id, thunk(val)) :\n\t\t\t\t\t\tproperty('init', id, val)\n\t\t\t\t})\n\t\t\t\tconst opPropDisplayName = _.opDisplayName.map(dn =>\n\t\t\t\t\tproperty('init', IdDisplayName, Literal(dn)))\n\t\t\t\treturn ObjectExpression(cat(props, opPropDisplayName))\n\t\t\t})\n\t},\n\n\ttranspileObjSimple = (_, tx) => {\n\t\t// Sort to keep compilation deterministic.\n\t\tconst keys = Object.getOwnPropertyNames(_.keysVals).sort()\n\t\treturn ObjectExpression(keys.map(key =>\n\t\t\tproperty('init', propertyIdOrLiteralCached(key), t(tx)(_.keysVals[key]))))\n\t}\n"],"sourceRoot":"/src"}