{"version":3,"sources":["meta/compile/private/transpile/transpileObj.js"],"names":[],"mappings":"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","file":"meta/compile/private/transpile/transpileObj.js","sourcesContent":["import { Literal, ObjectExpression } from 'esast/dist/ast'\nimport { propertyIdOrLiteralCached, thunk } from 'esast/dist/util'\nimport { property } from 'esast/dist/specialize'\nimport { cat, flatMap, isEmpty, unshift } from '../U/Bag'\nimport { ifElse } from '../U/Op'\nimport { assert } from '../U/util'\nimport { t } from './transpile'\nimport { accessLocalDeclare, msLset, msSet, IdDisplayName, LitStrDisplayName } from './util'\n\nexport const\n\ttranspileObjReturn = (_, cx) => {\n\t\tconst nonDebugKeys = _.keys\n\t\t// TODO: includeTypeChecks() is not the right method for this\n\t\tconst keys = cx.opts.includeTypeChecks() ? _.keys.concat(_.debugKeys) : _.keys\n\t\t// Make compilation deterministic.\n\t\tkeys.sort()\n\n\t\treturn ifElse(_.opObjed,\n\t\t\tobjed => {\n\t\t\t\tconst astObjed = t(objed)\n\t\t\t\tif (isEmpty(keys)) {\n\t\t\t\t\tassert(isEmpty(nonDebugKeys))\n\t\t\t\t\treturn astObjed\n\t\t\t\t} else {\n\t\t\t\t\tconst keysVals = cat(\n\t\t\t\t\t\tflatMap(keys, key => [ Literal(key.name), accessLocalDeclare(key) ]),\n\t\t\t\t\t\tflatMap(_.opDisplayName, dn => [LitStrDisplayName, Literal(dn)]))\n\t\t\t\t\tconst anyLazy = keys.some(key => key.isLazy)\n\t\t\t\t\tconst args = unshift(astObjed, keysVals)\n\t\t\t\t\treturn (anyLazy ? msLset : msSet)(args)\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tassert(!isEmpty(keys))\n\t\t\t\tconst props = keys.map(key => {\n\t\t\t\t\tconst val = accessLocalDeclare(key)\n\t\t\t\t\tconst id = propertyIdOrLiteralCached(key.name)\n\t\t\t\t\treturn key.isLazy ?\n\t\t\t\t\t\tproperty('get', id, thunk(val)) :\n\t\t\t\t\t\tproperty('init', id, val)\n\t\t\t\t})\n\t\t\t\tconst opPropDisplayName = _.opDisplayName.map(dn =>\n\t\t\t\t\tproperty('init', IdDisplayName, Literal(dn)))\n\t\t\t\treturn ObjectExpression(cat(props, opPropDisplayName))\n\t\t\t})\n\t},\n\n\ttranspileObjSimple = _ => {\n\t\t// Sort to keep compilation deterministic.\n\t\tconst keys = Object.getOwnPropertyNames(_.keysVals).sort()\n\t\treturn ObjectExpression(keys.map(key =>\n\t\t\tproperty('init', propertyIdOrLiteralCached(key), t(_.keysVals[key]))))\n\t}\n"],"sourceRoot":"/src"}