{"version":3,"sources":["meta/compile/private/parse.js"],"names":[],"mappings":"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","file":"meta/compile/private/parse.js","sourcesContent":["import Loc from 'esast/dist/Loc'\nimport { code } from '../CompileError'\nimport { Assign, AssignDestructure, BlockDo, BlockVal, BlockWrap, Call, CaseDoPart, CaseValPart,\n\tCaseDo, CaseVal, Debug, ELiteral, EndLoop, Fun, GlobalAccess, Lazy, ListEntry, ListReturn,\n\tListSimple, LocalAccess, LocalDeclare, LocalDeclare, Loop, MapEntry, MapReturn, Member, Module,\n\tModuleDefaultExport, ObjReturn, ObjSimple, Quote, Special, Splat, Val, UseDo, Use,\n\tYield, YieldTo } from '../Expression'\nimport { JsGlobals, SpecialKeywords } from './Lang'\nimport { CallOnFocus, DotName, Group, G_Block, G_Bracket,\n\tG_Paren, G_Space, G_Quote, Keyword, Literal, Name } from './Token'\nimport { cat, head, isEmpty, last, push, repeat, rtail, tail, unshift } from './U/Bag'\nimport { ifElse, None, opIf, some } from './U/Op'\nimport { assert } from './U/util'\n\nexport default function parse(cx, rootToken) {\n\tassert(Group.isBlock(rootToken))\n\tlet tokens = rootToken.tokens\n\tlet loc = rootToken.loc\n\n\t// Functions for moving through tokens:\n\tconst\n\t\tcheck = (cond, message) =>\n\t\t\tcx.check(cond, loc, message),\n\t\tcheckEmpty = (tokens, message) =>\n\t\t\tcx.check(tokens.isEmpty(), () => _locFromTokens(tokens), message),\n\t\tfail = message => cx.fail(loc, message),\n\t\tw0 = (_tokens, fun) => {\n\t\t\tconst t = tokens\n\t\t\ttokens = _tokens\n\t\t\tconst l = loc\n\t\t\tloc = tokens.isEmpty() ? loc : _locFromTokens(tokens)\n\t\t\tconst res = fun()\n\t\t\ttokens = t\n\t\t\tloc = l\n\t\t\treturn res\n\t\t},\n\t\tw1 = (_tokens, fun, arg) => {\n\t\t\tconst t = tokens\n\t\t\ttokens = _tokens\n\t\t\tconst l = loc\n\t\t\tloc = tokens.isEmpty() ? loc : Loc(tokens.head().loc.start, tokens.last().loc.end)\n\t\t\tconst res = fun(arg)\n\t\t\ttokens = t\n\t\t\tloc = l\n\t\t\treturn res\n\t\t},\n\t\tw2 = (_tokens, fun, arg, arg2) => {\n\t\t\tconst t = tokens\n\t\t\ttokens = _tokens\n\t\t\tconst l = loc\n\t\t\tloc = tokens.isEmpty() ? loc : Loc(tokens.head().loc.start, tokens.last().loc.end)\n\t\t\tconst res = fun(arg, arg2)\n\t\t\ttokens = t\n\t\t\tloc = l\n\t\t\treturn res\n\t\t},\n\t\twg = (group, fun, arg) => {\n\t\t\tconst t = tokens\n\t\t\ttokens = group.tokens\n\t\t\tconst l = loc\n\t\t\tloc = group.loc\n\t\t\tconst res = fun(arg)\n\t\t\ttokens = t\n\t\t\tloc = l\n\t\t\treturn res\n\t\t},\n\t\t_locFromTokens = tokens => Loc(tokens.head().loc.start, tokens.last().loc.end)\n\n\tconst parseModule = () => {\n\t\tconst { uses: doUses, rest } = tryParseUse('use!')\n\t\tconst { uses: plainUses, rest: rest1 } = w1(rest, tryParseUse, 'use')\n\t\tconst { uses: lazyUses, rest: rest2 } = w1(rest1, tryParseUse, 'use~')\n\t\tconst { uses: debugUses, rest: rest3 } = w1(rest2, tryParseUse, 'use-debug')\n\t\tconst block = w0(rest3, parseModuleBody)\n\n\t\tblock.lines.forEach(line => {\n\t\t\tif (line instanceof Assign && line.k === 'export')\n\t\t\t\tcheck(line.assignee.name !== 'displayName',\n\t\t\t\t\t'Module can not choose its own displayName.')\n\t\t})\n\t\tif (cx.opts.moduleDisplayName())\n\t\t\tblock.lines.push(\n\t\t\t\tAssign(\n\t\t\t\t\tloc,\n\t\t\t\t\tLocalDeclare(loc, 'displayName', [], false, true),\n\t\t\t\t\t'export',\n\t\t\t\t\tELiteral(loc, cx.opts.moduleName(), String)))\n\n\t\tconst uses = plainUses.concat(lazyUses)\n\t\treturn Module(loc, doUses, uses, debugUses, block)\n\t}\n\n\t// parseBlock\n\tconst\n\t\ttakeBlockLinesFromEnd = () => {\n\t\t\tcheck(!tokens.isEmpty(), 'Expected an indented block')\n\t\t\tconst l = tokens.last()\n\t\t\tcx.check(Group.isBlock(l), l.loc, 'Expected an indented block at the end')\n\t\t\treturn { before: tokens.rtail(), lines: l.tokens }\n\t\t},\n\n\t\tblockWrap = () => BlockWrap(loc, _parseBlockBody('val')),\n\n\t\tjustBlockDo = () => {\n\t\t\tconst { before, block } = takeBlockDoFromEnd()\n\t\t\tcheck(before.isEmpty(), 'Expected just a block.')\n\t\t\treturn block\n\t\t},\n\t\tjustBlockVal = () => {\n\t\t\tconst { before, block } = takeBlockValFromEnd()\n\t\t\tcheck(before.isEmpty(), 'Expected just a block.')\n\t\t\treturn block\n\t\t},\n\n\t\ttakeBlockDoFromEnd = () => {\n\t\t\tconst{ before, lines } = takeBlockLinesFromEnd()\n\t\t\tconst block = w0(lines, _parseBodyDo)\n\t\t\treturn { before, block }\n\t\t},\n\t\ttakeBlockValFromEnd = () => {\n\t\t\tconst { before, lines } = takeBlockLinesFromEnd()\n\t\t\tconst block = w1(lines, _parseBlockBody, 'val')\n\t\t\treturn { before, block }\n\t\t},\n\n\t\t// TODO: Just have module return a value and use a normal block.\n\t\tparseModuleBody = () => _parseBlockBody('module'),\n\n\t\tparseBlockFromLines = () => _parseBlockBody('any'),\n\n\t\t// Gets lines in a region or Debug.\n\t\tparseLinesFromBlock = () => {\n\t\t\tconst h = tokens.head()\n\t\t\tcx.check(tokens.size() > 1, h.loc, () => `Expected indented block after ${h}`)\n\t\t\tconst block = tokens.second()\n\t\t\tassert(tokens.size() === 2 && Group.isBlock(block))\n\t\t\treturn block.tokens.flatMap(line => wg(line, parseLineOrLines))\n\t\t}\n\n\t// parseBlock privates\n\tconst\n\t\t_parseBodyDo = () => {\n\t\t\tconst { eLines, kReturn } = _parseBlockLines()\n\t\t\tcheck(kReturn === 'plain', `Can not make ${kReturn} in statement context.`)\n\t\t\treturn BlockDo(loc, eLines)\n\t\t},\n\n\t\t_parseBlockBody = k => {\n\t\t\tassert(k === 'val' || k === 'module' || k === 'any')\n\n\t\t\t// keys only matter if kReturn === 'obj'\n\t\t\tconst { eLines, kReturn, listLength, mapLength, objKeys, debugKeys } =\n\t\t\t\t_parseBlockLines()\n\n\t\t\tconst { doLines, opReturn } = (() => {\n\t\t\t\tif (kReturn === 'bag')\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdoLines: eLines,\n\t\t\t\t\t\topReturn: some(ListReturn(loc, listLength))\n\t\t\t\t\t}\n\t\t\t\tif (kReturn === 'map')\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdoLines: eLines,\n\t\t\t\t\t\topReturn: some(MapReturn(loc, mapLength))\n\t\t\t\t\t}\n\n\t\t\t\tconst lastReturn = !isEmpty(eLines) && last(eLines) instanceof Val\n\t\t\t\tif (kReturn === 'obj' && k !== 'module')\n\t\t\t\t\treturn lastReturn ?\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdoLines: rtail(eLines),\n\t\t\t\t\t\t\topReturn: some(ObjReturn(\n\t\t\t\t\t\t\t\tloc,\n\t\t\t\t\t\t\t\tobjKeys,\n\t\t\t\t\t\t\t\tdebugKeys,\n\t\t\t\t\t\t\t\tsome(last(eLines)),\n\t\t\t\t\t\t\t\t// displayName is filled in by parseAssign.\n\t\t\t\t\t\t\t\tNone))\n\t\t\t\t\t\t} : {\n\t\t\t\t\t\t\tdoLines: eLines,\n\t\t\t\t\t\t\topReturn: some(ObjReturn(\n\t\t\t\t\t\t\t\tloc,\n\t\t\t\t\t\t\t\tobjKeys,\n\t\t\t\t\t\t\t\tdebugKeys,\n\t\t\t\t\t\t\t\tNone,\n\t\t\t\t\t\t\t\t// displayName is filled in by parseAssign.\n\t\t\t\t\t\t\t\tNone))\n\t\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\treturn lastReturn ?\n\t\t\t\t\t{ doLines: rtail(eLines), opReturn: some(last(eLines)) } :\n\t\t\t\t\t{ doLines: eLines, opReturn: None }\n\t\t\t})()\n\n\t\t\tswitch (k) {\n\t\t\t\tcase 'val':\n\t\t\t\t\treturn ifElse(opReturn,\n\t\t\t\t\t\treturned => BlockVal(loc, doLines, returned),\n\t\t\t\t\t\t() => cx.fail('Expected a value block.'))\n\t\t\t\tcase 'any':\n\t\t\t\t\treturn ifElse(opReturn,\n\t\t\t\t\t\treturned => BlockVal(loc, doLines, returned),\n\t\t\t\t\t\t() => BlockDo(loc, doLines))\n\t\t\t\tcase 'module': {\n\t\t\t\t\t// TODO: Handle debug-only exports\n\t\t\t\t\tconst lines =\n\t\t\t\t\t\t// Turn Obj assigns into exports.\n\t\t\t\t\t\tcat(\n\t\t\t\t\t\t\tdoLines.map(line => {\n\t\t\t\t\t\t\t\tif (line instanceof Assign && line.k === '. ')\n\t\t\t\t\t\t\t\t\tline.k = 'export'\n\t\t\t\t\t\t\t\treturn line\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\topReturn.map(ret => ModuleDefaultExport(ret.loc, ret)))\n\t\t\t\t\treturn BlockDo(loc, lines)\n\t\t\t\t}\n\t\t\t\tdefault: throw new Error(k)\n\t\t\t}\n\t\t},\n\n\t\t_parseBlockLines = () => {\n\t\t\tconst lines = tokens\n\t\t\tconst objKeys = [], debugKeys = []\n\t\t\tlet listLength = 0, mapLength = 0\n\t\t\tconst eLines = []\n\t\t\tconst addLine = (ln, inDebug) => {\n\t\t\t\tif (ln instanceof Array)\n\t\t\t\t\tln.forEach(_ => addLine(_, inDebug))\n\t\t\t\telse {\n\t\t\t\t\tif (ln instanceof Debug)\n\t\t\t\t\t\tln.lines.forEach(_ => addLine(_, true))\n\t\t\t\t\telse if (ln instanceof ListEntry) {\n\t\t\t\t\t\tassert(!inDebug, 'Not supported: debug list entries')\n\t\t\t\t\t\t// When ListEntries are first created they have no index.\n\t\t\t\t\t\tassert(ln.index === -1)\n\t\t\t\t\t\tln.index = listLength\n\t\t\t\t\t\tlistLength = listLength + 1\n\t\t\t\t\t}\n\t\t\t\t\telse if (ln instanceof MapEntry) {\n\t\t\t\t\t\tassert(!inDebug, 'Not supported: debug map entries')\n\t\t\t\t\t\tassert(ln.index === -1)\n\t\t\t\t\t\tln.index = mapLength\n\t\t\t\t\t\tmapLength = mapLength + 1\n\t\t\t\t\t}\n\t\t\t\t\telse if (ln instanceof Assign && ln.k === '. ')\n\t\t\t\t\t\t(inDebug ? debugKeys : objKeys).push(ln.assignee)\n\n\t\t\t\t\tif (!inDebug)\n\t\t\t\t\t\t// Else we are adding the Debug as a single line.\n\t\t\t\t\t\teLines.push(ln)\n\t\t\t\t}\n\t\t\t}\n\t\t\tlines.each(line => addLine(wg(line, parseLine, listLength)))\n\n\t\t\tconst isObj = !(isEmpty(objKeys) && isEmpty(debugKeys))\n\t\t\t// TODO\n\t\t\t// if (isEmpty(objKeys))\n\t\t\t//\tcx.check(isEmpty(debugKeys), loc, 'Block can't have only debug keys')\n\t\t\tconst isBag = listLength > 0\n\t\t\tconst isMap = mapLength > 0\n\t\t\tcheck(!(isObj && isBag), 'Block has both Bag and Obj lines.')\n\t\t\tcheck(!(isObj && isMap), 'Block has both Obj and Map lines.')\n\t\t\tcheck(!(isBag && isMap), 'Block has both Bag and Map lines.')\n\n\t\t\tconst kReturn = isObj ? 'obj' : isBag ? 'bag' : isMap ? 'map' : 'plain'\n\t\t\treturn { eLines, kReturn, listLength, mapLength, objKeys, debugKeys }\n\t\t}\n\n\tconst parseCase = (k, casedFromFun) => {\n\t\tconst isVal = k === 'case'\n\n\t\tconst { before, lines } = takeBlockLinesFromEnd()\n\n\t\tconst opCased = (() => {\n\t\t\tif (casedFromFun) {\n\t\t\t\tcheckEmpty(before,\n\t\t\t\t\t'Can\\'t give focus to case - it is the function\\'s implicit first argument.')\n\t\t\t\treturn None\n\t\t\t}\n\t\t\telse return opIf(!before.isEmpty(), () =>\n\t\t\t\tw0(before, () => Assign.focus(loc, parseExpr())))\n\t\t})()\n\n\t\tconst l = lines.last()\n\t\tconst { partLines, opElse } = Keyword.isElse(l.tokens.head()) ? {\n\t\t\t\tpartLines: lines.rtail(),\n\t\t\t\topElse: some(w1(l.tokens.tail(), isVal ? justBlockVal : justBlockDo))\n\t\t\t} : {\n\t\t\t\tpartLines: lines,\n\t\t\t\topElse: None\n\t\t\t}\n\n\t\tconst parts = partLines.map(line => {\n\t\t\tconst { before, block } =\n\t\t\t\twg(line, isVal ? takeBlockValFromEnd : takeBlockDoFromEnd)\n\t\t\tconst test = w0(before, parseExpr)\n\t\t\treturn (isVal ? CaseValPart : CaseDoPart)(line.loc, test, block)\n\t\t})\n\n\t\treturn (isVal ? CaseVal : CaseDo)(loc, opCased, parts, opElse)\n\t}\n\n\tconst\n\t\tparseExpr = () => {\n\t\t\treturn ifElse(tokens.opSplitManyWhere(Keyword.isObjAssign),\n\t\t\t\tsplits => {\n\t\t\t\t\t// Short object form, such as (a. 1, b. 2)\n\t\t\t\t\tconst first = splits[0].before\n\t\t\t\t\tconst tokensCaller = first.rtail()\n\n\t\t\t\t\tconst keysVals = {}\n\t\t\t\t\tfor (let i = 0; i < splits.length - 1; i = i + 1) {\n\t\t\t\t\t\tconst local = parseLocalDeclare(splits[i].before.last())\n\t\t\t\t\t\t// Can't have got a type because there's only one token.\n\t\t\t\t\t\tassert(isEmpty(local.opType))\n\t\t\t\t\t\tconst tokensValue = i === splits.length - 2 ?\n\t\t\t\t\t\t\tsplits[i + 1].before :\n\t\t\t\t\t\t\tsplits[i + 1].before.rtail()\n\t\t\t\t\t\tconst value = w0(tokensValue, parseExprPlain)\n\t\t\t\t\t\tcx.check(!Object.prototype.hasOwnProperty.call(keysVals, local.name),\n\t\t\t\t\t\t\tlocal.loc, () => `Duplicate property ${local}.`)\n\t\t\t\t\t\tObject.defineProperty(keysVals, local.name, { value })\n\t\t\t\t\t}\n\t\t\t\t\tassert(last(splits).at === undefined)\n\t\t\t\t\tconst val = ObjSimple(loc, keysVals)\n\t\t\t\t\tif (tokensCaller.isEmpty())\n\t\t\t\t\t\treturn val\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst parts = w0(tokensCaller, parseExprParts)\n\t\t\t\t\t\tassert(!isEmpty(parts))\n\t\t\t\t\t\treturn Call(loc, head(parts), push(tail(parts), val))\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t() => parseExprPlain()\n\t\t\t)\n\t\t},\n\n\t\tparseExprParts = () => {\n\t\t\tconst out = []\n\t\t\tconst end = tokens.end\n\t\t\tfor (let i = tokens.start; i < end; i = i + 1) {\n\t\t\t\tconst here = tokens.data[i]\n\t\t\t\tif (here instanceof Keyword) {\n\t\t\t\t\tconst rest = () => tokens._new(i + 1, end)\n\t\t\t\t\tswitch (here.k) {\n\t\t\t\t\t\tcase '|': case '~|':\n\t\t\t\t\t\t\treturn push(out, w1(rest(), parseFun, here.k))\n\t\t\t\t\t\tcase 'case':\n\t\t\t\t\t\t\treturn push(out, w2(rest(), parseCase, 'case', false))\n\t\t\t\t\t\tcase '<~':\n\t\t\t\t\t\t\treturn push(out, Yield(loc, w0(rest(), parseExpr)))\n\t\t\t\t\t\tcase '<~~':\n\t\t\t\t\t\t\treturn push(out, YieldTo(loc, w0(rest(), parseExpr)))\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// fallthrough\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tout.push(parseSingle(here))\n\t\t\t}\n\t\t\treturn out\n\t\t},\n\n\t\tparseExprPlain = () => {\n\t\t\tconst parts = parseExprParts()\n\t\t\tswitch (parts.length) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn GlobalAccess.null(loc)\n\t\t\t\tcase 1:\n\t\t\t\t\treturn head(parts)\n\t\t\t\tdefault:\n\t\t\t\t\treturn Call(loc, head(parts), tail(parts))\n\t\t\t}\n\t\t}\n\n\tconst parseFun = k => {\n\t\tconst { opReturnType, rest } = _tryTakeReturnType()\n\t\tcheck(!rest.isEmpty(), () => `Expected an indented block after ${code(k)}`)\n\t\tconst { args, opRestArg, block, opIn, opOut } = w0(rest, _funArgsAndBlock)\n\t\t// Need res declare if there is a return type or out condition.\n\t\tconst opResDeclare = ifElse(opReturnType,\n\t\t\trt => some(LocalDeclare.res(rt.loc, opReturnType)),\n\t\t\t() => opOut.map(o => LocalDeclare.res(o.loc, opReturnType)))\n\t\treturn Fun(loc, k, args, opRestArg, block, opIn, opResDeclare, opOut)\n\t}\n\n\t// parseFun privatesprivate\n\tconst\n\t\t_tryTakeReturnType = () => {\n\t\t\tif (!tokens.isEmpty()) {\n\t\t\t\tconst h = tokens.head()\n\t\t\t\tif (Group.isSpaced(h) && Keyword.isColon(h.tokens.head()))\n\t\t\t\t\treturn {\n\t\t\t\t\t\topReturnType: some(w0(h.tokens.tail(), parseSpaced)),\n\t\t\t\t\t\trest: tokens.tail()\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn { opReturnType: None, rest: tokens }\n\t\t},\n\n\t\t_funArgsAndBlock = () => {\n\t\t\tconst h = tokens.head()\n\t\t\t// Might be `|case`\n\t\t\tif (Keyword.isCaseOrCaseDo(h)) {\n\t\t\t\tconst eCase = w2(tokens.tail(), parseCase, h.k, true)\n\t\t\t\tconst args = [ LocalDeclare.focus(h.loc) ]\n\t\t\t\treturn (h.k === 'case') ?\n\t\t\t\t\t{\n\t\t\t\t\t\targs, opRestArg: None, opIn: None, opOut: None,\n\t\t\t\t\t\tblock: BlockVal(loc, [ ], eCase)\n\t\t\t\t\t} :\n\t\t\t\t\t{\n\t\t\t\t\t\targs, opRestArg: None, opIn: None, opOut: None,\n\t\t\t\t\t\tblock: BlockDo(loc, [ eCase ])\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst { before, lines } = takeBlockLinesFromEnd()\n\t\t\t\tconst { args, opRestArg } = w0(before, _parseFunLocals)\n\t\t\t\tconst { opIn, opOut, rest } = w0(lines, _tryTakeInOut)\n\t\t\t\tconst block = w0(rest, parseBlockFromLines)\n\t\t\t\treturn { args, opRestArg, block, opIn, opOut }\n\t\t\t}\n\t\t},\n\n\t\t_parseFunLocals = () => {\n\t\t\tif (tokens.isEmpty())\n\t\t\t\treturn { args: [], opRestArg: None }\n\t\t\telse {\n\t\t\t\tconst l = tokens.last()\n\t\t\t\tif (l instanceof DotName) {\n\t\t\t\t\tcx.check(l.nDots === 3, l.loc, 'Splat argument must have exactly 3 dots')\n\t\t\t\t\treturn {\n\t\t\t\t\t\targs: w0(tokens.rtail(), parseLocalDeclares),\n\t\t\t\t\t\topRestArg: some(LocalDeclare(l.loc, l.name, None, false, false))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse return { args: parseLocalDeclares(), opRestArg: None }\n\t\t\t}\n\t\t},\n\n\t\t_tryTakeInOut = () => {\n\t\t\tconst tryTakeInOrOut = (lines, inOrOut) => {\n\t\t\t\tif (!lines.isEmpty()) {\n\t\t\t\t\tconst firstLine = lines.head()\n\t\t\t\t\tassert(Group.isLine(firstLine))\n\t\t\t\t\tconst tokensFirst = firstLine.tokens\n\t\t\t\t\tif (Keyword.is(inOrOut)(tokensFirst.head()))\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttook: some(Debug(\n\t\t\t\t\t\t\t\tfirstLine.loc,\n\t\t\t\t\t\t\t\tw0(tokensFirst, parseLinesFromBlock))),\n\t\t\t\t\t\t\trest: lines.tail()\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn { took: None, rest: lines }\n\t\t\t}\n\n\t\t\tconst { took: opIn, rest: restIn } = tryTakeInOrOut(tokens, 'in')\n\t\t\tconst { took: opOut, rest } = tryTakeInOrOut(restIn, 'out')\n\t\t\treturn { opIn, opOut, rest }\n\t\t}\n\n\tconst\n\t\tparseLine = () => {\n\t\t\tconst h = tokens.head()\n\t\t\tconst rest = tokens.tail()\n\n\t\t\t// We only deal with mutable expressions here, otherwise we fall back to parseExpr.\n\t\t\tif (h instanceof Keyword)\n\t\t\t\tswitch (h.k) {\n\t\t\t\t\tcase '. ':\n\t\t\t\t\t\t// Index is set by parseBlock.\n\t\t\t\t\t\treturn ListEntry(loc, w0(rest, parseExpr), -1)\n\t\t\t\t\tcase 'case!':\n\t\t\t\t\t\treturn w2(rest, parseCase, 'case!', false)\n\t\t\t\t\tcase 'debug':\n\t\t\t\t\t\treturn Group.isBlock(tokens.second()) ?\n\t\t\t\t\t\t\t// `debug`, then indented block\n\t\t\t\t\t\t\tDebug(loc, parseLinesFromBlock()) :\n\t\t\t\t\t\t\t// `debug`, then single line\n\t\t\t\t\t\t\tDebug(loc, w0(rest, parseLineOrLines))\n\t\t\t\t\tcase 'debugger':\n\t\t\t\t\t\tcheckEmpty(rest, () => `Did not expect anything after ${h}`)\n\t\t\t\t\t\treturn Special.debugger(loc)\n\t\t\t\t\tcase 'end-loop!':\n\t\t\t\t\t\tcheckEmpty(rest, () => `Did not expect anything after ${h}`)\n\t\t\t\t\t\treturn EndLoop(loc)\n\t\t\t\t\tcase 'loop!':\n\t\t\t\t\t\treturn Loop(loc, w0(rest, justBlockDo))\n\t\t\t\t\tcase 'region':\n\t\t\t\t\t\treturn parseLinesFromBlock()\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// fall through\n\t\t\t\t}\n\n\t\t\treturn ifElse(tokens.opSplitOnceWhere(Keyword.isLineSplit),\n\t\t\t\t({ before, at, after }) => {\n\t\t\t\t\treturn at.k === '->' ?\n\t\t\t\t\t\t_parseMapEntry(before, after) :\n\t\t\t\t\t\t_parseAssign(before, at, after)\n\t\t\t\t},\n\t\t\t\t() => parseExpr())\n\t\t},\n\n\t\tparseLineOrLines = () => {\n\t\t\tconst _ = parseLine()\n\t\t\treturn _ instanceof Array ? _ : [ _ ]\n\t\t}\n\n\t// parseLine privates\n\tconst\n\t\t_parseAssign = (assigned, assigner, value) => {\n\t\t\tlet locals = w0(assigned, parseLocalDeclares)\n\t\t\tconst k = assigner.k\n\t\t\tconst eValuePre = value.isEmpty() ? GlobalAccess.true(loc) : w0(value, parseExpr)\n\n\t\t\tlet eValueNamed\n\t\t\tif (locals.length === 1) {\n\t\t\t\tconst name = head(locals).name\n\t\t\t\tif (name === 'doc') {\n\t\t\t\t\tif (eValuePre instanceof Fun)\n\t\t\t\t\t\t// KLUDGE: `doc` for module can be a Fun signature.\n\t\t\t\t\t\t// TODO: Something better...\n\t\t\t\t\t\teValuePre.args.forEach(arg => { arg.okToNotUse = true })\n\t\t\t\t\teValueNamed = eValuePre\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\teValueNamed = _tryAddDisplayName(eValuePre, name)\n\t\t\t}\n\t\t\telse\n\t\t\t\teValueNamed = eValuePre\n\n\t\t\tconst isYield = k === '<~' || k === '<~~'\n\n\t\t\tconst eValue = _valueFromAssign(eValueNamed, k)\n\n\t\t\tif (isEmpty(locals)) {\n\t\t\t\tcheck(isYield, 'Assignment to nothing')\n\t\t\t\treturn eValue\n\t\t\t}\n\n\t\t\tif (isYield)\n\t\t\t\tlocals.forEach(_ =>\n\t\t\t\t\tcx.check(_.k !== 'lazy', _.loc, 'Can not yield to lazy variable.'))\n\n\t\t\tif (k === '. ')\n\t\t\t\tlocals.forEach(l => { l.okToNotUse = true })\n\n\t\t\tif (locals.length === 1) {\n\t\t\t\tconst assign = Assign(loc, locals[0], k, eValue)\n\t\t\t\tconst isTest = assign.assignee.name.endsWith('test')\n\t\t\t\treturn isTest && k === '. ' ? Debug(loc, [ assign ]) : assign\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst isLazy = locals.some(l => l.isLazy)\n\t\t\t\tif (isLazy)\n\t\t\t\t\tlocals.forEach(_ => cx.check(_.isLazy, _.loc,\n\t\t\t\t\t\t'If any part of destructuring assign is lazy, all must be.'))\n\t\t\t\treturn AssignDestructure(loc, locals, k, eValue, isLazy)\n\t\t\t}\n\t\t},\n\n\t\t_valueFromAssign = (valuePre, kAssign) => {\n\t\t\tswitch (kAssign) {\n\t\t\t\tcase '<~':\n\t\t\t\t\treturn Yield(valuePre.loc, valuePre)\n\t\t\t\tcase '<~~':\n\t\t\t\t\treturn YieldTo(valuePre.loc, valuePre)\n\t\t\t\tdefault:\n\t\t\t\t\treturn valuePre\n\t\t\t}\n\t\t},\n\n\t\t// We give it a displayName if:\n\t\t// . It's a block\n\t\t// . It's a function\n\t\t// . It's one of those at the end of a block\n\t\t// . It's one of those as the end member of a call.\n\t\t_tryAddDisplayName = (eValuePre, displayName) => {\n\t\t\tswitch (true) {\n\t\t\t\tcase eValuePre instanceof Call && eValuePre.args.length > 0:\n\t\t\t\t\t// TODO: Immutable\n\t\t\t\t\teValuePre.args[eValuePre.args.length - 1] =\n\t\t\t\t\t\t_tryAddDisplayName(last(eValuePre.args), displayName)\n\t\t\t\t\treturn eValuePre\n\n\t\t\t\tcase eValuePre instanceof Fun:\n\t\t\t\t\treturn ObjReturn(eValuePre.loc, [], [], some(eValuePre), some(displayName))\n\n\t\t\t\tcase eValuePre instanceof ObjReturn &&\n\t\t\t\t\t!eValuePre.keys.some(key => key.name === 'displayName'):\n\t\t\t\t\teValuePre.opDisplayName = some(displayName)\n\t\t\t\t\treturn eValuePre\n\n\t\t\t\tcase eValuePre instanceof BlockWrap: {\n\t\t\t\t\tconst block = eValuePre.block\n\t\t\t\t\tblock.returned = _tryAddDisplayName(block.returned, displayName)\n\t\t\t\t\treturn eValuePre\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn eValuePre\n\t\t\t}\n\t\t},\n\n\t\t_parseMapEntry = (before, after) =>\n\t\t\t// TODO: index Filled in by ???\n\t\t\tMapEntry(loc, w0(before, parseExpr), w0(after, parseExpr), -1)\n\n\tconst\n\t\tparseLocalDeclares = () => tokens.map(parseLocalDeclare),\n\t\tparseLocalDeclare = t => {\n\t\t\tlet name\n\t\t\tlet opType = None\n\t\t\tlet isLazy = false\n\n\t\t\tif (Group.isSpaced(t)) {\n\t\t\t\tconst tokens = t.tokens\n\t\t\t\tlet rest = tokens\n\t\t\t\tif (Keyword.isTilde(tokens.head())) {\n\t\t\t\t\tisLazy = true\n\t\t\t\t\trest = tokens.tail()\n\t\t\t\t}\n\t\t\t\tname = _parseLocalName(rest.head())\n\t\t\t\tconst rest2 = rest.tail()\n\t\t\t\tif (!rest2.isEmpty()) {\n\t\t\t\t\tconst colon = rest2.head()\n\t\t\t\t\tcx.check(Keyword.isColon(colon), colon.loc, () => `Expected ${code(':')}`)\n\t\t\t\t\tcheck(rest2.size() > 1, () => `Expected something after ${colon}`)\n\t\t\t\t\tconst tokensType = rest2.tail()\n\t\t\t\t\topType = some(w0(tokensType, parseSpaced))\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tname = _parseLocalName(t)\n\n\t\t\treturn LocalDeclare(t.loc, name, opType, isLazy, false)\n\t\t}\n\n\t// parseLocalDeclare privates\n\tconst\n\t\t_parseLocalName = t => {\n\t\t\tif (Keyword.isFocus(t))\n\t\t\t\treturn '_'\n\t\t\telse {\n\t\t\t\tcx.check(t instanceof Name, t.loc, () => `Expected a local name, not ${t}`)\n\t\t\t\t// TODO: Allow this?\n\t\t\t\tcx.check(!JsGlobals.has(t.name), t.loc, () =>\n\t\t\t\t\t`Can not shadow global ${code(t.name)}`)\n\t\t\t\treturn t.name\n\t\t\t}\n\t\t}\n\n\tconst parseSingle = t => {\n\t\tswitch (true) {\n\t\t\tcase t instanceof CallOnFocus:\n\t\t\t\treturn Call(t.loc, _access(t.name), [ LocalAccess.focus(t.loc) ])\n\t\t\tcase t instanceof Literal:\n\t\t\t\treturn ELiteral(t.loc, t.value, t.k)\n\t\t\tcase t instanceof Name:\n\t\t\t\treturn _access(t.name)\n\t\t\tcase t instanceof Keyword:\n\t\t\t\tif (t.k === '_')\n\t\t\t\t\treturn LocalAccess.focus(t.loc)\n\t\t\t\tif (SpecialKeywords.has(t.k))\n\t\t\t\t\treturn Special(t.loc, t.k)\n\t\t\t\t// Else fallthrough to fail\n\t\t\tcase t instanceof Group:\n\t\t\t\tswitch (t.k) {\n\t\t\t\t\tcase G_Space: return wg(t, parseSpaced)\n\t\t\t\t\tcase G_Block: return wg(t, blockWrap, 'val')\n\t\t\t\t\tcase G_Quote: return Quote(t.loc, t.tokens.map(parseSingle))\n\t\t\t\t\tcase G_Paren: return wg(t, parseExpr)\n\t\t\t\t\tcase G_Bracket: return ListSimple(t.loc, wg(t, parseExprParts))\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// fallthrough\n\t\t\t\t}\n\t\t\tcase t instanceof DotName:\n\t\t\t\tif (t.nDots === 3)\n\t\t\t\t\treturn Splat(t.loc, LocalAccess(t.loc, t.name))\n\t\t\t\t// Else fallthrough to fail\n\t\t\tdefault:\n\t\t\t\tfail(`Unexpected ${t}`)\n\t\t}\n\t}\n\t// parseSingle privates\n\tconst _access = name =>\n\t\tJsGlobals.has(name) ? GlobalAccess(loc, name) : LocalAccess(loc, name)\n\n\tconst parseSpaced = () => {\n\t\tconst h = tokens.head(), rest = tokens.tail()\n\t\tswitch (true) {\n\t\t\tcase h instanceof Keyword:\n\t\t\t\tif (h.k === ':') {\n\t\t\t\t\tcx.check(!Keyword.isColon(rest.head()), h.loc, () => `Two ${h} in a row`)\n\t\t\t\t\tconst eType = w0(rest, parseSpaced)\n\t\t\t\t\tconst focus = LocalAccess.focus(h.loc)\n\t\t\t\t\treturn Call.contains(h.loc, eType, focus)\n\t\t\t\t} else if (h.k === '~')\n\t\t\t\t\treturn Lazy(h.loc, w0(rest, parseSpaced))\n\t\t\tdefault: {\n\t\t\t\tconst memberOrSubscript = (e, t) => {\n\t\t\t\t\tconst loc = t.loc\n\t\t\t\t\tif (t instanceof DotName) {\n\t\t\t\t\t\tcx.check(t.nDots === 1, loc, 'Too many dots!')\n\t\t\t\t\t\treturn Member(loc, e, t.name)\n\t\t\t\t\t} else if (t instanceof Group) {\n\t\t\t\t\t\tif (t.k === G_Bracket)\n\t\t\t\t\t\t\treturn Call.sub(loc,\n\t\t\t\t\t\t\t\tunshift(e, wg(t, parseExprParts)))\n\t\t\t\t\t\tif (t.k === G_Paren) {\n\t\t\t\t\t\t\tcx.check(t.tokens.isEmpty(), loc,\n\t\t\t\t\t\t\t\t() => `Use ${code('(a b)')}, not ${code('a(b)')}`)\n\t\t\t\t\t\t\treturn Call(loc, e, [])\n\t\t\t\t\t\t}\n\t\t\t\t\t} else cx.fail(loc, `Expected member or sub, not ${t}`)\n\t\t\t\t}\n\t\t\t\treturn rest.reduce(memberOrSubscript, parseSingle(h))\n\t\t\t}\n\t\t}\n\t}\n\n\tconst tryParseUse = k => {\n\t\tif (!tokens.isEmpty()) {\n\t\t\tconst l0 = tokens.head()\n\t\t\tassert(Group.isLine(l0))\n\t\t\tif (Keyword.is(k)(l0.tokens.head()))\n\t\t\t\treturn {\n\t\t\t\t\tuses: w1(l0.tokens.tail(), _parseUse, k),\n\t\t\t\t\trest: tokens.tail()\n\t\t\t\t}\n\t\t}\n\t\treturn { uses: [], rest: tokens }\n\t}\n\n\t// tryParseUse privates\n\tconst\n\t\t_parseUse = k => {\n\t\t\tconst { before, lines } = takeBlockLinesFromEnd()\n\t\t\tcheck(before.isEmpty(), () =>\n\t\t\t\t`Did not expect anything after ${code(k)} other than a block`)\n\t\t\treturn lines.map(line => wg(line, _useLine, k))\n\t\t},\n\n\t\t// TODO:ES6 Just use module imports, no AssignDestructure needed\n\t\t_useLine = k => {\n\t\t\tconst tReq = tokens.head()\n\t\t\tconst { path, name } = _parseRequire(tReq)\n\n\t\t\tif (k === 'use!') {\n\t\t\t\tcheck(tokens.size() === 1, () => `Unexpected ${tokens[1]}`)\n\t\t\t\treturn UseDo(loc, path)\n\t\t\t} else {\n\t\t\t\tconst isLazy = k === 'use~' || k === 'use-debug'\n\t\t\t\tconst { used, opUseDefault } = w2(tokens.tail(), _parseThingsUsed, name, isLazy)\n\t\t\t\treturn Use(loc, path, used, opUseDefault)\n\t\t\t}\n\t\t},\n\n\t\t_parseThingsUsed = (name, isLazy) => {\n\t\t\tconst useDefault = () => LocalDeclare(loc, name, None, isLazy, false)\n\t\t\tif (tokens.isEmpty())\n\t\t\t\treturn { used: [], opUseDefault: some(useDefault()) }\n\t\t\telse {\n\t\t\t\tconst hasDefaultUse = Keyword.isFocus(tokens.head())\n\t\t\t\tconst opUseDefault = opIf(hasDefaultUse, useDefault)\n\t\t\t\tconst rest = hasDefaultUse ? tokens.tail() : tokens\n\t\t\t\tconst used = w0(rest, parseLocalDeclares).map(l => {\n\t\t\t\t\tcheck(l.name !== '_', () => `${code('_')} not allowed as import name.`)\n\t\t\t\t\tl.isLazy = isLazy\n\t\t\t\t\treturn l\n\t\t\t\t})\n\t\t\t\treturn { used, opUseDefault }\n\t\t\t}\n\t\t},\n\n\t\t_parseRequire = t => {\n\t\t\tif (t instanceof Name)\n\t\t\t\treturn { path: t.name, name: t.name }\n\t\t\telse if (t instanceof DotName)\n\t\t\t\treturn { path: push(_partsFromDotName(t), t.name).join('/'), name: t.name }\n\t\t\telse {\n\t\t\t\tcheck(Group.isSpaced(t), 'Not a valid module name.')\n\t\t\t\treturn wg(t, _parseLocalRequire)\n\t\t\t}\n\t\t},\n\n\t\t_parseLocalRequire = () => {\n\t\t\tconst first = tokens.head()\n\t\t\tlet parts\n\t\t\tif (first instanceof DotName)\n\t\t\t\tparts = _partsFromDotName(first)\n\t\t\telse {\n\t\t\t\tcx.check(first instanceof Name, first.loc, 'Not a valid part of module path.')\n\t\t\t\tparts = [ ]\n\t\t\t}\n\t\t\tparts.push(first.name)\n\t\t\ttokens.tail().each(t => {\n\t\t\t\tcx.check(t instanceof DotName && t.nDots === 1, t.loc,\n\t\t\t\t\t'Not a valid part of module path.')\n\t\t\t\tparts.push(t.name)\n\t\t\t})\n\t\t\treturn {\n\t\t\t\tpath: parts.join('/'),\n\t\t\t\tname: tokens.last().name\n\t\t\t}\n\t\t},\n\n\t\t_partsFromDotName = dotName =>\n\t\t\tdotName.nDots === 1 ? [ '.' ] : repeat('..', dotName.nDots - 1)\n\n\treturn parseModule()\n}\n"],"sourceRoot":"/src"}