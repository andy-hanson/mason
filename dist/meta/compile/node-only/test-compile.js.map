{"version":3,"sources":["meta/compile/node-only/test-compile.js"],"names":[],"mappings":"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","file":"meta/compile/node-only/test-compile.js","sourcesContent":["import { ESNode } from 'esast/dist/ast'\nimport fs from 'fs'\nimport Expression from '../Expression'\nimport Cx from '../private/Cx'\nimport lex from '../private/lex/lex'\nimport parse from '../private/parse/parse'\nimport render from '../private/render'\nimport transpile from '../private/transpile/transpile'\nimport verify from '../private/verify/verify'\nimport { log } from '../private/U/util'\nimport { OptsFromObject } from '../private/Opts'\n\nexport default () => {\n\tglobal.DEBUG = true\n\tglobal.LOG_TIME = true\n\n\tfunction time(fun) {\n\t\tif (global.LOG_TIME)\n\t\t\tconsole.time(fun.name)\n\t\tconst res = fun.apply(null, Array.prototype.slice.call(arguments, 1))\n\t\tif (global.LOG_TIME)\n\t\t\tconsole.timeEnd(fun.name)\n\t\treturn res\n\t}\n\n\tconst source = fs.readFileSync('./ms-test.ms', 'utf-8')\n\tconst opts = OptsFromObject({\n\t\tinFile: './ms-test.ms'\n\t})\n\tconst cx = new Cx(opts)\n\n\tconsole.time('all')\n\tconst t = time(lex, cx, source)\n\t// log(`==>\\n${t}`)\n\tconst e = time(parse, cx, t)\n\t// log(`==>\\n${e}`)\n\tconst vr = time(verify, cx, e)\n\t// log(`+++\\n${vr})\n\tconst ast = time(transpile, cx, e, vr)\n\t// log(`==>\\n${ast}`)\n\tconst { code, map } = time(render, cx, ast)\n\ttime(function renderSourceMap(_) { return _.toString() }, map)\n\tconsole.timeEnd('all')\n\tconst\n\t\teSize = treeSize(e, _ => _ instanceof Expression),\n\t\tastSize = treeSize(ast, _ => _ instanceof ESNode)\n\tlog(`Expression tree size: ${eSize.size}.`)\n\tlog(`ES AST size: ${astSize.size}, nLeaves: ${astSize.nLeaves}.`)\n\tlog(`Output size: ${code.length} characters.`)\n\tlog(`==>\\n${code}`)\n}\n\nconst treeSize = (tree, cond) => {\n\tconst visited = new Set()\n\tlet nLeaves = 0\n\tconst visit = node => {\n\t\tif (node != null && !visited.has(node))\n\t\t\tif (cond(node)) {\n\t\t\t\tvisited.add(node)\n\t\t\t\tObject.getOwnPropertyNames(node).forEach(name => {\n\t\t\t\t\tconst child = node[name]\n\t\t\t\t\tif (child instanceof Array)\n\t\t\t\t\t\tchild.forEach(visit)\n\t\t\t\t\telse\n\t\t\t\t\t\tvisit(child)\n\t\t\t\t})\n\t\t\t} else\n\t\t\t\tnLeaves = nLeaves + 1\n\t}\n\tvisit(tree)\n\treturn { size: visited.size, nLeaves }\n}\n"],"sourceRoot":"/src"}