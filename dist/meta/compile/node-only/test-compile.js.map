{"version":3,"sources":["meta/compile/node-only/test-compile.js"],"names":[],"mappings":"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","file":"meta/compile/node-only/test-compile.js","sourcesContent":["import { Suite } from 'benchmark'\nimport { Node } from 'esast/dist/ast'\nimport fs from 'fs'\nimport numeral from 'numeral'\nimport Expression from '../Expression'\nimport Cx from '../private/Cx'\nimport lex from '../private/lex/lex'\nimport lexUngrouped from '../private/lex/ungrouped'\nimport lexGroup from '../private/lex/group'\nimport parse from '../private/parse'\nimport render from '../private/render'\nimport transpile from '../private/transpile/transpile'\nimport verify from '../private/verify'\nimport { log } from '../private/U/util'\nimport { OptsFromObject } from '../private/Opts'\n\nexport default () => {\n\tglobal.DEBUG = true\n\n\tconst source = fs.readFileSync('./ms-test.ms', 'utf-8')\n\tconst opts = OptsFromObject({\n\t\tinFile: './ms-test.ms'\n\t})\n\tconst cx = new Cx(opts)\n\n\tconst t = lex(cx, source)\n\t// log(`==>\\n${t}`)\n\tconst e = parse(cx, t)\n\t// log(`==>\\n${e}`)\n\tconst vr = verify(cx, e)\n\t// log(`+++\\n${vr})\n\tconst ast = transpile(cx, e, vr)\n\t// log(`==>\\n${ast}`)\n\tconst { code } = render(cx, ast)\n\tlog(`Expression tree size: ${treeSize(e, _ => _ instanceof Expression).size}.`)\n\tlog(`ES AST size: ${treeSize(ast, _ => _ instanceof Node)}.`)\n\tlog(`Output size: ${code.length} characters.`)\n\tlog(`==>\\n${code}`)\n\n\t// Benchmark has problems if I don't put these in global variables...\n\tglobal.lexUngroupedTest = () =>\n\t\tlexUngrouped(cx, source)\n\tconst tUngrouped = global.lexUngroupedTest()\n\tglobal.lexGroupTest = () =>\n\t\tlexGroup(cx, tUngrouped)\n\n\tbenchmark({\n\t\tlexUngrouped: () => global.lexUngroupedTest(),\n\t\tlexGroup: () => global.lexGroupTest(),\n\t\tparse: () => parse(cx, t),\n\t\tverify: () => verify(cx, e),\n\t\ttranspile: () => transpile(cx, e, vr),\n\t\trender: () => render(cx, ast)\n\t})\n}\n\nconst\n\tbenchmark = tests => {\n\t\tconst suite = new Suite()\n\t\tObject.keys(tests).forEach(name =>\n\t\t\tsuite.add(name, tests[name]))\n\t\tsuite.on('complete', function() {\n\t\t\tthis.forEach(_ => {\n\t\t\t\tconst ms = numeral(_.stats.mean * 1000).format('0.00')\n\t\t\t\tconsole.log(`${_.name}: ${ms}ms`)\n\t\t\t})\n\t\t})\n\t\tsuite.on('error', err => {\n\t\t\tthrow err.target.error\n\t\t})\n\t\tsuite.run()\n\t},\n\n\ttreeSize = (tree, cond) => {\n\t\tconst visited = new Set()\n\t\tlet nLeaves = 0\n\t\tconst visit = node => {\n\t\t\tif (node != null && !visited.has(node))\n\t\t\t\tif (cond(node)) {\n\t\t\t\t\tvisited.add(node)\n\t\t\t\t\tObject.getOwnPropertyNames(node).forEach(name => {\n\t\t\t\t\t\tconst child = node[name]\n\t\t\t\t\t\tif (child instanceof Array)\n\t\t\t\t\t\t\tchild.forEach(visit)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tvisit(child)\n\t\t\t\t\t})\n\t\t\t\t} else\n\t\t\t\t\tnLeaves = nLeaves + 1\n\t\t}\n\t\tvisit(tree)\n\t\treturn { size: visited.size, nLeaves }\n\t}\n"],"sourceRoot":"/src"}