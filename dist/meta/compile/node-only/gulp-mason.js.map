{"version":3,"sources":["meta/compile/node-only/gulp-mason.js"],"names":[],"mappings":";;;;;kBAWwB,MAAM;KAXrB,WAAW,aAAX,WAAW;KAAE,gBAAgB,aAAhB,gBAAgB;KAC7B,GAAG,aAAH,GAAG;;KACL,cAAc;;KACd,OAAO;;KACP,YAAY;;KACZ,UAAU;;KACV,4BAA4B;;KAAI,uBAAuB,iCAAvB,uBAAuB;;AAG9D,OAAM,IAAI,GAAG,YAAY,CAAA;;AAEV,UAAS,MAAM,CAAC,IAAI,EAAE;AACpC,MAAI,GAAG,IAAI,IAAI,EAAG,CAAA;AAClB,SAAO,GAAG,CAAC,UAAS,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE;AAClC,OAAI,IAAI,CAAC,OAAO,EACf,OAAO,CAAC,GAAG,gBAAc,IAAI,CAAC,IAAI,CAAG,CAAA;AACtC,OAAI,IAAI,CAAC,MAAM,EAAE,EAChB,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA,KACV,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;AACzB,QAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,WAAW,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC,CAAA;AACpE,WAAO,EAAE,EAAE,CAAA;IACX,MACI;AACJ,UAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;AAC1C,UAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;AAC9D,QAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE;AACzD,YAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;AACjB,WAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAA;KACvC;AACD,UAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;;mBACjC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;;UAA1C,QAAQ,YAAR,QAAQ;UAAE,MAAM,YAAN,MAAM;;AAExB,YAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;YAAI,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAAA,CAAC,CAAA;AACzE,QAAI,MAAM,YAAY,YAAY,EAAE;AACnC,WAAM,OAAO,GAAG,4BAA4B,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;;;AAG/D,SAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAA;AAClD,YAAO,EAAE,EAAE,CAAA;KACX,MAAM;WACE,IAAI,GAAgB,MAAM,CAA1B,IAAI;WAAE,SAAS,GAAK,MAAM,CAApB,SAAS;;AACvB,mBAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;AAC/B,SAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAA;AAChC,SAAI,CAAC,IAAI,GAAG,OAAO,CAAA;AACnB,OAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;KACd;IACD;GACD,CAAC,CAAA;EACF","file":"meta/compile/node-only/gulp-mason.js","sourcesContent":["import { PluginError, replaceExtension } from 'gulp-util'\nimport { obj } from 'through2'\nimport applySourceMap from 'vinyl-sourcemaps-apply'\nimport compile from '../compile'\nimport CompileError from '../CompileError'\nimport manglePath from '../private/manglePath'\nimport formatCompileErrorForConsole, { formatWarningForConsole }\n\tfrom './formatCompileErrorForConsole'\n\nconst Name = 'gulp-mason'\n\nexport default function gulpMs(opts) {\n\topts = opts || { }\n\treturn obj(function(file, enc, cb) {\n\t\tif (opts.verbose)\n\t\t\tconsole.log(`Compiling ${file.path}`)\n\t\tif (file.isNull())\n\t\t\tcb(null, file)\n\t\telse if (file.isStream()) {\n\t\t\tthis.emit('error', new PluginError(Name, 'Streaming not supported'))\n\t\t\treturn cb()\n\t\t}\n\t\telse {\n\t\t\tconst src = file.contents.toString('utf8')\n\t\t\tconst outFile = manglePath(replaceExtension(file.path, '.js'))\n\t\t\tif (Object.prototype.hasOwnProperty.call(opts, 'inFile')) {\n\t\t\t\tconsole.log(opts)\n\t\t\t\tthrow new Error('inFile set by stream')\n\t\t\t}\n\t\t\tconst allOpts = Object.assign({}, opts, { inFile: file.path })\n\t\t\tconst { warnings, result } = compile(src, allOpts)\n\n\t\t\twarnings.forEach(w => console.log(formatWarningForConsole(w, file.path)))\n\t\t\tif (result instanceof CompileError) {\n\t\t\t\tconst message = formatCompileErrorForConsole(result, file.path)\n\t\t\t\t// Not cb(new PluginError(...)).\n\t\t\t\t// See https://github.com/gulpjs/gulp/issues/71#issuecomment-53942279\n\t\t\t\tthis.emit('error', new PluginError(Name, message))\n\t\t\t\treturn cb()\n\t\t\t} else {\n\t\t\t\tconst { code, sourceMap } = result\n\t\t\t\tapplySourceMap(file, sourceMap)\n\t\t\t\tfile.contents = new Buffer(code)\n\t\t\t\tfile.path = outFile\n\t\t\t\tcb(null, file)\n\t\t\t}\n\t\t}\n\t})\n}\n"],"sourceRoot":"/src"}