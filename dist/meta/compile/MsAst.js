if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/Loc', 'tupl/dist/tupl', 'tupl/dist/type', './private/language'], function (exports, _esastDistLoc, _tuplDistTupl, _tuplDistType, _privateLanguage) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Loc = _interopRequireDefault(_esastDistLoc);

	var _tupl = _interopRequireDefault(_tuplDistTupl);

	const MsAst = (0, _tuplDistTupl.abstract)('MsAst', Object, 'doc');
	exports.default = MsAst;
	const LineContent = (0, _tuplDistTupl.abstract)('ValOrDo', MsAst, 'Valid part of a Block.'),
	      Do = (0, _tuplDistTupl.abstract)('Do', LineContent, '\n\t\tThese can only appear as lines in a Block.\n\t\tNot to be confused with Generator expressions resulting from `do` keyword.'),
	      Val = (0, _tuplDistTupl.abstract)('Val', LineContent, 'These can appear in any expression.');

	exports.LineContent = LineContent;
	exports.Do = Do;
	exports.Val = Val;
	const makeType = function (superType) {
		return function (name, doc, namesTypes, protoProps, tuplProps) {
			return (
				// TODO: provide actual docs...
				(0, _tupl.default)(name, superType, doc, ['loc', _Loc.default].concat(namesTypes), protoProps, tuplProps)
			);
		};
	};

	const m = makeType(MsAst),
	      d = makeType(Do),
	      v = makeType(Val);

	const LD_Const = 0,
	      LD_Lazy = 1,
	      LD_Mutable = 2,
	      LocalDeclare = m('LocalDeclare', 'TODO:DOC', ['name', String, 'opType', (0, _tuplDistType.Nullable)(Val), 'kind', Number], {
		isLazy: function () {
			return this.kind === LD_Lazy;
		},
		isMutable: function () {
			return this.kind === LD_Mutable;
		}
	}, {
		// Can't call this 'name' because LocalDeclare.name is 'LocalDeclare'
		declareName: function (loc) {
			return LocalDeclare.plain(loc, 'name');
		},
		focus: function (loc) {
			return LocalDeclare.plain(loc, '_');
		},
		noType: function (loc, name, isLazy) {
			return LocalDeclare(loc, name, null, isLazy ? LD_Lazy : LD_Const);
		},
		plain: function (loc, name) {
			return LocalDeclare.noType(loc, name, false);
		}
	}),
	      LocalDeclareBuilt = makeType(LocalDeclare)('LocalDeclareBuilt', 'TODO:DOC', [], {
		name: 'built',
		opType: null,
		kind: LD_Const
	}),
	      LocalDeclareRes = makeType(LocalDeclare)('LocalDeclareRes', 'TODO:DOC', ['opType', (0, _tuplDistType.Nullable)(Val)], {
		name: 'res',
		kind: LD_Const
	}),
	      Debug = d('Debug', 'TODO:DOC', ['lines', [LineContent]]),
	      Block = (0, _tuplDistTupl.abstract)('Block', MsAst, 'TODO:DOC'),
	      BlockDo = makeType(Block)('BlockDo', 'TODO:DOC', ['lines', [LineContent]]),
	      BlockVal = (0, _tuplDistTupl.abstract)('BlockVal', Block, 'TODO:DOC'),
	      BlockWithReturn = makeType(BlockVal)('BlockWithReturn', 'TODO:DOC', ['lines', [LineContent], 'returned', Val]),
	      BlockObj = makeType(BlockVal)('BlockObj', 'TODO:DOC', ['lines', [LineContent], 'keys', [LocalDeclare], 'opObjed', (0, _tuplDistType.Nullable)(Val), 'opName', (0, _tuplDistType.Nullable)(String)]),
	      BagEntry = m('BagEntry', 'TODO:DOC', ['value', Val]),
	      BlockBag = makeType(BlockVal)('BlockBag', 'TODO:DOC', ['built', LocalDeclareBuilt, 'lines', [(0, _tuplDistType.Union)(LineContent, BagEntry)]], {}, { of: function (loc, lines) {
			return BlockBag(loc, LocalDeclareBuilt(loc), lines);
		} }),
	      MapEntry = m('MapEntry', 'TODO:DOC', ['key', Val, 'val', Val]),
	      BlockMap = makeType(BlockVal)('BlockMap', 'TODO:DOC', ['built', LocalDeclareBuilt, 'lines', [(0, _tuplDistType.Union)(LineContent, MapEntry)]], {}, { of: function (loc, lines) {
			return BlockMap(loc, LocalDeclareBuilt(loc), lines);
		} }),
	      LocalAccess = v('LocalAccess', 'TODO:DOC', ['name', String], {}, { focus: function (loc) {
			return LocalAccess(loc, '_');
		} }),
	      Assign = d('Assign', 'TODO:DOC', ['assignee', LocalDeclare, 'value', Val], {}, { focus: function (loc, value) {
			return Assign(loc, LocalDeclare.focus(loc), value);
		} }),
	      AssignDestructure = d('AssignDestructure', 'TODO:DOC', ['assignees', [LocalDeclare], 'value', Val], {
		// All assignees must share the same kind.
		kind: function () {
			return this.assignees[0].kind;
		}
	}),
	      AssignMutate = d('AssignMutate', 'TODO:DOC', ['name', String, 'value', Val]),
	      GlobalAccess = v('GlobalAccess', 'TODO:DOC', ['name', _privateLanguage.JsGlobals]),
	     

	// Module
	UseDo = m('UseDo', 'TODO:DOC', ['path', String]),
	      Use = m('Use', 'TODO:DOC', ['path', String, 'used', [LocalDeclare], 'opUseDefault', (0, _tuplDistType.Nullable)(LocalDeclare)]),
	      Module = m('Module', 'TODO:DOC', ['doUses', [UseDo], 'uses', [Use], 'debugUses', [Use], 'lines', [Do], 'exports', [LocalDeclare], 'opDefaultExport', (0, _tuplDistType.Nullable)(Val)]),
	     

	// Data
	BagSimple = v('BagSimple', 'TODO:DOC', ['parts', [Val]]),
	      ObjPair = m('ObjPair', 'TODO:DOC', ['key', String, 'value', Val]),
	     
	// Verifier checks that no two pairs may have the same key.
	ObjSimple = v('ObjSimple', 'TODO:DOC', ['pairs', [ObjPair]]),
	     

	// Case
	Pattern = m('Pattern', 'TODO:DOC', ['type', Val, 'locals', [LocalDeclare], 'patterned', LocalAccess]),
	      CaseDoPart = m('CaseDoPart', 'TODO:DOC', ['test', (0, _tuplDistType.Union)(Val, Pattern), 'result', BlockDo]),
	      CaseValPart = m('CaseValPart', 'TODO:DOC', ['test', (0, _tuplDistType.Union)(Val, Pattern), 'result', BlockVal]),
	      CaseDo = d('CaseDo', 'TODO:DOC', ['opCased', (0, _tuplDistType.Nullable)(Assign), 'parts', [CaseDoPart], 'opElse', (0, _tuplDistType.Nullable)(BlockDo)]),
	     
	// Unlike CaseDo, this has `return` statements.
	CaseVal = v('CaseVal', 'TODO:DOC', ['opCased', (0, _tuplDistType.Nullable)(Assign), 'parts', [CaseValPart], 'opElse', (0, _tuplDistType.Nullable)(BlockVal)]),
	     

	// Loops
	ForDoPlain = d('ForDoPlain', 'TODO:DOC', ['block', BlockDo]),
	      ForDoWithBag = d('ForDoWithBag', 'TODO:DOC', ['element', LocalDeclare, 'bag', Val, 'block', BlockDo]),
	      BreakDo = d('BreakDo', 'TODO:DOC', []),
	     

	// Other statements
	IfDo = d('IfDo', 'TODO:DOC', ['test', Val, 'result', BlockDo]),
	      UnlessDo = d('UnlessDo', 'TODO:DOC', ['test', Val, 'result', BlockDo]),
	     

	// Generators
	Yield = v('Yield', 'TODO:DOC', ['yielded', Val]),
	      YieldTo = v('YieldTo', 'TODO:DOC', ['yieldedTo', Val]),
	     

	// Expressions
	Splat = m('Splat', 'TODO:DOC', ['splatted', Val]),
	      Call = v('Call', 'TODO:DOC', ['called', Val, 'args', [(0, _tuplDistType.Union)(Val, Splat)]], {}, {
		contains: function (loc, testType, tested) {
			return Call(loc, SpecialVal(loc, SV_Contains), [testType, tested]);
		},
		sub: function (loc, args) {
			return Call(loc, SpecialVal(loc, SV_Sub), args);
		}
	}),
	      BlockWrap = v('BlockWrap', 'TODO:DOC', ['block', BlockVal]),
	      Fun = v('Fun', 'TODO:DOC', ['isGenerator', Boolean, 'args', [LocalDeclare], 'opRestArg', (0, _tuplDistType.Nullable)(LocalDeclare), 'block', Block, 'opIn', (0, _tuplDistType.Nullable)(Debug),
	// If non-empty, block should be a BlockVal,
	// and either it has a type or opOut is non-empty.
	'opResDeclare', (0, _tuplDistType.Nullable)(LocalDeclareRes), 'opOut', (0, _tuplDistType.Nullable)(Debug), 'name', (0, _tuplDistType.Nullable)(String)]),
	      Lazy = v('Lazy', 'TODO:DOC', ['value', Val]),
	      NumberLiteral = v('NumberLiteral', 'TODO:DOC', ['value', Number]),
	      Member = v('Member', 'TODO:DOC', ['object', Val, 'name', String]),
	     
	// parts are Strings interleaved with Vals.
	Quote = v('Quote', 'TODO:DOC', ['parts', [Object]], {}, {
		forString: function (loc, str) {
			return Quote(loc, [str]);
		}
	}),
	      SD_Debugger = 0,
	      SpecialDo = d('SpecialDo', 'TODO:DOC', ['kind', Number]),
	      SV_Contains = 0,
	      SV_False = 1,
	      SV_Null = 2,
	      SV_Sub = 3,
	      SV_This = 4,
	      SV_ThisModuleDirectory = 5,
	      SV_True = 6,
	      SV_Undefined = 7,
	     
	// k is a SP_***
	SpecialVal = v('Special', 'TODO:DOC', ['kind', Number]);
	exports.LD_Const = LD_Const;
	exports.LD_Lazy = LD_Lazy;
	exports.LD_Mutable = LD_Mutable;
	exports.LocalDeclare = LocalDeclare;
	exports.LocalDeclareBuilt = LocalDeclareBuilt;
	exports.LocalDeclareRes = LocalDeclareRes;
	exports.Debug = Debug;
	exports.Block = Block;
	exports.BlockDo = BlockDo;
	exports.BlockVal = BlockVal;
	exports.BlockWithReturn = BlockWithReturn;
	exports.BlockObj = BlockObj;
	exports.BagEntry = BagEntry;
	exports.BlockBag = BlockBag;
	exports.MapEntry = MapEntry;
	exports.BlockMap = BlockMap;
	exports.LocalAccess = LocalAccess;
	exports.Assign = Assign;
	exports.AssignDestructure = AssignDestructure;
	exports.AssignMutate = AssignMutate;
	exports.GlobalAccess = GlobalAccess;
	exports.UseDo = UseDo;
	exports.Use = Use;
	exports.Module = Module;
	exports.BagSimple = BagSimple;
	exports.ObjPair = ObjPair;
	exports.ObjSimple = ObjSimple;
	exports.Pattern = Pattern;
	exports.CaseDoPart = CaseDoPart;
	exports.CaseValPart = CaseValPart;
	exports.CaseDo = CaseDo;
	exports.CaseVal = CaseVal;
	exports.ForDoPlain = ForDoPlain;
	exports.ForDoWithBag = ForDoWithBag;
	exports.BreakDo = BreakDo;
	exports.IfDo = IfDo;
	exports.UnlessDo = UnlessDo;
	exports.Yield = Yield;
	exports.YieldTo = YieldTo;
	exports.Splat = Splat;
	exports.Call = Call;
	exports.BlockWrap = BlockWrap;
	exports.Fun = Fun;
	exports.Lazy = Lazy;
	exports.NumberLiteral = NumberLiteral;
	exports.Member = Member;
	exports.Quote = Quote;
	exports.SD_Debugger = SD_Debugger;
	exports.SpecialDo = SpecialDo;
	exports.SV_Contains = SV_Contains;
	exports.SV_False = SV_False;
	exports.SV_Null = SV_Null;
	exports.SV_Sub = SV_Sub;
	exports.SV_This = SV_This;
	exports.SV_ThisModuleDirectory = SV_ThisModuleDirectory;
	exports.SV_True = SV_True;
	exports.SV_Undefined = SV_Undefined;
	exports.SpecialVal = SpecialVal;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9Nc0FzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBS0EsT0FBTSxLQUFLLEdBQUcsa0JBSkMsUUFBUSxFQUlBLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7bUJBQy9CLEtBQUs7QUFFYixPQUNOLFdBQVcsR0FBRyxrQkFSQSxRQUFRLEVBUUMsU0FBUyxFQUFFLEtBQUssRUFBRSx3QkFBd0IsQ0FBQztPQUNsRSxFQUFFLEdBQUcsa0JBVFMsUUFBUSxFQVNSLElBQUksRUFBRSxXQUFXLHFJQUVnRDtPQUMvRSxHQUFHLEdBQUcsa0JBWlEsUUFBUSxFQVlQLEtBQUssRUFBRSxXQUFXLEVBQUUscUNBQXFDLENBQUMsQ0FBQTs7U0FKekUsV0FBVyxHQUFYLFdBQVc7U0FDWCxFQUFFLEdBQUYsRUFBRTtTQUdGLEdBQUcsR0FBSCxHQUFHO0FBRUosT0FBTSxRQUFRLEdBQUcsVUFBQSxTQUFTO1NBQUksVUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUzs7O0FBRTFFLHVCQUFLLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUUsS0FBSyxlQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxTQUFTO0lBQUM7R0FBQTtFQUFBLENBQUE7O0FBRXJGLE9BQ0MsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7T0FBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQztPQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7O0FBRWxELE9BQ04sUUFBUSxHQUFHLENBQUM7T0FDWixPQUFPLEdBQUcsQ0FBQztPQUNYLFVBQVUsR0FBRyxDQUFDO09BQ2QsWUFBWSxHQUFHLENBQUMsQ0FBQyxjQUFjLEVBQzlCLFVBQVUsRUFDVixDQUNDLE1BQU0sRUFBRSxNQUFNLEVBQ2QsUUFBUSxFQUFFLGtCQTVC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Y2VzQ29udGVudCI6WyJpbXBvcnQgTG9jIGZyb20gJ2VzYXN0L2Rpc3QvTG9jJ1xuaW1wb3J0IHR1cGwsIHsgYWJzdHJhY3QgfSBmcm9tICd0dXBsL2Rpc3QvdHVwbCdcbmltcG9ydCB7IE51bGxhYmxlLCBVbmlvbiB9IGZyb20gJ3R1cGwvZGlzdC90eXBlJ1xuaW1wb3J0IHsgSnNHbG9iYWxzIH0gZnJvbSAnLi9wcml2YXRlL2xhbmd1YWdlJ1xuXG5jb25zdCBNc0FzdCA9IGFic3RyYWN0KCdNc0FzdCcsIE9iamVjdCwgJ2RvYycpXG5leHBvcnQgZGVmYXVsdCBNc0FzdFxuXG5leHBvcnQgY29uc3Rcblx0TGluZUNvbnRlbnQgPSBhYnN0cmFjdCgnVmFsT3JEbycsIE1zQXN0LCAnVmFsaWQgcGFydCBvZiBhIEJsb2NrLicpLFxuXHREbyA9IGFic3RyYWN0KCdEbycsIExpbmVDb250ZW50LCBgXG5cdFx0VGhlc2UgY2FuIG9ubHkgYXBwZWFyIGFzIGxpbmVzIGluIGEgQmxvY2suXG5cdFx0Tm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggR2VuZXJhdG9yIGV4cHJlc3Npb25zIHJlc3VsdGluZyBmcm9tIFxcYGRvXFxgIGtleXdvcmQuYCksXG5cdFZhbCA9IGFic3RyYWN0KCdWYWwnLCBMaW5lQ29udGVudCwgJ1RoZXNlIGNhbiBhcHBlYXIgaW4gYW55IGV4cHJlc3Npb24uJylcblxuY29uc3QgbWFrZVR5cGUgPSBzdXBlclR5cGUgPT4gKG5hbWUsIGRvYywgbmFtZXNUeXBlcywgcHJvdG9Qcm9wcywgdHVwbFByb3BzKSA9PlxuXHQvLyBUT0RPOiBwcm92aWRlIGFjdHVhbCBkb2NzLi4uXG5cdHR1cGwobmFtZSwgc3VwZXJUeXBlLCBkb2MsIFsgJ2xvYycsIExvYyBdLmNvbmNhdChuYW1lc1R5cGVzKSwgcHJvdG9Qcm9wcywgdHVwbFByb3BzKVxuXG5jb25zdFxuXHRtID0gbWFrZVR5cGUoTXNBc3QpLCBkID0gbWFrZVR5cGUoRG8pLCB2ID0gbWFrZVR5cGUoVmFsKVxuXG5leHBvcnQgY29uc3Rcblx0TERfQ29uc3QgPSAwLFxuXHRMRF9MYXp5ID0gMSxcblx0TERfTXV0YWJsZSA9IDIsXG5cdExvY2FsRGVjbGFyZSA9IG0oJ0xvY2FsRGVjbGFyZScsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbXG5cdFx0XHQnbmFtZScsIFN0cmluZyxcblx0XHRcdCdvcFR5cGUnLCBOdWxsYWJsZShWYWwpLFxuXHRcdFx0J2tpbmQnLCBOdW1iZXJcblx0XHRdLFxuXHRcdHtcblx0XHRcdGlzTGF6eSgpIHsgcmV0dXJuIHRoaXMua2luZCA9PT0gTERfTGF6eSB9LFxuXHRcdFx0aXNNdXRhYmxlKCkgeyByZXR1cm4gdGhpcy5raW5kID09PSBMRF9NdXRhYmxlIH1cblx0XHR9LFxuXHRcdHtcblx0XHRcdC8vIENhbid0IGNhbGwgdGhpcyAnbmFtZScgYmVjYXVzZSBMb2NhbERlY2xhcmUubmFtZSBpcyAnTG9jYWxEZWNsYXJlJ1xuXHRcdFx0ZGVjbGFyZU5hbWU6IGxvYyA9PlxuXHRcdFx0XHRMb2NhbERlY2xhcmUucGxhaW4obG9jLCAnbmFtZScpLFxuXHRcdFx0Zm9jdXM6IGxvYyA9PlxuXHRcdFx0XHRMb2NhbERlY2xhcmUucGxhaW4obG9jLCAnXycpLFxuXHRcdFx0bm9UeXBlOiAobG9jLCBuYW1lLCBpc0xhenkpID0+XG5cdFx0XHRcdExvY2FsRGVjbGFyZShsb2MsIG5hbWUsIG51bGwsIGlzTGF6eSA/IExEX0xhenkgOiBMRF9Db25zdCksXG5cdFx0XHRwbGFpbjogKGxvYywgbmFtZSkgPT5cblx0XHRcdFx0TG9jYWxEZWNsYXJlLm5vVHlwZShsb2MsIG5hbWUsIGZhbHNlKVxuXHRcdH0pLFxuXHRMb2NhbERlY2xhcmVCdWlsdCA9IG1ha2VUeXBlKExvY2FsRGVjbGFyZSkoJ0xvY2FsRGVjbGFyZUJ1aWx0Jyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgXSxcblx0XHR7XG5cdFx0XHRuYW1lOiAnYnVpbHQnLFxuXHRcdFx0b3BUeXBlOiBudWxsLFxuXHRcdFx0a2luZDogTERfQ29uc3Rcblx0XHR9KSxcblx0TG9jYWxEZWNsYXJlUmVzID0gbWFrZVR5cGUoTG9jYWxEZWNsYXJlKSgnTG9jYWxEZWNsYXJlUmVzJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgJ29wVHlwZScsIE51bGxhYmxlKFZhbCkgXSxcblx0XHR7XG5cdFx0XHRuYW1lOiAncmVzJyxcblx0XHRcdGtpbmQ6IExEX0NvbnN0XG5cdFx0fSksXG5cblx0RGVidWcgPSBkKCdEZWJ1ZycsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICdsaW5lcycsIFtMaW5lQ29udGVudF0gXSksXG5cblx0QmxvY2sgPSBhYnN0cmFjdCgnQmxvY2snLCBNc0FzdCwgJ1RPRE86RE9DJyksXG5cdEJsb2NrRG8gPSBtYWtlVHlwZShCbG9jaykoJ0Jsb2NrRG8nLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAnbGluZXMnLCBbTGluZUNvbnRlbnRdIF0pLFxuXHRCbG9ja1ZhbCA9IGFic3RyYWN0KCdCbG9ja1ZhbCcsIEJsb2NrLCAnVE9ETzpET0MnKSxcblx0QmxvY2tXaXRoUmV0dXJuID0gbWFrZVR5cGUoQmxvY2tWYWwpKCdCbG9ja1dpdGhSZXR1cm4nLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAnbGluZXMnLCBbTGluZUNvbnRlbnRdLCAncmV0dXJuZWQnLCBWYWwgXSksXG5cblx0QmxvY2tPYmogPSBtYWtlVHlwZShCbG9ja1ZhbCkoJ0Jsb2NrT2JqJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFtcblx0XHRcdCdsaW5lcycsIFtMaW5lQ29udGVudF0sXG5cdFx0XHQna2V5cycsIFtMb2NhbERlY2xhcmVdLFxuXHRcdFx0J29wT2JqZWQnLCBOdWxsYWJsZShWYWwpLFxuXHRcdFx0J29wTmFtZScsIE51bGxhYmxlKFN0cmluZylcblx0XHRdKSxcblxuXHRCYWdFbnRyeSA9IG0oJ0JhZ0VudHJ5Jyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgJ3ZhbHVlJywgVmFsIF0pLFxuXHRCbG9ja0JhZyA9IG1ha2VUeXBlKEJsb2NrVmFsKSgnQmxvY2tCYWcnLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAnYnVpbHQnLCBMb2NhbERlY2xhcmVCdWlsdCwgJ2xpbmVzJywgW1VuaW9uKExpbmVDb250ZW50LCBCYWdFbnRyeSldIF0sXG5cdFx0eyB9LFxuXHRcdHsgb2Y6IChsb2MsIGxpbmVzKSA9PiBCbG9ja0JhZyhsb2MsIExvY2FsRGVjbGFyZUJ1aWx0KGxvYyksIGxpbmVzKSB9KSxcblxuXHRNYXBFbnRyeSA9IG0oJ01hcEVudHJ5Jyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgJ2tleScsIFZhbCwgJ3ZhbCcsIFZhbCBdKSxcblx0QmxvY2tNYXAgPSBtYWtlVHlwZShCbG9ja1ZhbCkoJ0Jsb2NrTWFwJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgJ2J1aWx0JywgTG9jYWxEZWNsYXJlQnVpbHQsICdsaW5lcycsIFtVbmlvbihMaW5lQ29udGVudCwgTWFwRW50cnkpXSBdLFxuXHRcdHsgfSxcblx0XHR7IG9mOiAobG9jLCBsaW5lcykgPT4gQmxvY2tNYXAobG9jLCBMb2NhbERlY2xhcmVCdWlsdChsb2MpLCBsaW5lcykgfSksXG5cblx0TG9jYWxBY2Nlc3MgPSB2KCdMb2NhbEFjY2VzcycsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICduYW1lJywgU3RyaW5nIF0sXG5cdFx0eyB9LFxuXHRcdHsgZm9jdXM6IGxvYyA9PiBMb2NhbEFjY2Vzcyhsb2MsICdfJykgfSksXG5cdEFzc2lnbiA9IGQoJ0Fzc2lnbicsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbXG5cdFx0XHQnYXNzaWduZWUnLCBMb2NhbERlY2xhcmUsXG5cdFx0XHQndmFsdWUnLCBWYWxcblx0XHRdLFxuXHRcdHsgfSxcblx0XHR7IGZvY3VzOiAobG9jLCB2YWx1ZSkgPT4gQXNzaWduKGxvYywgTG9jYWxEZWNsYXJlLmZvY3VzKGxvYyksIHZhbHVlKSB9KSxcblx0QXNzaWduRGVzdHJ1Y3R1cmUgPSBkKCdBc3NpZ25EZXN0cnVjdHVyZScsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbXG5cdFx0XHQnYXNzaWduZWVzJywgW0xvY2FsRGVjbGFyZV0sXG5cdFx0XHQndmFsdWUnLCBWYWxcblx0XHRdLFxuXHRcdHtcblx0XHRcdC8vIEFsbCBhc3NpZ25lZXMgbXVzdCBzaGFyZSB0aGUgc2FtZSBraW5kLlxuXHRcdFx0a2luZCgpIHsgcmV0dXJuIHRoaXMuYXNzaWduZWVzWzBdLmtpbmQgfVxuXHRcdH0pLFxuXHRBc3NpZ25NdXRhdGUgPSBkKCdBc3NpZ25NdXRhdGUnLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0W1xuXHRcdFx0J25hbWUnLCBTdHJpbmcsXG5cdFx0XHQndmFsdWUnLCBWYWxcblx0XHRdKSxcblx0R2xvYmFsQWNjZXNzID0gdignR2xvYmFsQWNjZXNzJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgJ25hbWUnLCBKc0dsb2JhbHMgXSksXG5cblx0Ly8gTW9kdWxlXG5cdFVzZURvID0gbSgnVXNlRG8nLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAncGF0aCcsIFN0cmluZyBdKSxcblx0VXNlID0gbSgnVXNlJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFtcblx0XHRcdCdwYXRoJywgU3RyaW5nLFxuXHRcdFx0J3VzZWQnLCBbTG9jYWxEZWNsYXJlXSxcblx0XHRcdCdvcFVzZURlZmF1bHQnLCBOdWxsYWJsZShMb2NhbERlY2xhcmUpXG5cdFx0XSksXG5cdE1vZHVsZSA9IG0oJ01vZHVsZScsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbXG5cdFx0XHQnZG9Vc2VzJywgW1VzZURvXSxcblx0XHRcdCd1c2VzJywgW1VzZV0sXG5cdFx0XHQnZGVidWdVc2VzJywgW1VzZV0sXG5cdFx0XHQnbGluZXMnLCBbRG9dLFxuXHRcdFx0J2V4cG9ydHMnLCBbTG9jYWxEZWNsYXJlXSxcblx0XHRcdCdvcERlZmF1bHRFeHBvcnQnLCBOdWxsYWJsZShWYWwpXG5cdFx0XSksXG5cblx0Ly8gRGF0YVxuXHRCYWdTaW1wbGUgPSB2KCdCYWdTaW1wbGUnLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAncGFydHMnLCBbVmFsXSBdKSxcblx0T2JqUGFpciA9IG0oJ09ialBhaXInLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0W1xuXHRcdFx0J2tleScsIFN0cmluZyxcblx0XHRcdCd2YWx1ZScsIFZhbFxuXHRcdF0pLFxuXHQvLyBWZXJpZmllciBjaGVja3MgdGhhdCBubyB0d28gcGFpcnMgbWF5IGhhdmUgdGhlIHNhbWUga2V5LlxuXHRPYmpTaW1wbGUgPSB2KCdPYmpTaW1wbGUnLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAncGFpcnMnLCBbT2JqUGFpcl0gXSksXG5cblx0Ly8gQ2FzZVxuXHRQYXR0ZXJuID0gbSgnUGF0dGVybicsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbXG5cdFx0XHQndHlwZScsIFZhbCxcblx0XHRcdCdsb2NhbHMnLCBbTG9jYWxEZWNsYXJlXSxcblx0XHRcdCdwYXR0ZXJuZWQnLCBMb2NhbEFjY2Vzc1xuXHRcdF0pLFxuXHRDYXNlRG9QYXJ0ID0gbSgnQ2FzZURvUGFydCcsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbXG5cdFx0XHQndGVzdCcsIFVuaW9uKFZhbCwgUGF0dGVybiksXG5cdFx0XHQncmVzdWx0JywgQmxvY2tEb1xuXHRcdF0pLFxuXHRDYXNlVmFsUGFydCA9IG0oJ0Nhc2VWYWxQYXJ0Jyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFtcblx0XHRcdCd0ZXN0JywgVW5pb24oVmFsLCBQYXR0ZXJuKSxcblx0XHRcdCdyZXN1bHQnLCBCbG9ja1ZhbFxuXHRcdF0pLFxuXHRDYXNlRG8gPSBkKCdDYXNlRG8nLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0W1xuXHRcdFx0J29wQ2FzZWQnLCBOdWxsYWJsZShBc3NpZ24pLFxuXHRcdFx0J3BhcnRzJywgW0Nhc2VEb1BhcnRdLFxuXHRcdFx0J29wRWxzZScsIE51bGxhYmxlKEJsb2NrRG8pXG5cdFx0XSksXG5cdC8vIFVubGlrZSBDYXNlRG8sIHRoaXMgaGFzIGByZXR1cm5gIHN0YXRlbWVudHMuXG5cdENhc2VWYWwgPSB2KCdDYXNlVmFsJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFtcblx0XHRcdCdvcENhc2VkJywgTnVsbGFibGUoQXNzaWduKSxcblx0XHRcdCdwYXJ0cycsIFtDYXNlVmFsUGFydF0sXG5cdFx0XHQnb3BFbHNlJywgTnVsbGFibGUoQmxvY2tWYWwpXG5cdFx0XSksXG5cblx0Ly8gTG9vcHNcblx0Rm9yRG9QbGFpbiA9IGQoJ0ZvckRvUGxhaW4nLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAnYmxvY2snLCBCbG9ja0RvIF0pLFxuXHRGb3JEb1dpdGhCYWcgPSBkKCdGb3JEb1dpdGhCYWcnLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAnZWxlbWVudCcsIExvY2FsRGVjbGFyZSwgJ2JhZycsIFZhbCwgJ2Jsb2NrJywgQmxvY2tEbyBdKSxcblx0QnJlYWtEbyA9IGQoJ0JyZWFrRG8nLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyBdKSxcblxuXHQvLyBPdGhlciBzdGF0ZW1lbnRzXG5cdElmRG8gPSBkKCdJZkRvJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgJ3Rlc3QnLCBWYWwsICdyZXN1bHQnLCBCbG9ja0RvIF0pLFxuXHRVbmxlc3NEbyA9IGQoJ1VubGVzc0RvJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgJ3Rlc3QnLCBWYWwsICdyZXN1bHQnLCBCbG9ja0RvIF0pLFxuXG5cdC8vIEdlbmVyYXRvcnNcblx0WWllbGQgPSB2KCdZaWVsZCcsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICd5aWVsZGVkJywgVmFsIF0pLFxuXHRZaWVsZFRvID0gdignWWllbGRUbycsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICd5aWVsZGVkVG8nLCBWYWwgXSksXG5cblx0Ly8gRXhwcmVzc2lvbnNcblx0U3BsYXQgPSBtKCdTcGxhdCcsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICdzcGxhdHRlZCcsIFZhbCBdKSxcblx0Q2FsbCA9IHYoJ0NhbGwnLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0W1xuXHRcdFx0J2NhbGxlZCcsIFZhbCxcblx0XHRcdCdhcmdzJywgW1VuaW9uKFZhbCwgU3BsYXQpXVxuXHRcdF0sXG5cdFx0eyB9LFxuXHRcdHtcblx0XHRcdGNvbnRhaW5zOiAobG9jLCB0ZXN0VHlwZSwgdGVzdGVkKSA9PlxuXHRcdFx0XHRDYWxsKGxvYywgU3BlY2lhbFZhbChsb2MsIFNWX0NvbnRhaW5zKSwgWyB0ZXN0VHlwZSwgdGVzdGVkIF0pLFxuXHRcdFx0c3ViOiAobG9jLCBhcmdzKSA9PiBDYWxsKGxvYywgU3BlY2lhbFZhbChsb2MsIFNWX1N1YiksIGFyZ3MpXG5cdFx0fSksXG5cdEJsb2NrV3JhcCA9IHYoJ0Jsb2NrV3JhcCcsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICdibG9jaycsIEJsb2NrVmFsIF0pLFxuXG5cdEZ1biA9IHYoJ0Z1bicsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbXG5cdFx0XHQnaXNHZW5lcmF0b3InLCBCb29sZWFuLFxuXHRcdFx0J2FyZ3MnLCBbTG9jYWxEZWNsYXJlXSxcblx0XHRcdCdvcFJlc3RBcmcnLCBOdWxsYWJsZShMb2NhbERlY2xhcmUpLFxuXHRcdFx0J2Jsb2NrJywgQmxvY2ssXG5cdFx0XHQnb3BJbicsIE51bGxhYmxlKERlYnVnKSxcblx0XHRcdC8vIElmIG5vbi1lbXB0eSwgYmxvY2sgc2hvdWxkIGJlIGEgQmxvY2tWYWwsXG5cdFx0XHQvLyBhbmQgZWl0aGVyIGl0IGhhcyBhIHR5cGUgb3Igb3BPdXQgaXMgbm9uLWVtcHR5LlxuXHRcdFx0J29wUmVzRGVjbGFyZScsIE51bGxhYmxlKExvY2FsRGVjbGFyZVJlcyksXG5cdFx0XHQnb3BPdXQnLCBOdWxsYWJsZShEZWJ1ZyksXG5cdFx0XHQnbmFtZScsIE51bGxhYmxlKFN0cmluZylcblx0XHRdKSxcblxuXHRMYXp5ID0gdignTGF6eScsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICd2YWx1ZScsIFZhbCBdKSxcblx0TnVtYmVyTGl0ZXJhbCA9IHYoJ051bWJlckxpdGVyYWwnLFxuXHRcdCdUT0RPOkRPQycsXG5cdFx0WyAndmFsdWUnLCBOdW1iZXIgXSksXG5cdE1lbWJlciA9IHYoJ01lbWJlcicsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbXG5cdFx0XHQnb2JqZWN0JywgVmFsLFxuXHRcdFx0J25hbWUnLCBTdHJpbmdcblx0XHRdKSxcblx0Ly8gcGFydHMgYXJlIFN0cmluZ3MgaW50ZXJsZWF2ZWQgd2l0aCBWYWxzLlxuXHRRdW90ZSA9IHYoJ1F1b3RlJyxcblx0XHQnVE9ETzpET0MnLFxuXHRcdFsgJ3BhcnRzJywgW09iamVjdF0gXSxcblx0XHR7IH0sXG5cdFx0e1xuXHRcdFx0Zm9yU3RyaW5nOiAobG9jLCBzdHIpID0+IFF1b3RlKGxvYywgWyBzdHIgXSlcblx0XHR9KSxcblxuXHRTRF9EZWJ1Z2dlciA9IDAsXG5cdFNwZWNpYWxEbyA9IGQoJ1NwZWNpYWxEbycsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICdraW5kJywgTnVtYmVyIF0pLFxuXG5cdFNWX0NvbnRhaW5zID0gMCxcblx0U1ZfRmFsc2UgPSAxLFxuXHRTVl9OdWxsID0gMixcblx0U1ZfU3ViID0gMyxcblx0U1ZfVGhpcyA9IDQsXG5cdFNWX1RoaXNNb2R1bGVEaXJlY3RvcnkgPSA1LFxuXHRTVl9UcnVlID0gNixcblx0U1ZfVW5kZWZpbmVkID0gNyxcblx0Ly8gayBpcyBhIFNQXyoqKlxuXHRTcGVjaWFsVmFsID0gdignU3BlY2lhbCcsXG5cdFx0J1RPRE86RE9DJyxcblx0XHRbICdraW5kJywgTnVtYmVyIF0pXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==