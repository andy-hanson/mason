{"version":3,"sources":["meta/compile/browser-only/compileErrorToDomSpan.js"],"names":[],"mappings":";;;;;;;;;;;;;mBAGe,UAAC,KAAK,EAAE,UAAU,EAAK;AACrC,QAAK,KAAK,iBAAe,CAAA;AACzB,SAAO,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;EACjD;;AAEM,OAAM,oBAAoB,GAAG,UAAC,OAAO,EAAE,UAAU,EAAK;AAC5D,QAAK,OAAO,gBATU,OAAO,EASN,UAAU,EAAE,MAAM,CAAC,CAAA;;AAE1C,SAAO,MAAM,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,CAAC,CAAA;EAC7C,CAAA;;SAJY,oBAAoB,GAApB,oBAAoB;AAMjC,OAAM,MAAM,GAAG,UAAC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAK;AAC7C,QAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;AAC9C,SAAO,CAAC,SAAS,GAAG,KAAK,CAAA;AACzB,SAAO,CAAC,WAAW,GAAG,OAAO,CAAC,GAAG,GAAG,GAAG,CAAA;;AAEvC,QAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;AACrD,aAAW,CAAC,SAAS,GAAG,SAAS,CAAA;AACjC,QAAM,YAAY,GAAG,cArBU,UAAU,CAqBT,OAAO,CAAC,OAAO,EAAE,UAAA,IAAI,EAAI;AACxD,SAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;AACxC,IAAC,CAAC,SAAS,GAAG,MAAM,CAAA;AACpB,IAAC,CAAC,WAAW,GAAG,IAAI,CAAA;AACpB,UAAO,CAAC,CAAA;GACR,CAAC,CAAA;AACF,OAAK,IAAI,IAAI,IAAI,YAAY,EAC5B,WAAW,CAAC,WAAW,CAAC,OAAO,IAAI,KAAK,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAA;;AAEzF,QAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;AAC9C,SAAO,CAAC,SAAS,GAAG,IAAI,CAAA;AACxB,SAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;AAC5B,SAAO,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;AAChC,SAAO,OAAO,CAAA;EACd,CAAA","file":"meta/compile/browser-only/compileErrorToDomSpan.js","sourcesContent":["import CompileError, { Warning, formatCode } from '../CompileError'\nimport type from '../private/U/type'\n\nexport default (error, modulePath) => {\n\ttype(error, CompileError)\n\treturn format(error.warning, modulePath, 'error')\n}\n\nexport const formatWarningForHtml = (warning, modulePath) => {\n\ttype(warning, Warning, modulePath, String)\n\t// Extra space to match up with 'error'\n\treturn format(warning, modulePath, 'warning')\n}\n\nconst format = (warning, modulePath, kind) => {\n\tconst locSpan = document.createElement('span')\n\tlocSpan.className = 'loc'\n\tlocSpan.textContent = warning.loc + ' '\n\n\tconst messageSpan = document.createElement('message')\n\tmessageSpan.className = 'message'\n\tconst messageParts = formatCode(warning.message, code => {\n\t\tconst _ = document.createElement('span')\n\t\t_.className = 'code'\n\t\t_.textContent = code\n\t\treturn _\n\t})\n\tfor (let part of messageParts)\n\t\tmessageSpan.appendChild(typeof part === 'string' ? document.createTextNode(part) : part)\n\n\tconst allSpan = document.createElement('span')\n\tallSpan.className = kind\n\tallSpan.appendChild(locSpan)\n\tallSpan.appendChild(messageSpan)\n\treturn allSpan\n}\n"],"sourceRoot":"/src"}