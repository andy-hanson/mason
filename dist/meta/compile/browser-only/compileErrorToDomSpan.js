if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', '../CompileError', '../private/util'], function (exports, _CompileError, _privateUtil) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _CompileError2 = _interopRequireDefault(_CompileError);

	exports.default = (error, modulePath) => {
		(0, _privateUtil.type)(error, _CompileError2.default);
		return format(error.warning, modulePath, 'error');
	};

	const formatWarningForHtml = (warning, modulePath) => {
		(0, _privateUtil.type)(warning, _CompileError.Warning, modulePath, String);
		// Extra space to match up with 'error'
		return format(warning, modulePath, 'warning');
	};

	exports.formatWarningForHtml = formatWarningForHtml;
	const format = (warning, modulePath, kind) => {
		const locSpan = document.createElement('span');
		locSpan.className = 'loc';
		locSpan.textContent = warning.loc + ' ';

		const messageSpan = document.createElement('message');
		messageSpan.className = 'message';
		const messageParts = (0, _CompileError.formatCode)(warning.message, code => {
			const _ = document.createElement('span');
			_.className = 'code';
			_.textContent = code;
			return _;
		});
		for (let part of messageParts) messageSpan.appendChild(typeof part === 'string' ? document.createTextNode(part) : part);

		const allSpan = document.createElement('span');
		allSpan.className = kind;
		allSpan.appendChild(locSpan);
		allSpan.appendChild(messageSpan);
		return allSpan;
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9icm93c2VyLW9ubHkvY29tcGlsZUVycm9yVG9Eb21TcGFuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O21CQUdlLENBQUMsS0FBSyxFQUFFLFVBQVUsS0FBSztBQUNyQyxtQkFIUSxJQUFJLEVBR1AsS0FBSyx5QkFBZSxDQUFBO0FBQ3pCLFNBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0VBQ2pEOztBQUVNLE9BQU0sb0JBQW9CLEdBQUcsQ0FBQyxPQUFPLEVBQUUsVUFBVSxLQUFLO0FBQzVELG1CQVJRLElBQUksRUFRUCxPQUFPLGdCQVRVLE9BQU8sRUFTTixVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUE7O0FBRTFDLFNBQU8sTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUE7RUFDN0MsQ0FBQTs7U0FKWSxvQkFBb0IsR0FBcEIsb0JBQW9CO0FBTWpDLE9BQU0sTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEtBQUs7QUFDN0MsUUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM5QyxTQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQTtBQUN6QixTQUFPLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBOztBQUV2QyxRQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3JELGFBQVcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO0FBQ2pDLFFBQU0sWUFBWSxHQUFHLGtCQXJCVSxVQUFVLEVBcUJULE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJO0FBQ3hELFNBQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDeEMsSUFBQyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUE7QUFDcEIsSUFBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUE7QUFDcEIsVUFBTyxDQUFDLENBQUE7R0FDUixDQUFDLENBQUE7QUFDRixPQUFLLElBQUksSUFBSSxJQUFJLFlBQVksRUFDNUIsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTs7QUFFekYsUUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM5QyxTQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQTtBQUN4QixTQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQzVCLFNBQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDaEMsU0FBTyxPQUFPLENBQUE7RUFDZCxDQUFBIiwiZmlsZSI6Im1ldGEvY29tcGlsZS9icm93c2VyLW9ubHkvY29tcGlsZUVycm9yVG9Eb21TcGFuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbXBpbGVFcnJvciwgeyBXYXJuaW5nLCBmb3JtYXRDb2RlIH0gZnJvbSAnLi4vQ29tcGlsZUVycm9yJ1xuaW1wb3J0IHsgdHlwZSB9IGZyb20gJy4uL3ByaXZhdGUvdXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgKGVycm9yLCBtb2R1bGVQYXRoKSA9PiB7XG5cdHR5cGUoZXJyb3IsIENvbXBpbGVFcnJvcilcblx0cmV0dXJuIGZvcm1hdChlcnJvci53YXJuaW5nLCBtb2R1bGVQYXRoLCAnZXJyb3InKVxufVxuXG5leHBvcnQgY29uc3QgZm9ybWF0V2FybmluZ0Zvckh0bWwgPSAod2FybmluZywgbW9kdWxlUGF0aCkgPT4ge1xuXHR0eXBlKHdhcm5pbmcsIFdhcm5pbmcsIG1vZHVsZVBhdGgsIFN0cmluZylcblx0Ly8gRXh0cmEgc3BhY2UgdG8gbWF0Y2ggdXAgd2l0aCAnZXJyb3InXG5cdHJldHVybiBmb3JtYXQod2FybmluZywgbW9kdWxlUGF0aCwgJ3dhcm5pbmcnKVxufVxuXG5jb25zdCBmb3JtYXQgPSAod2FybmluZywgbW9kdWxlUGF0aCwga2luZCkgPT4ge1xuXHRjb25zdCBsb2NTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG5cdGxvY1NwYW4uY2xhc3NOYW1lID0gJ2xvYydcblx0bG9jU3Bhbi50ZXh0Q29udGVudCA9IHdhcm5pbmcubG9jICsgJyAnXG5cblx0Y29uc3QgbWVzc2FnZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdtZXNzYWdlJylcblx0bWVzc2FnZVNwYW4uY2xhc3NOYW1lID0gJ21lc3NhZ2UnXG5cdGNvbnN0IG1lc3NhZ2VQYXJ0cyA9IGZvcm1hdENvZGUod2FybmluZy5tZXNzYWdlLCBjb2RlID0+IHtcblx0XHRjb25zdCBfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG5cdFx0Xy5jbGFzc05hbWUgPSAnY29kZSdcblx0XHRfLnRleHRDb250ZW50ID0gY29kZVxuXHRcdHJldHVybiBfXG5cdH0pXG5cdGZvciAobGV0IHBhcnQgb2YgbWVzc2FnZVBhcnRzKVxuXHRcdG1lc3NhZ2VTcGFuLmFwcGVuZENoaWxkKHR5cGVvZiBwYXJ0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHBhcnQpIDogcGFydClcblxuXHRjb25zdCBhbGxTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG5cdGFsbFNwYW4uY2xhc3NOYW1lID0ga2luZFxuXHRhbGxTcGFuLmFwcGVuZENoaWxkKGxvY1NwYW4pXG5cdGFsbFNwYW4uYXBwZW5kQ2hpbGQobWVzc2FnZVNwYW4pXG5cdHJldHVybiBhbGxTcGFuXG59XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==