if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', '../CompileError', '../private/U/util'], function (exports, _CompileError, _privateUUtil) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _CompileError2 = _interopRequire(_CompileError);

	exports.default = function (error, modulePath) {
		(0, _privateUUtil.type)(error, _CompileError2);
		return format(error.warning, modulePath, 'error');
	};

	const formatWarningForHtml = function (warning, modulePath) {
		(0, _privateUUtil.type)(warning, _CompileError.Warning, modulePath, String);
		// Extra space to match up with 'error'
		return format(warning, modulePath, 'warning');
	};

	exports.formatWarningForHtml = formatWarningForHtml;
	const format = function (warning, modulePath, kind) {
		const locSpan = document.createElement('span');
		locSpan.className = 'loc';
		locSpan.textContent = warning.loc + ' ';

		const messageSpan = document.createElement('message');
		messageSpan.className = 'message';
		const messageParts = (0, _CompileError.formatCode)(warning.message, function (code) {
			const _ = document.createElement('span');
			_.className = 'code';
			_.textContent = code;
			return _;
		});
		for (let part of messageParts) messageSpan.appendChild(typeof part === 'string' ? document.createTextNode(part) : part);

		const allSpan = document.createElement('span');
		allSpan.className = kind;
		allSpan.appendChild(locSpan);
		allSpan.appendChild(messageSpan);
		return allSpan;
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEvY29tcGlsZS9icm93c2VyLW9ubHkvY29tcGlsZUVycm9yVG9Eb21TcGFuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O21CQUdlLFVBQUMsS0FBSyxFQUFFLFVBQVUsRUFBSztBQUNyQyxvQkFIUSxJQUFJLEVBR1AsS0FBSyxpQkFBZSxDQUFBO0FBQ3pCLFNBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0VBQ2pEOztBQUVNLE9BQU0sb0JBQW9CLEdBQUcsVUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFLO0FBQzVELG9CQVJRLElBQUksRUFRUCxPQUFPLGdCQVRVLE9BQU8sRUFTTixVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUE7O0FBRTFDLFNBQU8sTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUE7RUFDN0MsQ0FBQTs7U0FKWSxvQkFBb0IsR0FBcEIsb0JBQW9CO0FBTWpDLE9BQU0sTUFBTSxHQUFHLFVBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUs7QUFDN0MsUUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM5QyxTQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQTtBQUN6QixTQUFPLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBOztBQUV2QyxRQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3JELGFBQVcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO0FBQ2pDLFFBQU0sWUFBWSxHQUFHLGtCQXJCVSxVQUFVLEVBcUJULE9BQU8sQ0FBQyxPQUFPLEVBQUUsVUFBQSxJQUFJLEVBQUk7QUFDeEQsU0FBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN4QyxJQUFDLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQTtBQUNwQixJQUFDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQTtBQUNwQixVQUFPLENBQUMsQ0FBQTtHQUNSLENBQUMsQ0FBQTtBQUNGLE9BQUssSUFBSSxJQUFJLElBQUksWUFBWSxFQUM1QixXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBOztBQUV6RixRQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQzlDLFNBQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO0FBQ3hCLFNBQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDNUIsU0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUNoQyxTQUFPLE9BQU8sQ0FBQTtFQUNkLENBQUEiLCJmaWxlIjoibWV0YS9jb21waWxlL2Jyb3dzZXItb25seS9jb21waWxlRXJyb3JUb0RvbVNwYW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tcGlsZUVycm9yLCB7IFdhcm5pbmcsIGZvcm1hdENvZGUgfSBmcm9tICcuLi9Db21waWxlRXJyb3InXG5pbXBvcnQgeyB0eXBlIH0gZnJvbSAnLi4vcHJpdmF0ZS9VL3V0aWwnXG5cbmV4cG9ydCBkZWZhdWx0IChlcnJvciwgbW9kdWxlUGF0aCkgPT4ge1xuXHR0eXBlKGVycm9yLCBDb21waWxlRXJyb3IpXG5cdHJldHVybiBmb3JtYXQoZXJyb3Iud2FybmluZywgbW9kdWxlUGF0aCwgJ2Vycm9yJylcbn1cblxuZXhwb3J0IGNvbnN0IGZvcm1hdFdhcm5pbmdGb3JIdG1sID0gKHdhcm5pbmcsIG1vZHVsZVBhdGgpID0+IHtcblx0dHlwZSh3YXJuaW5nLCBXYXJuaW5nLCBtb2R1bGVQYXRoLCBTdHJpbmcpXG5cdC8vIEV4dHJhIHNwYWNlIHRvIG1hdGNoIHVwIHdpdGggJ2Vycm9yJ1xuXHRyZXR1cm4gZm9ybWF0KHdhcm5pbmcsIG1vZHVsZVBhdGgsICd3YXJuaW5nJylcbn1cblxuY29uc3QgZm9ybWF0ID0gKHdhcm5pbmcsIG1vZHVsZVBhdGgsIGtpbmQpID0+IHtcblx0Y29uc3QgbG9jU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuXHRsb2NTcGFuLmNsYXNzTmFtZSA9ICdsb2MnXG5cdGxvY1NwYW4udGV4dENvbnRlbnQgPSB3YXJuaW5nLmxvYyArICcgJ1xuXG5cdGNvbnN0IG1lc3NhZ2VTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWVzc2FnZScpXG5cdG1lc3NhZ2VTcGFuLmNsYXNzTmFtZSA9ICdtZXNzYWdlJ1xuXHRjb25zdCBtZXNzYWdlUGFydHMgPSBmb3JtYXRDb2RlKHdhcm5pbmcubWVzc2FnZSwgY29kZSA9PiB7XG5cdFx0Y29uc3QgXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuXHRcdF8uY2xhc3NOYW1lID0gJ2NvZGUnXG5cdFx0Xy50ZXh0Q29udGVudCA9IGNvZGVcblx0XHRyZXR1cm4gX1xuXHR9KVxuXHRmb3IgKGxldCBwYXJ0IG9mIG1lc3NhZ2VQYXJ0cylcblx0XHRtZXNzYWdlU3Bhbi5hcHBlbmRDaGlsZCh0eXBlb2YgcGFydCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShwYXJ0KSA6IHBhcnQpXG5cblx0Y29uc3QgYWxsU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuXHRhbGxTcGFuLmNsYXNzTmFtZSA9IGtpbmRcblx0YWxsU3Bhbi5hcHBlbmRDaGlsZChsb2NTcGFuKVxuXHRhbGxTcGFuLmFwcGVuZENoaWxkKG1lc3NhZ2VTcGFuKVxuXHRyZXR1cm4gYWxsU3BhblxufVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=