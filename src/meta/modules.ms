use
	..$ _ $after $map
	..private.bootstrap msCall

$require = |require path
	# TODO:ES6 Shouldn't need `new`
	new $ |resolve reject
		require [ path ] resolve reject

dirname = |path
	path.replace (RegExp "/[^/]*$") ""

$get-module.
	doc. "
		Retrieves module code and evaluates it.
		First parameter should be the result of using `require` as a global module.
		This allows module-path to be relative to the module calling $get-module.
		The module is represented as an object whose keys are its exports and whose `default` key is its default export.
		Note that `use~` lazily evaluates the content of a module, but eagerly loads the module code.
	|require:Function module-path:String
		$after ($require require module-path) msCall["getModule"]

$@all-modules.
	doc. "
		All listed modules, as generated by Mason's list-modules task.
		module-list-path should point to the modules-list file.
		require and module-list-path are like in $get-module.
	|require:Function module-list-path:String
		modules-list-dir = dirname module-list-path
		$after ($get-module require module-list-path) |mp
			module-paths = msCall "getDefaultExport" mp
			$map module-paths |module-path
				full-path = "{modules-list-dir}/{module-path}"
				# module-path is relative to module-list-path
				$get-module require full-path
